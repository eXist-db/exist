<?xml version="1.0" encoding="UTF-8"?>
<!--

    eXist-db Open Source Native XML Database
    Copyright (C) 2001 The eXist-db Authors

    info@exist-db.org
    http://www.exist-db.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

-->
<TestSet>
    <testName>xquery3 try-catch</testName>
    <description>
        <p>Test xquery3 try-catch functionality</p>
        <author>Dannes Wessels</author>
    </description>
    <setup>
        <create-collection parent="/db" name="xquery3"/>
        <store collection="/db/xquery3" name="product-err.xml"><![CDATA[
            <products>
              <product>
                <name>broiler</name>
                <category>kitchen</category>
                <price>100</price>
                <cost>"70"</cost>
              </product>
              <product>
                <name>toaster</name>
                <category>kitchen</category>
                <price>30</price>
                <cost>10</cost>
              </product>
              <product>
                <name>blender</name>
                <category>kitchen</category>
                <price>50</price>
                <cost>25</cost>
              </product>
              <product>
                <name>socks</name>
                <category>clothes</category>
                <price>5</price>
                <cost>2</cost>
              </product>
              <product>
                <name>shirt</name>
                <category>clothes</category>
                <price>10</price>
                <cost>3</cost>
              </product>
            </products>
        ]]>
        </store>
    </setup>
    <tearDown>
        <remove-collection collection="/db/xquery3"/>
    </tearDown>

    <!-- derived from w3c: http://www.w3.org/TR/xquery-30-use-cases/#try-catch-use-cases -->


    <test output="text">
        <task>Usecases Q1</task>
        <code><![CDATA[
xquery version '3.0'; 
try {
    <result>{
        for $product in fn:doc("/db/xquery3/product-err.xml")//product
        return
            <product>{$product/name}
            <margin>{$product/price - $product/cost}</margin>
            </product>
    }</result>
} catch * {
     "An error occured, please ask your consultant for help."
}]]>
        </code>
        <expected>An error occured, please ask your consultant for help.</expected>
    </test>
  

    <test output="xml">
        <task>Usecases Q2</task>
        <code><![CDATA[
xquery version '3.0';
<result>{
    for $product in fn:doc("/db/xquery3/product-err.xml")//product
    return
         try {
            <product>{$product/name}
              <margin>{$product/price div $product/cost}</margin>
            </product>
        } catch * {
            <product>{
                ($product/name, "Error:", $err:code)
            }</product>
        }
}</result>
        ]]>
        </code>
        <expected>
            <result>
                <product>
                    <name>broiler</name>Error: err:FORG0001</product>
                <product>
                    <name>toaster</name>
                    <margin>3</margin>
                </product>
                <product>
                    <name>blender</name>
                    <margin>2</margin>
                </product>
                <product>
                    <name>socks</name>
                    <margin>2.5</margin>
                </product>
                <product>
                    <name>shirt</name>
                    <margin>3.3333333333333335</margin>
                </product>
            </result>
        </expected>
    </test>

   

    <test output="xml">
        <task>Usecases Q3</task>
        <code><![CDATA[
xquery version '3.0';
declare namespace foo='http://foo.com';
declare function local:fib-recur($n as xs:integer) as xs:integer? {
    if ($n <0) then ()
    else if ($n > 100) then
        fn:error(fn:QName('http://foo.com', 'ValueToBig'), 'Value too big')
    else if ($n = 0)  then 0
    else if ($n=1)   then 1
    else local:fib-recur($n - 1)  + local:fib-recur($n - 2)
};

<result>{
    for $x in (3,1,1030,5)
    return
        try{
        <fib input="{$x}">{local:fib-recur($x)}</fib>
        }catch foo:ValueToBig {
          <fib input="{$x}">Number to big</fib>
        }
}</result>
]]>
        </code>
        <expected>
            <result>
                <fib input="3">2</fib>
                <fib input="1">1</fib>
                <fib input="1030">Number to big</fib>
                <fib input="5">5</fib>
            </result>
        </expected>
    </test>
    <!-- -->

    <!-- the following tests are derived from http://www.w3.org/TR/xquery-30/#id-try-catch -->

    <test output="text">
        <task>A try/catch expression without a CatchErrorList catches
        any error
        </task>
        <code><![CDATA[
xquery version '3.0';
let $x := "a b c"
return
try {
    $x cast as xs:integer
}
catch * {
    0
}
]]>
        </code>
        <expected>0</expected>
    </test>

    <test output="text">
        <task>The CatchErrorList in this try/catch expression specifies
        that only err:FORG0001 is caught
        </task>
        <code><![CDATA[
        xquery version '3.0';
        let $x := "a b c"
        return
try {
    $x cast as xs:integer
}
catch err:FORG0001 {
    0
}
]]>
        </code>
        <expected>0</expected>
    </test>

    <test output="text">
        <task>The CatchErrorList in this try/catch expression specifies
        that errors err:FORG0001 and err:XPTY0004 are caught
        </task>
        <code><![CDATA[
        xquery version '3.0';
        let $x := "a b c"
        return
try {
    $x cast as xs:integer
}
catch err:FORG0001 | err:XPTY0004 {
    0
}
]]>
        </code>
        <expected>0</expected>
    </test>

<!--
    <test output="text">
        <task>Errors raised by using the result of a try/catch expression
        are not caught, since they are outside the scope of the try expression.
        </task>
        <code><![CDATA[
declare function local:thrice($x as xs:integer) as xs:integer
{
    3*$x
};

local:thrice(try { "oops" } catch * { 3 } )
]]>
        </code>
        <expected>a</expected>
    </test>

  -->


    <test output="xml">
        <task>Test for catching the right java exception</task>
        <code><![CDATA[
xquery version '3.0';
try{
    xmldb:store('/db/foobaar/', "text.xml", <a/>)
} catch * {
    <error>
        <code>{$err:code}</code>
        <value exists="{exists($err:value)}"/>
        <description>{$err:description}</description>
        <module>{$err:module}</module>
        <line>{$err:line-number}</line>
        <column>{$err:column-number}</column>
    </error>
}
]]>
        </code>
        <expected>
            <error><code>java:org.xmldb.api.base.XMLDBException</code><value exists="false"/><description>Collection /db/foobaar not found. Could not locate collection: /db/foobaar/</description><module>String/-563337617169755270</module><line>4</line><column>5</column></error>
        </expected>
    </test>

    <test output="xml">
        <task>Test for catching the right java exception 2</task>
        <code><![CDATA[
xquery version '3.0';
try{
    xmldb:store('/db/foobaar/', "text.xml", <a/>)
} catch java:org.XPathException {
    <error>
        <code>{$err:code}</code>
    </error>
} catch java:org.exist.xquery.XPathException {
    <error>
        <code>{$err:code}</code>
    </error>
} catch java:org.xmldb.api.base.XMLDBException {
    <error>
        <code>{$err:code}</code>
    </error>
} catch * {
    <error>
        <code>{$err:code}</code>
    </error>
}
]]>
        </code>
        <expected><error><code>java:org.xmldb.api.base.XMLDBException</code></error></expected>
    </test>
    
    <test output="text">
        <task>Test for catching the right java exception 3</task>
        <code><![CDATA[
        xquery version '3.0';
        let $x := "a b c"
        return
try {
    fn:error(QName('http://foobar', 'foo:BAR'), "foofoo", <barbar/>)
}
catch * {
    <error>
        <code>{$err:code}</code>
        <value exists="{exists($err:value)}"/>
        <description>{$err:description}</description>
        <module>{$err:module}</module>
        <line>{$err:line-number}</line>
        <column>{$err:column-number}</column>
    </error>
}
]]>
        </code>
        <expected><error><code>foo:BAR</code><value exists="true"/><description>foofoo</description><module>String/-8064092393637135869</module><line>6</line><column>5</column></error></expected>
    </test>



    <test output="text">
        <task>Test for catching the right java exception 4</task>
        <code><![CDATA[
xquery version '3.0';
try {
    fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
}
catch * {
    <error>
        <code>{$err:code}</code>
        <value exists="{exists($err:value)}">{$err:value}</value>
        <description>{$err:description}</description>
        <module>{$err:module}</module>
        <line>{$err:line-number}</line>
        <column>{$err:column-number}</column>
    </error>
}
]]>
        </code>
        <expected><error><code>err:FOER0000</code><value exists="false"/><description>An error has been raised by the query</description><module>String/4137657403599489699</module><line>4</line><column>5</column></error></expected>
    </test>

    <test output="text">
        <task>Check that the $err:code is the correct QName</task>
        <code><![CDATA[
xquery version '3.0';
try {
    let $xq := "
	    let $x as xs:string := 1
	    return $x
    " return
	    util:eval($xq)
}
catch * {
    <code>
        <ns>{namespace-uri-from-QName($err:code)}</ns>
        <local-name>{local-name-from-QName($err:code)}</local-name>
    </code>
}
]]>
        </code>
        <expected>
            <code><ns>http://www.w3.org/2005/xqt-errors</ns><local-name>XPTY0004</local-name></code>
        </expected>
    </test>

    <test output="text">
        <task>Catch BracedURILiteral</task>
        <code><![CDATA[
 xquery version '3.0';
 try {
     fn:error(xs:QName("local:my-error"))
 }
 catch Q{http://www.w3.org/2005/xquery-local-functions}my-error {
     <caught>{$err:code}</caught>
 }
 ]]>
        </code>
        <expected>
            <caught>local:my-error</caught>
        </expected>
    </test>

    <test output="text">
        <task>Catch wildcard local-part</task>
        <code><![CDATA[
xquery version '3.0';
try {
    fn:error(xs:QName("local:my-error"))
}
catch local:* {
    <caught>{$err:code}</caught>
}
]]>
        </code>
        <expected>
            <caught>local:my-error</caught>
        </expected>
    </test>

    <test output="text">
        <task>Catch wildcard prefix</task>
        <code><![CDATA[
xquery version '3.0';
try {
    fn:error(xs:QName("local:my-error"))
}
catch *:my-error {
    <caught>{$err:code}</caught>
}
]]>
        </code>
        <expected>
            <caught>local:my-error</caught>
        </expected>
    </test>
</TestSet>
