<?xml version="1.0" encoding="UTF-8"?>
<TestSet>
    <testName>xquery3 higher-order functions</testName>
    <description>
        <p>Higher-order functions in XQuery 3.0</p>
        <author>Wolfgang Meier</author>
    </description>
    <test output="text">
        <task>Named function reference</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Named function reference in "local" namespace</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := local:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Backwards compatibility test 1</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := util:function(xs:QName("local:add"), 2)
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Backwards compatibility test 2</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := local:add#2
return
       util:call($f1, 20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Annotation support test</task>
        <code><![CDATA[xquery version "3.0";
declare namespace ex="http://exist-db.org/xquery/ex";

declare %ex:annotest function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Inline function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f2 := function($a) { upper-case($a) }
return
       ex:apply($f2, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Inline function with annotation</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f2 := %ex:annoex function($a) { upper-case($a) }
return
       ex:apply($f2, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Inline function as parameter in function call</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

ex:apply(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Combine named function reference, dynamic calls and inline functions</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f1 := ex:apply#2
return
       $f1(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
</TestSet>