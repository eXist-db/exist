<?xml version="1.0" encoding="UTF-8"?>
<TestSet>
    <testName>xquery3 higher-order functions</testName>
    <description>
        <p>Higher-order functions in XQuery 3.0</p>
        <author>Wolfgang Meier</author>
    </description>
    <setup>
        <create-collection parent="/db" name="xq3-test"/>
        <store collection="/db/xq3-test" type="application/xquery" name="test1.xql"><![CDATA[
module namespace ex2="http://exist-db.org/xquery/ex2";

(: copied from the XQuery spec :)
declare function ex2:fold-left(
        $f as function(item()*, item()) as item()*, 
        $zero as item()*, 
        $seq as item()*) as item()* {
  if (fn:empty($seq)) then $zero
  else ex2:fold-left($f, $f($zero, $seq[1]), subsequence($seq, 2))
};
        ]]></store>
    </setup>
    <tearDown>
        <remove-collection collection="/db/xq3-test"/>
    </tearDown>
    <test output="text">
        <task>Named function reference</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Named function reference in "local" namespace</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := local:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text" id="nfrint1">
        <task>Named function reference on internal standard function</task>
        <code><![CDATA[xquery version "1.0";

let $f := sum#1
return
    $f((1, 2))]]>
        </code>
        <expected>3</expected>
    </test>
    <test output="text">
        <task>Backwards compatibility test 1</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := util:function(xs:QName("local:add"), 2)
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Backwards compatibility test 2</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := local:add#2
return
       util:call($f1, 20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Annotation support test</task>
        <code><![CDATA[xquery version "3.0";
declare namespace ex="http://exist-db.org/xquery/ex";

declare %ex:annotest function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Inline function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f2 := function($a) { upper-case($a) }
return
       ex:apply($f2, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Inline function with annotation</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f2 := %ex:annoex function($a) { upper-case($a) }
return
       ex:apply($f2, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Inline function as parameter in function call</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

ex:apply(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Combine named function reference, dynamic calls and inline functions</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f1 := ex:apply#2
return
       $f1(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Function sequence type: any function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func as function(*), $list) {
    for $item in $list return $func($item)
};

ex:apply(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Function sequence type: one parameter</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func as function(xs:string*) as xs:string*, $list) {
    for $item in $list return $func($item)
};

ex:apply(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Function sequence type: two parameters 1</task>
        <code><![CDATA[
(: copied from the XQuery spec :)
declare function local:fold-left(
        $f as function(item()*, item()) as item()*, 
        $zero as item()*, 
        $seq as item()*) as item()* {
  if (fn:empty($seq)) then $zero
  else local:fold-left($f, $f($zero, $seq[1]), subsequence($seq, 2))
};

local:fold-left(function($a, $b) { $a + $b }, 0, 1 to 5)
]]>
        </code>
        <expected>15</expected>
    </test>
    <test output="text">
        <task>Function sequence type: two parameters 2</task>
        <code><![CDATA[
declare function local:fold-left(
        $f as function(item()*, item()) as item()*, 
        $zero as item()*, 
        $seq as item()*) as item()* {
  if (fn:empty($seq)) then $zero
  else local:fold-left($f, $f($zero, $seq[1]), subsequence($seq, 2))
};

local:fold-left(function($a, $b) { $a * $b }, 1, (2,3,5,7))
]]>
        </code>
        <expected>210</expected>
    </test>
    <test output="text">
        <task>Function sequence type: two parameters 3</task>
        <code><![CDATA[declare function local:map($f, $seq) {
  if (fn:empty($seq))
  then ()
  else ($f($seq[1]), local:map($f, subsequence($seq, 2)))
};

local:map(function($a) { $a * $a }, 1 to 5)
]]>
        </code>
        <expected>1 4 9 16 25</expected>
    </test>
    <test output="text">
        <task>Function sequence type: parenthesized type</task>
        <code><![CDATA[
declare function local:test(
    $f as (function(item()*) as item()*)?) {
  "OK"
};

local:test(())
]]>
        </code>
        <expected>OK</expected>
    </test>
    <test output="text">
        <task>Calling function in imported module</task>
        <code><![CDATA[
import module namespace ex2="http://exist-db.org/xquery/ex2"
at "xmldb:exist:///db/xq3-test/test1.xql";

let $f1 := ex2:fold-left#3
return
    $f1(function($a, $b) { $a * $b }, 1, (2,3,5,7))
]]>
        </code>
        <expected>210</expected>
    </test>
    <test output="text" id="dynfcall1">
        <task>Dynamic function call syntax test 1</task>
        <code><![CDATA[xquery version "3.0";

declare function local:seq() {
    (1, 2, 3)
};

let $seq := local:seq#0
return
    $seq()[2]
]]></code>
        <expected>2</expected>
    </test>
    <test output="text" id="dynfcall2">
        <task>Dynamic function call syntax test 2</task>
        <code><![CDATA[xquery version "3.0";

declare function local:seq() {
    (1, 2, 3)
};

let $seq := local:seq#0
return
    $seq[1]()[3]
]]></code>
        <expected>3</expected>
    </test>
    <test output="text" id="dynfcall3">
        <task>Dynamic function call syntax test 3</task>
        <code><![CDATA[xquery version "3.0";

declare function local:seq() {
    (1, 2, 3)
};

let $seq := local:seq#0
return
    ($seq)()[1]
]]></code>
        <expected>1</expected>
    </test>
    <test output="text" id="dynfcall4">
        <task>Dynamic function call syntax test 4</task>
        <code><![CDATA[xquery version "3.0";

declare function local:seq() {
    (1, 2, 3)
};

let $seq := local:seq#0
return
    $seq()[. > 1]
]]></code>
        <expected>2 3</expected>
    </test>
    <test output="text" id="dynfcall5">
        <task>Dynamic function call syntax test 5</task>
        <code><![CDATA[xquery version "3.0";
(: Immediate function evaluation :)
(function($a) { "Hello " || $a })("you")
]]></code>
        <expected>Hello you</expected>
    </test>
    <test output="text" id="dynfcall6">
        <task>Dynamic function call syntax test 6</task>
        <code><![CDATA[xquery version "3.0";
declare function local:get-function() as function(xs:string) as xs:string {
	function($str as xs:string) { upper-case($str) }
};

local:get-function()("Hello")
]]></code>
        <expected>HELLO</expected>
    </test>
    <test output="text">
        <task>fn:function-lookup</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := function-lookup(xs:QName("ex:add"), 2)
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>fn:function-lookup on unknown function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

let $f1 := function-lookup(xs:QName("ex:add"), 2)
return
    if ($f1) then
       $f1(20, 50)
    else
        ()
]]>
        </code>
        <expected></expected>
    </test>
    <test output="text">
        <task>fn:function-lookup on function in imported module</task>
        <code><![CDATA[xquery version "3.0";
            
import module namespace ex2="http://exist-db.org/xquery/ex2"
at "xmldb:exist:///db/xq3-test/test1.xql";

let $f1 := function-lookup(xs:QName("ex2:fold-left"), 3)
return
    $f1(function($a, $b) { $a * $b }, 1, (2,3,5,7))
]]>
        </code>
        <expected>210</expected>
    </test>
    <test output="text">
        <task>fn:function-arity</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       function-arity($f1)
]]>
        </code>
        <expected>2</expected>
    </test>
    <test output="text">
        <task>fn:function-name</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       function-name($f1)
]]>
        </code>
        <expected>ex:add</expected>
    </test>
    <test output="text">
        <task>fn:function-name on anonymous function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

let $f1 := function($a, $b) {
    $a + $b
}
return
       function-name($f1)
]]>
        </code>
        <expected></expected>
    </test>
    <test output="text">
        <task>fn:map function (deprecated)</task>
        <code>fn:map(function($a) { $a * $a }, 1 to 5)</code>
        <expected>1 4 9 16 25</expected>
    </test>
    <test output="text">
        <task>fn:for-each function</task>
        <code>fn:for-each(1 to 5, function($a) { $a * $a })</code>
        <expected>1 4 9 16 25</expected>
    </test>
    <test output="text">
        <task>fn:for-each on strings</task>
        <code>fn:for-each(("john", "jane"), fn:string-to-codepoints#1)</code>
        <expected>106 111 104 110 106 97 110 101</expected>
    </test>
    <test output="text">
        <task>fn:for-each with cast</task>
        <code>fn:for-each(("23", "29"), xs:int#1)</code>
        <expected>23 29</expected>
    </test>
    <test output="text">
        <task>fn:filter function (wrong argument order: deprecated)</task>
        <code>fn:filter(function($a) {$a mod 2 = 0}, 1 to 10)</code>
        <expected>2 4 6 8 10</expected>
    </test>
    <test output="text">
        <task>fn:filter function (correct argument order)</task>
        <code>fn:filter(1 to 10, function($a) {$a mod 2 = 0})</code>
        <expected>2 4 6 8 10</expected>
    </test>
    <test output="text">
        <task>fn:fold-left function 1</task>
        <code> fn:fold-left(1 to 5, (), function($a, $b) {($b, $a)})</code>
        <expected>5 4 3 2 1</expected>
    </test>
    <test output="text">
        <task>fn:fold-left function 2</task>
        <code>fold-left((2,3,5,7), 1, function($a, $b) { $a * $b })</code>
        <expected>210</expected>
    </test>
    <test output="text">
        <task>fn:fold-left with partial application</task>
        <code>fn:fold-left(1 to 5, "", fn:concat(?, ".", ?))</code>
        <expected>.1.2.3.4.5</expected>
    </test>
    <test output="text">
        <task>fn:fold-right function 1</task>
        <code>fn:fold-right(1 to 5, 0, function($a, $b) { $a + $b })</code>
        <expected>15</expected>
    </test>
    <test output="text">
        <task>fn:fold-right function 2</task>
        <code>fn:fold-right(1 to 5, "", function($a, $b) { concat($a, ".", $b) })</code>
        <expected>1.2.3.4.5.</expected>
    </test>
    <test output="text">
        <task>fn:map-pairs function (deprecated)</task>
        <code>fn:map-pairs(function($a, $b){10*$a + $b}, 1 to 5, 1 to 5)</code>
        <expected>11 22 33 44 55</expected>
    </test>
    <test output="text">
        <task>fn:for-each-pair function</task>
        <code>fn:for-each-pair(1 to 5, 1 to 5, function($a, $b){10*$a + $b})</code>
        <expected>11 22 33 44 55</expected>
    </test>
    <test output="text">
        <task>fn:for-each-pair with strings</task>
        <code>fn:for-each-pair(("a", "b", "c"), ("x", "y", "z"), concat#2)</code>
        <expected>ax by cz</expected>
    </test>
    <!-- Partial function applications -->
    <test output="text" id="partial1">
        <task>Partial function with fn:for-each</task>
        <code><![CDATA[xquery version "3.0";
            
declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:multiply($base, $number) {
    $base * $number
};

(: Use function reference literal to find function at compile time :)
let $fMultiply := ex:multiply(10, ?)
return
    for-each(1 to 10, $fMultiply)]]></code>
        <expected>10 20 30 40 50 60 70 80 90 100</expected>
    </test>
    <test output="text" id="partial2">
        <task>Partial function with flwor</task>
        <code><![CDATA[xquery version "3.0";
            
declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:multiply($base, $number) {
    $base * $number
};

(: Use function reference literal to find function at compile time :)
let $fMultiply := ex:multiply(10, ?)
for $i in 1 to 10
return
    $fMultiply($i)]]></code>
        <expected>10 20 30 40 50 60 70 80 90 100</expected>
    </test>
    <test output="text" id="partial3">
    	<task>Partial function application on dynamic call using named function reference</task>
    	<code><![CDATA[xquery version "1.0";

declare function local:func($a, $b, $c) {
    $a + $b + $c
};

let $f := local:func#3
let $ff := $f(5, ?, ?)
return
    $ff(5, 3)]]></code>
    	<expected>13</expected>
    </test>
    <test output="text" id="partial4">
        <task>Partial function application on dynamic call with function parameter</task>
        <code><![CDATA[xquery version "3.0";

declare variable $a := function($x as item()*, $f as function(item()*) as
xs:boolean) as xs:boolean {
   $f($x)
};

let $list := (
   <test/>
)

let $f := $a(?, function($x){ true() })

return $f($list)]]></code>
        <expected>true</expected>
    </test>
    <test output="text" id="partiald1">
    	<task>Partial function application: dynamic call with partial application</task>
    	<code><![CDATA[xquery version "1.0";

declare function local:func($a, $b, $c) {
    $a + $b + $c
};

let $f := local:func(10, ?, ?)
let $ff := $f(5, ?)
return
    $ff(3)]]></code>
    	<expected>18</expected>
    </test>
    <test output="text" id="partiald2">
    	<task>Partial function application on inline function using map</task>
    	<code><![CDATA[xquery version "1.0";

let $f := function ($a, $b) { $a * $b }
let $ff := $f(5, ?)
return
    map($ff, (1, 2))]]></code>
    	<expected>5 10</expected>
    </test>
    <test output="text" id="internal1">
    	<task>Partial function application on internal function</task>
    	<code><![CDATA[xquery version "1.0";

let $f := string-join(?, ":")
return
    $f(("a", "b"))]]></code>
    	<expected>a:b</expected>
    </test>
    <test output="text" id="internal2">
    	<task>Partial function application on internal overloaded function</task>
    	<code><![CDATA[xquery version "1.0";

let $f := concat("Hello ", ?)
return
    map($f, ("world!", "Wolf!"))]]></code>
    	<expected>Hello world! Hello Wolf!</expected>
    </test>
    <!-- Closures -->
    <test output="xml">
        <task>Simple closure</task>
        <code><![CDATA[xquery version "3.0";

let $a := "Hello"
let $b := "Hello" || " world!"
let $f := function ($p) { <p>{$p}</p> }
return
$f($b)]]></code>
        <expected><p>Hello world!</p></expected>
    </test>
    <test output="xml">
        <task>Closure test: function passed to other function</task>
        <code><![CDATA[xquery version "3.0";

declare function local:test($f as function() as element()) {
    $f()
};

let $a := "Hello"
let $b := "Hello" || " world!"
let $f := function () { <p>{$b}</p> }
return
    local:test($f)]]></code>
        <expected><p>Hello world!</p></expected>
    </test>
    <test output="xml">
        <task>Closure test: inline function created in other function</task>
        <code><![CDATA[xquery version "3.0";

declare function local:test($f as function() as element()) {
    $f()
};

declare function local:create() {
    let $a := "Hello"
    let $b := "Hello" || " world!"
    return function () { <p>{ $b }</p> }
};

let $f := local:create()
return
    local:test($f)]]></code>
        <expected><p>Hello world!</p></expected>
    </test>
    <test output="xml">
        <task>Closure test: variable dependencies</task>
        <code><![CDATA[xquery version "3.0";

declare function local:test($f as function() as element()) {
    $f()
};

declare function local:create($a) {
    let $b := $a || " world!"
    return function () { <p>{$b}</p> }
};

let $f := local:create("Hello")
return
    local:test($f)]]></code>
        <expected><p>Hello world!</p></expected>
    </test>
    <test output="text">
        <task>Closure test: ensure variables are properly copied</task>
        <code><![CDATA[xquery version "3.0";

declare function local:create() {
    for $i in 1 to 10
    return
        function () { $i }
};

for $f in local:create()
return
    $f()]]></code>
        <expected>1 2 3 4 5 6 7 8 9 10</expected>
    </test>
</TestSet>
