<?xml version="1.0" encoding="UTF-8"?>
<TestSet>
    <testName>xquery3 higher-order functions</testName>
    <description>
        <p>Higher-order functions in XQuery 3.0</p>
        <author>Wolfgang Meier</author>
    </description>
    <setup>
        <create-collection parent="/db" name="xq3-test"/>
        <store collection="/db/xq3-test" type="application/xquery" name="test1.xql"><![CDATA[
module namespace ex2="http://exist-db.org/xquery/ex2";

(: copied from the XQuery spec :)
declare function ex2:fold-left(
        $f as function(item()*, item()) as item()*, 
        $zero as item()*, 
        $seq as item()*) as item()* {
  if (fn:empty($seq)) then $zero
  else ex2:fold-left($f, $f($zero, $seq[1]), subsequence($seq, 2))
};
        ]]></store>
    </setup>
    <tearDown>
        <remove-collection collection="/db/xq3-test"/>
    </tearDown>
    <test output="text">
        <task>Named function reference</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Named function reference in "local" namespace</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := local:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Backwards compatibility test 1</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := util:function(xs:QName("local:add"), 2)
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Backwards compatibility test 2</task>
        <code><![CDATA[xquery version "3.0";

declare function local:add($a, $b) {
    $a + $b
};

let $f1 := local:add#2
return
       util:call($f1, 20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Annotation support test</task>
        <code><![CDATA[xquery version "3.0";
declare namespace ex="http://exist-db.org/xquery/ex";

declare %ex:annotest function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>Inline function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f2 := function($a) { upper-case($a) }
return
       ex:apply($f2, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Inline function with annotation</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f2 := %ex:annoex function($a) { upper-case($a) }
return
       ex:apply($f2, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Inline function as parameter in function call</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

ex:apply(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Combine named function reference, dynamic calls and inline functions</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func, $list) {
    for $item in $list return $func($item)
};

let $f1 := ex:apply#2
return
       $f1(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Function sequence type: any function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func as function(*), $list) {
    for $item in $list return $func($item)
};

ex:apply(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Function sequence type: one parameter</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:apply($func as function(xs:string*) as xs:string*, $list) {
    for $item in $list return $func($item)
};

ex:apply(function($a) { upper-case($a) }, ("Hello", "world!"))
]]>
        </code>
        <expected>HELLO WORLD!</expected>
    </test>
    <test output="text">
        <task>Function sequence type: two parameters 1</task>
        <code><![CDATA[
(: copied from the XQuery spec :)
declare function local:fold-left(
        $f as function(item()*, item()) as item()*, 
        $zero as item()*, 
        $seq as item()*) as item()* {
  if (fn:empty($seq)) then $zero
  else local:fold-left($f, $f($zero, $seq[1]), subsequence($seq, 2))
};

local:fold-left(function($a, $b) { $a + $b }, 0, 1 to 5)
]]>
        </code>
        <expected>15</expected>
    </test>
    <test output="text">
        <task>Function sequence type: two parameters 2</task>
        <code><![CDATA[
declare function local:fold-left(
        $f as function(item()*, item()) as item()*, 
        $zero as item()*, 
        $seq as item()*) as item()* {
  if (fn:empty($seq)) then $zero
  else local:fold-left($f, $f($zero, $seq[1]), subsequence($seq, 2))
};

local:fold-left(function($a, $b) { $a * $b }, 1, (2,3,5,7))
]]>
        </code>
        <expected>210</expected>
    </test>
    <test output="text">
        <task>Function sequence type: two parameters 3</task>
        <code><![CDATA[declare function local:map($f, $seq) {
  if (fn:empty($seq))
  then ()
  else ($f($seq[1]), local:map($f, subsequence($seq, 2)))
};

local:map(function($a) { $a * $a }, 1 to 5)
]]>
        </code>
        <expected>1 4 9 16 25</expected>
    </test>
    <test output="text">
        <task>Calling function in imported module</task>
        <code><![CDATA[
import module namespace ex2="http://exist-db.org/xquery/ex2"
at "xmldb:exist:///db/xq3-test/test1.xql";

let $f1 := ex2:fold-left#3
return
    $f1(function($a, $b) { $a * $b }, 1, (2,3,5,7))
]]>
        </code>
        <expected>210</expected>
    </test>
    
    <test output="text">
        <task>fn:function-lookup</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := function-lookup(xs:QName("ex:add"), 2)
return
       $f1(20, 50)
]]>
        </code>
        <expected>70</expected>
    </test>
    <test output="text">
        <task>fn:function-lookup on unknown function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

let $f1 := function-lookup(xs:QName("ex:add"), 2)
return
    if ($f1) then
       $f1(20, 50)
    else
        ()
]]>
        </code>
        <expected></expected>
    </test>
    <test output="text">
        <task>fn:function-lookup on function in imported module</task>
        <code><![CDATA[xquery version "3.0";
            
import module namespace ex2="http://exist-db.org/xquery/ex2"
at "xmldb:exist:///db/xq3-test/test1.xql";

let $f1 := function-lookup(xs:QName("ex2:fold-left"), 3)
return
    $f1(function($a, $b) { $a * $b }, 1, (2,3,5,7))
]]>
        </code>
        <expected>210</expected>
    </test>
    <test output="text">
        <task>fn:function-arity</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       function-arity($f1)
]]>
        </code>
        <expected>2</expected>
    </test>
    <test output="text">
        <task>fn:function-name</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:add($a, $b) {
    $a + $b
};

let $f1 := ex:add#2
return
       function-name($f1)
]]>
        </code>
        <expected>ex:add</expected>
    </test>
    <test output="text">
        <task>fn:function-name on anonymous function</task>
        <code><![CDATA[xquery version "3.0";

declare namespace ex="http://exist-db.org/xquery/ex";

let $f1 := function($a, $b) {
    $a + $b
}
return
       function-name($f1)
]]>
        </code>
        <expected></expected>
    </test>
    <test output="text">
        <task>fn:map function</task>
        <code>fn:map(function($a) { $a * $a }, 1 to 5)</code>
        <expected>1 4 9 16 25</expected>
    </test>
    <test output="text">
        <task>fn:filter function</task>
        <code>fn:filter(function($a) {$a mod 2 = 0}, 1 to 10)</code>
        <expected>2 4 6 8 10</expected>
    </test>
    <test output="text">
        <task>fn:fold-left function 1</task>
        <code> fn:fold-left(function($a, $b) {($b, $a)}, (), 1 to 5)</code>
        <expected>5 4 3 2 1</expected>
    </test>
    <test output="text">
        <task>fn:fold-left function 2</task>
        <code>fold-left(function($a, $b) { $a * $b }, 1, (2,3,5,7))</code>
        <expected>210</expected>
    </test>
    <test output="text">
        <task>fn:fold-right function 1</task>
        <code>fn:fold-right(function($a, $b) { $a + $b }, 0, 1 to 5)</code>
        <expected>15</expected>
    </test>
    <test output="text">
        <task>fn:fold-right function 2</task>
        <code>fn:fold-right(function($a, $b) { concat($a, ".", $b) }, "", 1 to 5)</code>
        <expected>1.2.3.4.5.</expected>
    </test>
    <test output="text">
        <task>fn:map-pairs function</task>
        <code>fn:map-pairs(function($a, $b){10*$a + $b}, 1 to 5, 1 to 5)</code>
        <expected>11 22 33 44 55</expected>
    </test>
    <test output="text">
        <task>Partial function with fn:map</task>
        <code><![CDATA[xquery version "3.0";
            
declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:multiply($base, $number) {
    $base * $number
};

(: Use function reference literal to find function at compile time :)
let $fMultiply := ex:multiply(10, ?)
return
    map($fMultiply, 1 to 10)]]></code>
        <expected>10 20 30 40 50 60 70 80 90 100</expected>
    </test>
    <test output="text">
        <task>Partial function with flwor</task>
        <code><![CDATA[xquery version "3.0";
            
declare namespace ex="http://exist-db.org/xquery/ex";

declare function ex:multiply($base, $number) {
    $base * $number
};

(: Use function reference literal to find function at compile time :)
let $fMultiply := ex:multiply(10, ?)
for $i in 1 to 10
return
    $fMultiply($i)]]></code>
        <expected>10 20 30 40 50 60 70 80 90 100</expected>
    </test>
</TestSet>