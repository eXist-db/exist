<?xml version="1.0" encoding="UTF-8"?>
<TestSet>
    <testName>Following and preceding axis tests</testName>
    <description>
        <p>Test the following and preceding XPath axes</p>
        <author>Wolfgang Meier</author>
    </description>
    <setup>
        <create-collection parent="/db" name="axes-test"/>
        <store collection="/db/axes-test" name="axes1.xml">
            <test>
                <line>
                    <word>XPath</word>
                    <word>developers</word>
                    <word>enjoy</word>
                </line>
                <line>
                    <word>working</word>
                    <word>with</word>
                </line>
                <line>
                    <word>the</word>
                    <word>following</word>
                    <word>axis</word>
                </line>
            </test>
        </store>
        <store collection="/db/axes-test" name="axes2.xml">
            <test>
                <a>
                    <b>
                        <c>C1</c>
                    </b>
                    <c>C2</c>
                    <e>E1</e>
                    <d>
                        <e>
                            <c>C3</c>
                        </e>
                    </d>
                    <c>C4</c>
                </a>
            </test>
        </store>
        <store collection="/db/axes-test" name="axes3.xml">
            <test>
                <c>C5</c>
                <c>C6</c>
            </test>
        </store>
        <store collection="/db/axes-test" name="axes4.xml"><![CDATA[
            <?foo dummmy-processing-instruction?>
            <!-- Comment -->
            <test>
                <a>A1</a>
            </test>
        ]]></store>
    </setup>
	<variable name="input1">
		<test>
			<line>
				<word>XPath</word>
				<word>developers</word>
				<word>enjoy</word>
			</line>
			<line>
				<word>working</word>
				<word>with</word>
			</line>
			<line>
				<word>the</word>
				<word>following</word>
				<word>axis</word>
			</line>
		</test>
	</variable>
    <variable name="input2">
        <test>
            <a>
                <b>B1</b>
            </a>
            <b>B2</b>
        </test>
    </variable>
    <tearDown>
        <!--remove-collection collection="/db/axes-test"/-->
    </tearDown>
	<!-- Following axis tests -->
    <test output="text">
        <task>Simple following axis test</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::word</code>
        <expected>with the following axis</expected>
    </test>
    <test output="text">
        <task>Empty following axis</task>
        <code>count(doc("/db/axes-test/axes1.xml")//line/word[. = 'axis']/following::word)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Following axis test: element()</task>
        <code>count(doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::element())</code>
        <expected>5</expected>
    </test>
    <test output="text">
        <task>Following axis test: text()</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::text()</code>
        <expected>with the following axis</expected>
    </test>
    <test output="text">
        <task>Following axis test: node()</task>
        <code>count(doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::node())</code>
        <expected>9</expected>
    </test>
    <test output="text">
        <task>Nested following axis test 1</task>
        <code>doc("/db/axes-test/axes2.xml")//e/following::c/text()</code>
        <expected>C3 C4</expected>
    </test>
    <test output="text">
        <task>Nested following axis test 2</task>
        <code>count(doc("/db/axes-test/axes2.xml")//a/following::c)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Nested following axis test 3</task>
        <code>count(doc("/db/axes-test/axes2.xml")//c[. = 'C1']/following::*)</code>
        <expected>6</expected>
    </test>
    <test output="text">
        <task>Nested following axis test 4</task>
        <code>count(doc("/db/axes-test/axes2.xml")//a/following::*)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Following axis predicate test</task>
        <code>doc("/db/axes-test/axes2.xml")//e[following::e]</code>
        <expected>E1</expected>
    </test>
    <test output="text">
        <task>Following axis predicate test</task>
        <code>doc("/db/axes-test/axes2.xml")//c[following::c]</code>
        <expected>C1 C2 C3</expected>
    </test>
    <test output="text">
        <task>Following axis predicate test</task>
        <code>doc("/db/axes-test/axes2.xml")//c[following::c = 'C2']</code>
        <expected>C1</expected>
    </test>
    <test output="text">
        <task>Following axis predicate test 2</task>
        <code>doc("/db/axes-test/axes2.xml")//c[following::* = 'C2']</code>
        <expected>C1</expected>
    </test>
    <test output="text">
        <task>Following axis with positional predicate test</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::word[2]</code>
        <expected>the</expected>
    </test>
    <test output="text">
        <task>Following axis with positional predicate test 2</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::word[2]/text()</code>
        <expected>the</expected>
    </test>
    <test output="text">
        <task>Following axis with positional predicate test 3</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::word[last()]</code>
        <expected>axis</expected>
    </test>
    <test output="text">
        <task>Following axis with positional predicate test 4</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::word[position() = 2]</code>
        <expected>the</expected>
    </test>

	<!-- Following axis tests on in-memory fragment -->
    <test output="text">
        <task>Simple following axis test on in-memory doc</task>
        <code>$input1//line/word[. = 'working']/following::word</code>
        <expected>with the following axis</expected>
    </test>
    <test output="text">
        <task>Empty following axis (in-memory)</task>
        <code>count(doc("/db/axes-test/axes1.xml")//line/word[. = 'axis']/following::word)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Following axis test: element()</task>
        <code>count($input1//line/word[. = 'working']/following::element())</code>
        <expected>5</expected>
    </test>
    <test output="text">
        <task>Simple following axis test on in-memory doc2</task>
        <code>for $i in (1 to 5) return $input1//line/word[. = 'working']/following::word[$i]</code>
        <expected>with the following axis</expected>
    </test>
    <test output="text">
        <task>Simple following axis test on in-memory doc2</task>
        <code>$input2//a/following::*</code>
        <expected>B2</expected>
    </test>
    <test output="text">
        <task>Simple following axis test on in-memory doc2</task>
        <code>$input2//b/following::*</code>
        <expected>B2</expected>
    </test>
    <test output="text">
        <task>Simple following axis test on in-memory doc2</task>
        <code>$input2//b/following::b</code>
        <expected>B2</expected>
    </test>
    <test output="xml">
        <task>Simple following axis test on in-memory doc2</task>
        <code>$input2//b/following::node()</code>
        <expected><b>B2</b>B2</expected>
    </test>
    
    <test output="text">
        <task>Simple preceding axis test</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'with']/preceding::word</code>
        <expected>XPath developers enjoy working</expected>
    </test>
    <test output="text">
        <task>Simple preceding axis test 2</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'the']/preceding::word</code>
        <expected>XPath developers enjoy working with</expected>
    </test>
    <test output="text">
        <task>Empty preceding axis</task>
        <code>count(doc("/db/axes-test/axes1.xml")//line/word[. = 'XPath']/preceding::word)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Preceding axis test: element()</task>
        <code>count(doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/preceding::element())</code>
        <expected>4</expected>
    </test>
    <test output="text">
        <task>Preceding axis test: text()</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'with']/preceding::text()</code>
        <expected>XPath developers enjoy working</expected>
    </test>
    <test output="text">
        <task>Preceding axis test: node()</task>
        <code>count(doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following::node())</code>
        <expected>9</expected>
    </test>
    <test output="text">
        <task>Nested preceding axis test 1</task>
        <code>doc("/db/axes-test/axes2.xml")//e/preceding::c/text()</code>
        <expected>C1 C2</expected>
    </test>
    <test output="text">
        <task>Nested preceding axis test 2</task>
        <code>count(doc("/db/axes-test/axes2.xml")//b/preceding::c)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Nested preceding axis test 3</task>
        <code>count(doc("/db/axes-test/axes2.xml")//c[. = 'C1']/preceding::*)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Nested preceding axis test 4</task>
        <code>count(doc("/db/axes-test/axes2.xml")//c[. = 'C2']/preceding::*)</code>
        <expected>2</expected>
    </test>
    <test output="text">
        <task>Nested preceding axis test 5</task>
        <code>count(doc("/db/axes-test/axes2.xml")//b/preceding::*)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Preceding axis predicate test</task>
        <code>doc("/db/axes-test/axes2.xml")//e[preceding::e]//text()</code>
        <expected>C3</expected>
    </test>
    <test output="text">
        <task>Preceding axis predicate test</task>
        <code>doc("/db/axes-test/axes2.xml")//c[preceding::c]</code>
        <expected>C2 C3 C4</expected>
    </test>
    <test output="text">
        <task>Preceding axis predicate test 2</task>
        <code>doc("/db/axes-test/axes2.xml")//c[preceding::* = 'C3']</code>
        <expected>C4</expected>
    </test>
    <test output="text">
        <task>Preceding axis with positional predicate test</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/preceding::word[2]</code>
        <expected>developers</expected>
    </test>
    <test output="text">
        <task>Preceding axis with positional predicate test 2</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/preceding::word[2]/text()</code>
        <expected>developers</expected>
    </test>
    <test output="text">
        <task>Preceding axis with positional predicate test 3</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/preceding::word[last()]</code>
        <expected>XPath</expected>
    </test>
    <test output="text">
        <task>Preceding axis with positional predicate test 4</task>
        <code>doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/preceding::word[position() = 2]</code>
        <expected>developers</expected>
    </test>
    <test output="text">
        <task>FLWOR with at and positional predicate</task>
        <code>
            let $word := doc("/db/axes-test/axes1.xml")//line/word[. = 'working']
            for $i at $p in (1 to 3) 
            return
                $word/preceding::word[$p]
        </code>
        <expected>enjoy developers XPath</expected>
    </test>
    
    <!-- Preceding axis tests on in-memory fragment -->
    <test output="text">
        <task>Simple preceding axis test on in-memory doc</task>
        <code>$input1//line/word[. = 'working']/preceding::word</code>
        <expected>XPath developers enjoy</expected>
    </test>
    <test output="text">
        <task>Empty preceding axis (in-memory)</task>
        <code>count($input1//line/word[. = 'XPath']/preceding::word)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Preceding axis test: element()</task>
        <code>count($input1//line/word[. = 'working']/preceding::element())</code>
        <expected>4</expected>
    </test>
    <test output="text">
        <task>Simple preceding axis test on in-memory doc 1</task>
        <code>for $i in (1 to 5) return $input1//line/word[. = 'working']/preceding::word[$i]</code>
        <expected>enjoy developers XPath</expected>
    </test>
    <test output="xml">
        <task>Simple preceding axis test on in-memory doc 2</task>
        <code>$input2//b/preceding::*</code>
        <expected>
            <a>
                <b>B1</b>
            </a>
            <b>B1</b>
        </expected>
    </test>
    <test output="text">
        <task>Simple preceding axis test on in-memory doc 3</task>
        <code>count($input2/a/b/preceding::*)</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Simple following axis test on in-memory doc 4</task>
        <code>$input2//b/preceding::b</code>
        <expected>B1</expected>
    </test>
    
    <!-- Following sibling axis tests -->
	<test output="text">
        <task>Following sibling axis 1</task>
        <code>
			doc("/db/axes-test/axes1.xml")//line/word[. = 'working']/following-sibling::word
		</code>
        <expected>with</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 2</task>
        <code>
			doc("/db/axes-test/axes1.xml")//line[3]/word[1]/following-sibling::word
		</code>
        <expected>following axis</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 3</task>
        <code>
			count(doc("/db/axes-test/axes1.xml")//line[1]/following-sibling::word)
		</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 4</task>
        <code>
			count(doc("/db/axes-test/axes1.xml")//line[1]/word[3]/following-sibling::word)
		</code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 5</task>
        <code>
			count(doc("/db/axes-test/axes1.xml")//line[1]/following-sibling::line)
		</code>
        <expected>2</expected>
    </test>
    <test output="xml">
        <task>Following sibling axis 6</task>
        <code>
			doc("/db/axes-test/axes1.xml")//line[2]/following-sibling::line
		</code>
        <expected>
			<line>
				<word>the</word>
				<word>following</word>
				<word>axis</word>
			</line>
		</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 7</task>
        <code>
			doc("/db/axes-test/axes2.xml")//b/following-sibling::c
		</code>
        <expected>C2 C4</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 8</task>
        <code>
			doc("/db/axes-test/axes2.xml")//b/following-sibling::c
		</code>
        <expected>C2 C4</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 9</task>
        <code>
			doc("/db/axes-test/axes2.xml")//c[following-sibling::c]
		</code>
        <expected>C2</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 10</task>
        <code>
			doc("/db/axes-test/axes2.xml")//c[following-sibling::c]
		</code>
        <expected>C2</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 11</task>
        <code>
            doc("/db/axes-test/axes2.xml")//e[following-sibling::c]
        </code>
        <expected>E1</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 12</task>
        <code>
            doc("/db/axes-test/axes2.xml")//b/following-sibling::c[2]
        </code>
        <expected>C4</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 12a</task>
        <code>
            doc("/db/axes-test/axes2.xml")//b/following-sibling::c[last()]
        </code>
        <expected>C4</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 13</task>
        <code>
            doc("/db/axes-test/axes2.xml")//b/following-sibling::c[1]
        </code>
        <expected>C2</expected>
    </test>
    <test output="text">
        <task>Following sibling axis 14</task>
        <code>
            (doc("/db/axes-test/axes2.xml"), doc("/db/axes-test/axes3.xml"))//b/following-sibling::c[1]
        </code>
        <expected>C2</expected>
    </test>
    <test output="xml" ignore="yes"><!-- this fails on TC only -->
        <task>Following sibling axis 15</task>
        <code>
            (doc("/db/axes-test/axes2.xml"), doc("/db/axes-test/axes3.xml"))//c[following-sibling::c]
        </code>
        <expected><c>C2</c><c>C5</c></expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 1</task>
        <code>
            doc("/db/axes-test/axes1.xml")//line/word[. = 'following']/preceding-sibling::word
        </code>
        <expected>the</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 2</task>
        <code>
            doc("/db/axes-test/axes1.xml")//line[3]/word[3]/preceding-sibling::word
        </code>
        <expected>the following</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 3</task>
        <code>
            count(doc("/db/axes-test/axes1.xml")//line[3]/preceding-sibling::word)
        </code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 4</task>
        <code>
            count(doc("/db/axes-test/axes1.xml")//line[1]/word[1]/preceding-sibling::word)
        </code>
        <expected>0</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 5</task>
        <code>
            count(doc("/db/axes-test/axes1.xml")//line[3]/preceding-sibling::line)
        </code>
        <expected>2</expected>
    </test>
    <test output="xml">
        <task>Preceding sibling axis 6</task>
        <code>
            doc("/db/axes-test/axes1.xml")//line[2]/preceding-sibling::line
        </code>
        <expected>
            <line>
                <word>XPath</word>
                <word>developers</word>
                <word>enjoy</word>
            </line>
        </expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 7</task>
        <code>
            doc("/db/axes-test/axes2.xml")//d/preceding-sibling::c
        </code>
        <expected>C2</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 8</task>
        <code>
            doc("/db/axes-test/axes2.xml")//c/preceding-sibling::c
        </code>
        <expected>C2</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 9</task>
        <code>
            doc("/db/axes-test/axes2.xml")//c[preceding-sibling::c]
        </code>
        <expected>C4</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 11</task>
        <code>
            doc("/db/axes-test/axes2.xml")//e[preceding-sibling::c]
        </code>
        <expected>E1</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 12</task>
        <code>
            doc("/db/axes-test/axes2.xml")//c/preceding-sibling::c[1]
        </code>
        <expected>C2</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 13</task>
        <code>
            doc("/db/axes-test/axes2.xml")//c/preceding-sibling::c[last()]
        </code>
        <expected>C2</expected>
    </test>
    <test output="text">
        <task>Preceding sibling axis 14</task>
        <code>
            (doc("/db/axes-test/axes2.xml"), doc("/db/axes-test/axes3.xml"))//d/preceding-sibling::c[1]
        </code>
        <expected>C2</expected>
    </test>
    <test output="xml" ignore="yes"><!-- this fails on TC only -->
        <task>Preceding sibling axis 15</task>
        <code>
            (doc("/db/axes-test/axes2.xml"), doc("/db/axes-test/axes3.xml"))//c[preceding-sibling::c]
        </code>
        <expected><c>C4</c><c>C6</c></expected><!-- is the elements order correct? -->
        <!-- The order is correct: C4 from axes2.xml & C6 from axes3.xml (shabanovd) -->
    </test>
    <test output="text">
        <task>Sibling axis comments and pis 1</task>
        <code>
            count(doc("/db/axes-test/axes4.xml")/*/preceding::node())
        </code>
        <expected>2</expected>
    </test>
    <test output="text">
        <task>Sibling axis comments and pis 2</task>
        <code>
            doc("/db/axes-test/axes4.xml")/node()[1]/following::text()
        </code>
        <expected>A1</expected>
    </test>
    <test output="text">
        <task>Ancestor axis on attributes and text</task>
        <code><![CDATA[let $doc :=
<doc xml:id="x">
    <a>
        <b x="1">text<e>text</e>text</b>
    </a>
</doc>

return 
    let $paths :=
        for $node in ($doc//attribute(), $doc//text())
        (:I would have thought that $doc//node() would do the job …:)
        let $path := 
            if ($node instance of attribute())
            then concat($node/string-join(ancestor-or-self::*/name(.), '/'), '/@', local-name($node))
            else
                if ($node instance of text())
                then concat($node/string-join(ancestor-or-self::*/name(.), '/'), '/text()')
                else $node/string-join(ancestor-or-self::*/name(.), '/')
        order by $path ascending
        return $path
    return distinct-values($paths)]]></code>
        <expected>doc/@id doc/a/b/@x doc/a/b/e/text() doc/a/b/text()</expected>
    </test>
</TestSet>
