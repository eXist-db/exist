/*
 * CheckerGUI.java
 *
 * Created on April 6, 2008, 7:00 PM
 */
package org.exist.storage.repair;

import org.exist.EXistException;
import org.exist.security.SecurityManager;
import org.exist.storage.BrokerPool;
import org.exist.storage.DBBroker;
import org.exist.util.Configuration;
import org.exist.util.DatabaseConfigurationException;

import java.util.List;

/**
 *
 * @author  wolf
 */
public class CheckerGUI extends javax.swing.JFrame {

    private BrokerPool pool = null;

    /** Creates new form CheckerGUI */
    public CheckerGUI() {
        super("Consistency Check and Repair");
        initComponents();
        pool = startDB();
    }

    protected BrokerPool startDB() {
        try {
            Configuration config = new Configuration();
            BrokerPool.configure(1, 5, config);
            return BrokerPool.getInstance();
        } catch (DatabaseConfigurationException e) {
            System.err.println("ERROR: Failed to open database: " + e.getMessage());
        } catch (EXistException e) {
            System.err.println("ERROR: Failed to open database: " + e.getMessage());
        }
        return null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progress = new javax.swing.JProgressBar();
        currentDoc = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messages = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        currentDoc.setText("Processing");

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check(evt);
            }
        });

        messages.setColumns(20);
        messages.setRows(5);
        messages.setBorder(javax.swing.BorderFactory.createTitledBorder("Messages"));
        jScrollPane1.setViewportView(messages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(currentDoc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(progress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void check(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check
        Runnable checkRun = new Runnable() {

            public void run() {
                DBBroker broker = null;
                try {
                    broker = pool.get(SecurityManager.SYSTEM_USER);
                    ConsistencyCheck checker = new ConsistencyCheck(broker);
                    ConsistencyCheck.ProgressCallback cb = new ConsistencyCheck.ProgressCallback() {

                        public void startDocument(String path) {
                            currentDoc.setText(path);
                            progress.setValue(progress.getValue() + 1);
                        }

                        public void error(ErrorReport error) {
                            displayMessage(error.toString());
                        }
                    };
                    currentDoc.setText("Counting documents ...");
                    progress.setIndeterminate(true);
                    int count = checker.getDocumentCount();
                    progress.setIndeterminate(false);
                    progress.setMinimum(0);
                    progress.setMaximum(count);
                    
                    displayMessage("Start scanning documents ...");
                    List errors = checker.checkDocuments(cb);
                    if (errors.size() == 0)
                        displayMessage("No errors found.");
                    else
                        displayMessage("Errors found.");
                } catch (EXistException e) {
                    System.err.println("ERROR: Failed to retrieve database broker: " + e.getMessage());
                } finally {
                    pool.release(broker);
                    currentDoc.setText("");
                }
            }
        };
        new Thread(checkRun).start();
    }//GEN-LAST:event_check

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        BrokerPool.stopAll(false);
    }//GEN-LAST:event_formWindowClosed

    public void displayMessage(String message) {
        messages.append(message + '\n');
        messages.setCaretPosition(messages.getDocument().getLength());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CheckerGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentDoc;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea messages;
    private javax.swing.JProgressBar progress;
    // End of variables declaration//GEN-END:variables
}
