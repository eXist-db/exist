// $ANTLR 2.7.4: XQueryTree.g -> XQueryTreeParserTokenTypes.txt$
XQueryTreeParser    // output token vocab name
QNAME=4
PREDICATE=5
FLWOR=6
PARENTHESIZED=7
ABSOLUTE_SLASH=8
ABSOLUTE_DSLASH=9
WILDCARD=10
PREFIX_WILDCARD=11
FUNCTION=12
UNARY_MINUS=13
UNARY_PLUS=14
XPOINTER=15
XPOINTER_ID=16
VARIABLE_REF=17
VARIABLE_BINDING=18
ELEMENT=19
ATTRIBUTE=20
ATTRIBUTE_CONTENT=21
TEXT=22
VERSION_DECL=23
NAMESPACE_DECL=24
DEF_NAMESPACE_DECL=25
DEF_COLLATION_DECL=26
DEF_FUNCTION_NS_DECL=27
GLOBAL_VAR=28
FUNCTION_DECL=29
PROLOG=30
OPTION=31
ATOMIC_TYPE=32
MODULE=33
ORDER_BY=34
GROUP_BY=35
POSITIONAL_VAR=36
BEFORE=37
AFTER=38
MODULE_DECL=39
MODULE_IMPORT=40
SCHEMA_IMPORT=41
ATTRIBUTE_TEST=42
COMP_ELEM_CONSTRUCTOR=43
COMP_ATTR_CONSTRUCTOR=44
COMP_TEXT_CONSTRUCTOR=45
COMP_COMMENT_CONSTRUCTOR=46
COMP_PI_CONSTRUCTOR=47
COMP_NS_CONSTRUCTOR=48
COMP_DOC_CONSTRUCTOR=49
PRAGMA=50
LITERAL_xpointer="xpointer"=51
LPAREN("opening parenthesis '('")=52
RPAREN("closing parenthesis ')'")=53
NCNAME("name")=54
LITERAL_xquery="xquery"=55
LITERAL_version="version"=56
SEMICOLON("semicolon ';'")=57
LITERAL_module="module"=58
LITERAL_namespace="namespace"=59
EQ("=")=60
STRING_LITERAL("string literal")=61
LITERAL_declare="declare"=62
LITERAL_default="default"=63
"boundary-space"=64
LITERAL_ordering="ordering"=65
LITERAL_construction="construction"=66
"base-uri"=67
"copy-namespaces"=68
LITERAL_option="option"=69
LITERAL_function="function"=70
LITERAL_variable="variable"=71
LITERAL_import="import"=72
LITERAL_encoding="encoding"=73
LITERAL_collation="collation"=74
LITERAL_element="element"=75
LITERAL_order="order"=76
LITERAL_empty="empty"=77
LITERAL_greatest="greatest"=78
LITERAL_least="least"=79
LITERAL_preserve="preserve"=80
LITERAL_strip="strip"=81
LITERAL_ordered="ordered"=82
LITERAL_unordered="unordered"=83
COMMA=84
"no-preserve"=85
LITERAL_inherit="inherit"=86
"no-inherit"=87
DOLLAR("dollar sign '$'")=88
LCURLY("opening curly brace '{'")=89
RCURLY("closing curly brace '{'")=90
COLON=91
LITERAL_external="external"=92
LITERAL_schema="schema"=93
LITERAL_as="as"=94
LITERAL_at="at"=95
"empty-sequence"=96
QUESTION("question mark '?'")=97
STAR("wildcard '*'")=98
PLUS("+")=99
LITERAL_item="item"=100
LITERAL_for="for"=101
LITERAL_let="let"=102
LITERAL_some="some"=103
LITERAL_every="every"=104
LITERAL_if="if"=105
LITERAL_typeswitch="typeswitch"=106
LITERAL_update="update"=107
LITERAL_replace="replace"=108
LITERAL_value="value"=109
LITERAL_insert="insert"=110
LITERAL_delete="delete"=111
LITERAL_rename="rename"=112
LITERAL_with="with"=113
LITERAL_into="into"=114
LITERAL_preceding="preceding"=115
LITERAL_following="following"=116
LITERAL_where="where"=117
LITERAL_return="return"=118
LITERAL_in="in"=119
LITERAL_by="by"=120
LITERAL_stable="stable"=121
LITERAL_ascending="ascending"=122
LITERAL_descending="descending"=123
LITERAL_group="group"=124
LITERAL_satisfies="satisfies"=125
LITERAL_case="case"=126
LITERAL_then="then"=127
LITERAL_else="else"=128
LITERAL_or="or"=129
LITERAL_and="and"=130
LITERAL_instance="instance"=131
LITERAL_of="of"=132
LITERAL_treat="treat"=133
LITERAL_castable="castable"=134
LITERAL_cast="cast"=135
LT("<")=136
GT(">")=137
LITERAL_eq="eq"=138
LITERAL_ne="ne"=139
LITERAL_lt="lt"=140
LITERAL_le="le"=141
LITERAL_gt="gt"=142
LITERAL_ge="ge"=143
NEQ("!=")=144
GTEQ(">=")=145
LTEQ("<=")=146
LITERAL_is="is"=147
LITERAL_isnot="isnot"=148
ANDEQ("fulltext operator '&='")=149
OREQ("fulltext operator '|='")=150
LITERAL_to="to"=151
MINUS("-")=152
LITERAL_div="div"=153
LITERAL_idiv="idiv"=154
LITERAL_mod="mod"=155
PRAGMA_START=156
PRAGMA_END("pragma expression")=157
LITERAL_union="union"=158
UNION("union")=159
LITERAL_intersect="intersect"=160
LITERAL_except="except"=161
SLASH("single slash '/'")=162
DSLASH("double slash '//'")=163
LITERAL_text="text"=164
LITERAL_node="node"=165
LITERAL_attribute="attribute"=166
LITERAL_comment="comment"=167
"processing-instruction"=168
"document-node"=169
LITERAL_document="document"=170
SELF(".")=171
XML_COMMENT("XML comment")=172
XML_PI("processing instruction")=173
LPPAREN("opening brace '['")=174
RPPAREN("closing brace ']'")=175
AT("@ char")=176
PARENT("..")=177
LITERAL_child="child"=178
LITERAL_self="self"=179
LITERAL_descendant="descendant"=180
"descendant-or-self"=181
"following-sibling"=182
LITERAL_parent="parent"=183
LITERAL_ancestor="ancestor"=184
"ancestor-or-self"=185
"preceding-sibling"=186
DOUBLE_LITERAL=187
DECIMAL_LITERAL=188
INTEGER_LITERAL=189
"schema-element"=190
END_TAG_START("XML end tag")=191
QUOT("double quote '\"'")=192
APOS("single quote '")=193
QUOT_ATTRIBUTE_CONTENT=194
ESCAPE_QUOT=195
APOS_ATTRIBUTE_CONTENT=196
ESCAPE_APOS=197
ELEMENT_CONTENT=198
XML_COMMENT_END("end of XML comment")=199
XML_PI_END("end of processing instruction")=200
XML_CDATA("CDATA section")=201
LITERAL_collection="collection"=202
LITERAL_validate="validate"=203
XML_PI_START("start of processing instruction")=204
XML_CDATA_START("CDATA section start")=205
XML_CDATA_END("end of CDATA section")=206
LETTER=207
DIGITS=208
HEX_DIGITS=209
NMSTART=210
NMCHAR=211
WS=212
EXPR_COMMENT("XQuery comment")=213
PREDEFINED_ENTITY_REF=214
CHAR_REF=215
S=216
NEXT_TOKEN=217
CHAR=218
BASECHAR=219
IDEOGRAPHIC=220
COMBINING_CHAR=221
DIGIT=222
EXTENDER=223
