// $ANTLR 2.7.7 (2006-11-01): XQueryTree.g -> XQueryTreeParserTokenTypes.txt$
XQueryTreeParser    // output token vocab name
QNAME=4
PREDICATE=5
FLWOR=6
PARENTHESIZED=7
ABSOLUTE_SLASH=8
ABSOLUTE_DSLASH=9
WILDCARD=10
PREFIX_WILDCARD=11
FUNCTION=12
DYNAMIC_FCALL=13
UNARY_MINUS=14
UNARY_PLUS=15
XPOINTER=16
XPOINTER_ID=17
VARIABLE_REF=18
VARIABLE_BINDING=19
ELEMENT=20
ATTRIBUTE=21
ATTRIBUTE_CONTENT=22
TEXT=23
VERSION_DECL=24
NAMESPACE_DECL=25
DEF_NAMESPACE_DECL=26
DEF_COLLATION_DECL=27
DEF_FUNCTION_NS_DECL=28
ANNOT_DECL=29
GLOBAL_VAR=30
FUNCTION_DECL=31
FUNCTION_INLINE=32
FUNCTION_TEST=33
MAP_TEST=34
MAP_LOOKUP=35
ARRAY=36
PROLOG=37
OPTION=38
ATOMIC_TYPE=39
MODULE=40
ORDER_BY=41
GROUP_BY=42
POSITIONAL_VAR=43
CATCH_ERROR_CODE=44
CATCH_ERROR_DESC=45
CATCH_ERROR_VAL=46
MODULE_DECL=47
MODULE_IMPORT=48
SCHEMA_IMPORT=49
ATTRIBUTE_TEST=50
COMP_ELEM_CONSTRUCTOR=51
COMP_ATTR_CONSTRUCTOR=52
COMP_TEXT_CONSTRUCTOR=53
COMP_COMMENT_CONSTRUCTOR=54
COMP_PI_CONSTRUCTOR=55
COMP_NS_CONSTRUCTOR=56
COMP_DOC_CONSTRUCTOR=57
PRAGMA=58
GTEQ=59
SEQUENCE=60
LITERAL_xpointer="xpointer"=61
LPAREN("opening parenthesis '('")=62
RPAREN("closing parenthesis ')'")=63
NCNAME("name")=64
LITERAL_xquery="xquery"=65
LITERAL_version="version"=66
SEMICOLON("semicolon ';'")=67
LITERAL_module="module"=68
LITERAL_namespace="namespace"=69
EQ("=")=70
STRING_LITERAL("string literal")=71
LITERAL_declare="declare"=72
LITERAL_default="default"=73
"boundary-space"=74
LITERAL_ordering="ordering"=75
LITERAL_construction="construction"=76
"base-uri"=77
"copy-namespaces"=78
LITERAL_option="option"=79
LITERAL_function="function"=80
LITERAL_variable="variable"=81
MOD=82
LITERAL_import="import"=83
LITERAL_encoding="encoding"=84
LITERAL_collation="collation"=85
LITERAL_element="element"=86
LITERAL_order="order"=87
LITERAL_empty="empty"=88
LITERAL_greatest="greatest"=89
LITERAL_least="least"=90
LITERAL_preserve="preserve"=91
LITERAL_strip="strip"=92
LITERAL_ordered="ordered"=93
LITERAL_unordered="unordered"=94
COMMA=95
"no-preserve"=96
LITERAL_inherit="inherit"=97
"no-inherit"=98
DOLLAR("dollar sign '$'")=99
LCURLY("opening curly brace '{'")=100
RCURLY("closing curly brace '}'")=101
COLON=102
LITERAL_external="external"=103
LITERAL_schema="schema"=104
":"=105
LITERAL_as="as"=106
LITERAL_at="at"=107
"empty-sequence"=108
QUESTION("question mark '?'")=109
STAR("wildcard '*'")=110
PLUS("+")=111
LITERAL_item="item"=112
LITERAL_map="map"=113
LITERAL_for="for"=114
LITERAL_let="let"=115
LITERAL_try="try"=116
LITERAL_some="some"=117
LITERAL_every="every"=118
LITERAL_if="if"=119
LITERAL_switch="switch"=120
LITERAL_typeswitch="typeswitch"=121
LITERAL_update="update"=122
LITERAL_replace="replace"=123
LITERAL_value="value"=124
LITERAL_insert="insert"=125
LITERAL_delete="delete"=126
LITERAL_rename="rename"=127
LITERAL_with="with"=128
LITERAL_into="into"=129
LITERAL_preceding="preceding"=130
LITERAL_following="following"=131
LITERAL_catch="catch"=132
UNION("union")=133
LITERAL_where="where"=134
LITERAL_return="return"=135
LITERAL_in="in"=136
LITERAL_by="by"=137
LITERAL_stable="stable"=138
LITERAL_ascending="ascending"=139
LITERAL_descending="descending"=140
LITERAL_group="group"=141
LITERAL_satisfies="satisfies"=142
LITERAL_case="case"=143
LITERAL_then="then"=144
LITERAL_else="else"=145
LITERAL_or="or"=146
LITERAL_and="and"=147
LITERAL_instance="instance"=148
LITERAL_of="of"=149
LITERAL_treat="treat"=150
LITERAL_castable="castable"=151
LITERAL_cast="cast"=152
BEFORE=153
AFTER=154
LITERAL_eq="eq"=155
LITERAL_ne="ne"=156
LITERAL_lt="lt"=157
LITERAL_le="le"=158
LITERAL_gt="gt"=159
LITERAL_ge="ge"=160
GT(">")=161
NEQ("!=")=162
LT("<")=163
LTEQ("<=")=164
LITERAL_is="is"=165
LITERAL_isnot="isnot"=166
ANDEQ("fulltext operator '&='")=167
OREQ("fulltext operator '|='")=168
CONCAT("||")=169
LITERAL_to="to"=170
MINUS("-")=171
LITERAL_div="div"=172
LITERAL_idiv="idiv"=173
LITERAL_mod="mod"=174
PRAGMA_START=175
PRAGMA_END("pragma expression")=176
LITERAL_union="union"=177
LITERAL_intersect="intersect"=178
LITERAL_except="except"=179
SLASH("single slash '/'")=180
DSLASH("double slash '//'")=181
BANG=182
LITERAL_text="text"=183
LITERAL_node="node"=184
LITERAL_attribute="attribute"=185
LITERAL_comment="comment"=186
"processing-instruction"=187
"document-node"=188
LITERAL_document="document"=189
LITERAL_array="array"=190
HASH=191
SELF(".")=192
XML_COMMENT("XML comment")=193
XML_PI("processing instruction")=194
LPPAREN("opening brace '['")=195
RPPAREN("closing brace ']'")=196
AT("@ char")=197
PARENT("..")=198
LITERAL_child="child"=199
LITERAL_self="self"=200
LITERAL_descendant="descendant"=201
"descendant-or-self"=202
"following-sibling"=203
LITERAL_parent="parent"=204
LITERAL_ancestor="ancestor"=205
"ancestor-or-self"=206
"preceding-sibling"=207
DOUBLE_LITERAL=208
DECIMAL_LITERAL=209
INTEGER_LITERAL=210
"schema-element"=211
END_TAG_START("XML end tag")=212
QUOT("double quote '\"'")=213
APOS("single quote '")=214
QUOT_ATTRIBUTE_CONTENT=215
ESCAPE_QUOT=216
APOS_ATTRIBUTE_CONTENT=217
ESCAPE_APOS=218
ELEMENT_CONTENT=219
XML_COMMENT_END("end of XML comment")=220
XML_PI_END("end of processing instruction")=221
XML_CDATA("CDATA section")=222
LITERAL_collection="collection"=223
LITERAL_validate="validate"=224
XML_PI_START("start of processing instruction")=225
XML_CDATA_START("CDATA section start")=226
XML_CDATA_END("end of CDATA section")=227
LETTER=228
DIGITS=229
HEX_DIGITS=230
NMSTART=231
NMCHAR=232
WS=233
XQDOC_COMMENT("XQuery XQDoc comment")=234
EXPR_COMMENT("XQuery comment")=235
PREDEFINED_ENTITY_REF=236
CHAR_REF=237
S=238
NEXT_TOKEN=239
CHAR=240
BASECHAR=241
IDEOGRAPHIC=242
COMBINING_CHAR=243
DIGIT=244
EXTENDER=245
