// $ANTLR 2.7.7 (2006-11-01): XQueryTree.g -> XQueryTreeParserTokenTypes.txt$
XQueryTreeParser    // output token vocab name
QNAME=4
PREDICATE=5
FLWOR=6
PARENTHESIZED=7
ABSOLUTE_SLASH=8
ABSOLUTE_DSLASH=9
WILDCARD=10
PREFIX_WILDCARD=11
FUNCTION=12
DYNAMIC_FCALL=13
UNARY_MINUS=14
UNARY_PLUS=15
XPOINTER=16
XPOINTER_ID=17
VARIABLE_REF=18
VARIABLE_BINDING=19
ELEMENT=20
ATTRIBUTE=21
ATTRIBUTE_CONTENT=22
TEXT=23
VERSION_DECL=24
NAMESPACE_DECL=25
DEF_NAMESPACE_DECL=26
DEF_COLLATION_DECL=27
DEF_FUNCTION_NS_DECL=28
ANNOT_DECL=29
GLOBAL_VAR=30
FUNCTION_DECL=31
FUNCTION_INLINE=32
FUNCTION_TEST=33
MAP_TEST=34
PROLOG=35
OPTION=36
ATOMIC_TYPE=37
MODULE=38
ORDER_BY=39
GROUP_BY=40
POSITIONAL_VAR=41
CATCH_ERROR_CODE=42
CATCH_ERROR_DESC=43
CATCH_ERROR_VAL=44
MODULE_DECL=45
MODULE_IMPORT=46
SCHEMA_IMPORT=47
ATTRIBUTE_TEST=48
COMP_ELEM_CONSTRUCTOR=49
COMP_ATTR_CONSTRUCTOR=50
COMP_TEXT_CONSTRUCTOR=51
COMP_COMMENT_CONSTRUCTOR=52
COMP_PI_CONSTRUCTOR=53
COMP_NS_CONSTRUCTOR=54
COMP_DOC_CONSTRUCTOR=55
PRAGMA=56
GTEQ=57
SEQUENCE=58
LITERAL_xpointer="xpointer"=59
LPAREN("opening parenthesis '('")=60
RPAREN("closing parenthesis ')'")=61
NCNAME("name")=62
LITERAL_xquery="xquery"=63
LITERAL_version="version"=64
SEMICOLON("semicolon ';'")=65
LITERAL_module="module"=66
LITERAL_namespace="namespace"=67
EQ("=")=68
STRING_LITERAL("string literal")=69
LITERAL_declare="declare"=70
LITERAL_default="default"=71
"boundary-space"=72
LITERAL_ordering="ordering"=73
LITERAL_construction="construction"=74
"base-uri"=75
"copy-namespaces"=76
LITERAL_option="option"=77
LITERAL_function="function"=78
LITERAL_variable="variable"=79
MOD=80
LITERAL_import="import"=81
LITERAL_encoding="encoding"=82
LITERAL_collation="collation"=83
LITERAL_element="element"=84
LITERAL_order="order"=85
LITERAL_empty="empty"=86
LITERAL_greatest="greatest"=87
LITERAL_least="least"=88
LITERAL_preserve="preserve"=89
LITERAL_strip="strip"=90
LITERAL_ordered="ordered"=91
LITERAL_unordered="unordered"=92
COMMA=93
"no-preserve"=94
LITERAL_inherit="inherit"=95
"no-inherit"=96
DOLLAR("dollar sign '$'")=97
LCURLY("opening curly brace '{'")=98
RCURLY("closing curly brace '}'")=99
COLON=100
LITERAL_external="external"=101
LITERAL_schema="schema"=102
":"=103
LITERAL_as="as"=104
LITERAL_at="at"=105
"empty-sequence"=106
QUESTION("question mark '?'")=107
STAR("wildcard '*'")=108
PLUS("+")=109
LITERAL_item="item"=110
LITERAL_map="map"=111
LITERAL_for="for"=112
LITERAL_let="let"=113
LITERAL_try="try"=114
LITERAL_some="some"=115
LITERAL_every="every"=116
LITERAL_if="if"=117
LITERAL_switch="switch"=118
LITERAL_typeswitch="typeswitch"=119
LITERAL_update="update"=120
LITERAL_replace="replace"=121
LITERAL_value="value"=122
LITERAL_insert="insert"=123
LITERAL_delete="delete"=124
LITERAL_rename="rename"=125
LITERAL_with="with"=126
LITERAL_into="into"=127
LITERAL_preceding="preceding"=128
LITERAL_following="following"=129
LITERAL_catch="catch"=130
UNION("union")=131
LITERAL_where="where"=132
LITERAL_return="return"=133
LITERAL_in="in"=134
LITERAL_by="by"=135
LITERAL_stable="stable"=136
LITERAL_ascending="ascending"=137
LITERAL_descending="descending"=138
LITERAL_group="group"=139
LITERAL_satisfies="satisfies"=140
LITERAL_case="case"=141
LITERAL_then="then"=142
LITERAL_else="else"=143
LITERAL_or="or"=144
LITERAL_and="and"=145
LITERAL_instance="instance"=146
LITERAL_of="of"=147
LITERAL_treat="treat"=148
LITERAL_castable="castable"=149
LITERAL_cast="cast"=150
BEFORE=151
AFTER=152
LITERAL_eq="eq"=153
LITERAL_ne="ne"=154
LITERAL_lt="lt"=155
LITERAL_le="le"=156
LITERAL_gt="gt"=157
LITERAL_ge="ge"=158
GT(">")=159
NEQ("!=")=160
LT("<")=161
LTEQ("<=")=162
LITERAL_is="is"=163
LITERAL_isnot="isnot"=164
ANDEQ("fulltext operator '&='")=165
OREQ("fulltext operator '|='")=166
CONCAT("||")=167
LITERAL_to="to"=168
MINUS("-")=169
LITERAL_div="div"=170
LITERAL_idiv="idiv"=171
LITERAL_mod="mod"=172
PRAGMA_START=173
PRAGMA_END("pragma expression")=174
LITERAL_union="union"=175
LITERAL_intersect="intersect"=176
LITERAL_except="except"=177
SLASH("single slash '/'")=178
DSLASH("double slash '//'")=179
BANG=180
LITERAL_text="text"=181
LITERAL_node="node"=182
LITERAL_attribute="attribute"=183
LITERAL_comment="comment"=184
"processing-instruction"=185
"document-node"=186
LITERAL_document="document"=187
HASH=188
SELF(".")=189
XML_COMMENT("XML comment")=190
XML_PI("processing instruction")=191
LPPAREN("opening brace '['")=192
RPPAREN("closing brace ']'")=193
AT("@ char")=194
PARENT("..")=195
LITERAL_child="child"=196
LITERAL_self="self"=197
LITERAL_descendant="descendant"=198
"descendant-or-self"=199
"following-sibling"=200
LITERAL_parent="parent"=201
LITERAL_ancestor="ancestor"=202
"ancestor-or-self"=203
"preceding-sibling"=204
DOUBLE_LITERAL=205
DECIMAL_LITERAL=206
INTEGER_LITERAL=207
"schema-element"=208
END_TAG_START("XML end tag")=209
QUOT("double quote '\"'")=210
APOS("single quote '")=211
QUOT_ATTRIBUTE_CONTENT=212
ESCAPE_QUOT=213
APOS_ATTRIBUTE_CONTENT=214
ESCAPE_APOS=215
ELEMENT_CONTENT=216
XML_COMMENT_END("end of XML comment")=217
XML_PI_END("end of processing instruction")=218
XML_CDATA("CDATA section")=219
LITERAL_collection="collection"=220
LITERAL_validate="validate"=221
XML_PI_START("start of processing instruction")=222
XML_CDATA_START("CDATA section start")=223
XML_CDATA_END("end of CDATA section")=224
LETTER=225
DIGITS=226
HEX_DIGITS=227
NMSTART=228
NMCHAR=229
WS=230
EXPR_COMMENT("XQuery comment")=231
PREDEFINED_ENTITY_REF=232
CHAR_REF=233
S=234
NEXT_TOKEN=235
CHAR=236
BASECHAR=237
IDEOGRAPHIC=238
COMBINING_CHAR=239
DIGIT=240
EXTENDER=241
