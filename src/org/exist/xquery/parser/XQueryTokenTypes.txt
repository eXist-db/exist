// $ANTLR 2.7.7 (2006-11-01): XQuery.g -> XQueryTokenTypes.txt$
XQuery    // output token vocab name
QNAME=4
PREDICATE=5
FLWOR=6
PARENTHESIZED=7
ABSOLUTE_SLASH=8
ABSOLUTE_DSLASH=9
WILDCARD=10
PREFIX_WILDCARD=11
FUNCTION=12
DYNAMIC_FCALL=13
UNARY_MINUS=14
UNARY_PLUS=15
XPOINTER=16
XPOINTER_ID=17
VARIABLE_REF=18
VARIABLE_BINDING=19
ELEMENT=20
ATTRIBUTE=21
ATTRIBUTE_CONTENT=22
TEXT=23
VERSION_DECL=24
NAMESPACE_DECL=25
DEF_NAMESPACE_DECL=26
DEF_COLLATION_DECL=27
DEF_FUNCTION_NS_DECL=28
ANNOT_DECL=29
GLOBAL_VAR=30
FUNCTION_DECL=31
FUNCTION_INLINE=32
FUNCTION_TEST=33
MAP_TEST=34
MAP_LOOKUP=35
PROLOG=36
OPTION=37
ATOMIC_TYPE=38
MODULE=39
ORDER_BY=40
GROUP_BY=41
POSITIONAL_VAR=42
CATCH_ERROR_CODE=43
CATCH_ERROR_DESC=44
CATCH_ERROR_VAL=45
MODULE_DECL=46
MODULE_IMPORT=47
SCHEMA_IMPORT=48
ATTRIBUTE_TEST=49
COMP_ELEM_CONSTRUCTOR=50
COMP_ATTR_CONSTRUCTOR=51
COMP_TEXT_CONSTRUCTOR=52
COMP_COMMENT_CONSTRUCTOR=53
COMP_PI_CONSTRUCTOR=54
COMP_NS_CONSTRUCTOR=55
COMP_DOC_CONSTRUCTOR=56
PRAGMA=57
GTEQ=58
SEQUENCE=59
LITERAL_xpointer="xpointer"=60
LPAREN("opening parenthesis '('")=61
RPAREN("closing parenthesis ')'")=62
NCNAME("name")=63
LITERAL_xquery="xquery"=64
LITERAL_version="version"=65
SEMICOLON("semicolon ';'")=66
LITERAL_module="module"=67
LITERAL_namespace="namespace"=68
EQ("=")=69
STRING_LITERAL("string literal")=70
LITERAL_declare="declare"=71
LITERAL_default="default"=72
"boundary-space"=73
LITERAL_ordering="ordering"=74
LITERAL_construction="construction"=75
"base-uri"=76
"copy-namespaces"=77
LITERAL_option="option"=78
LITERAL_function="function"=79
LITERAL_variable="variable"=80
MOD=81
LITERAL_import="import"=82
LITERAL_encoding="encoding"=83
LITERAL_collation="collation"=84
LITERAL_element="element"=85
LITERAL_order="order"=86
LITERAL_empty="empty"=87
LITERAL_greatest="greatest"=88
LITERAL_least="least"=89
LITERAL_preserve="preserve"=90
LITERAL_strip="strip"=91
LITERAL_ordered="ordered"=92
LITERAL_unordered="unordered"=93
COMMA=94
"no-preserve"=95
LITERAL_inherit="inherit"=96
"no-inherit"=97
DOLLAR("dollar sign '$'")=98
LCURLY("opening curly brace '{'")=99
RCURLY("closing curly brace '}'")=100
COLON=101
LITERAL_external="external"=102
LITERAL_schema="schema"=103
":"=104
LITERAL_as="as"=105
LITERAL_at="at"=106
"empty-sequence"=107
QUESTION("question mark '?'")=108
STAR("wildcard '*'")=109
PLUS("+")=110
LITERAL_item="item"=111
LITERAL_map="map"=112
LITERAL_for="for"=113
LITERAL_let="let"=114
LITERAL_try="try"=115
LITERAL_some="some"=116
LITERAL_every="every"=117
LITERAL_if="if"=118
LITERAL_switch="switch"=119
LITERAL_typeswitch="typeswitch"=120
LITERAL_update="update"=121
LITERAL_replace="replace"=122
LITERAL_value="value"=123
LITERAL_insert="insert"=124
LITERAL_delete="delete"=125
LITERAL_rename="rename"=126
LITERAL_with="with"=127
LITERAL_into="into"=128
LITERAL_preceding="preceding"=129
LITERAL_following="following"=130
LITERAL_catch="catch"=131
UNION("union")=132
LITERAL_where="where"=133
LITERAL_return="return"=134
LITERAL_in="in"=135
LITERAL_by="by"=136
LITERAL_stable="stable"=137
LITERAL_ascending="ascending"=138
LITERAL_descending="descending"=139
LITERAL_group="group"=140
LITERAL_satisfies="satisfies"=141
LITERAL_case="case"=142
LITERAL_then="then"=143
LITERAL_else="else"=144
LITERAL_or="or"=145
LITERAL_and="and"=146
LITERAL_instance="instance"=147
LITERAL_of="of"=148
LITERAL_treat="treat"=149
LITERAL_castable="castable"=150
LITERAL_cast="cast"=151
BEFORE=152
AFTER=153
LITERAL_eq="eq"=154
LITERAL_ne="ne"=155
LITERAL_lt="lt"=156
LITERAL_le="le"=157
LITERAL_gt="gt"=158
LITERAL_ge="ge"=159
GT(">")=160
NEQ("!=")=161
LT("<")=162
LTEQ("<=")=163
LITERAL_is="is"=164
LITERAL_isnot="isnot"=165
ANDEQ("fulltext operator '&='")=166
OREQ("fulltext operator '|='")=167
CONCAT("||")=168
LITERAL_to="to"=169
MINUS("-")=170
LITERAL_div="div"=171
LITERAL_idiv="idiv"=172
LITERAL_mod="mod"=173
PRAGMA_START=174
PRAGMA_END("pragma expression")=175
LITERAL_union="union"=176
LITERAL_intersect="intersect"=177
LITERAL_except="except"=178
SLASH("single slash '/'")=179
DSLASH("double slash '//'")=180
BANG=181
LITERAL_text="text"=182
LITERAL_node="node"=183
LITERAL_attribute="attribute"=184
LITERAL_comment="comment"=185
"processing-instruction"=186
"document-node"=187
LITERAL_document="document"=188
HASH=189
SELF(".")=190
XML_COMMENT("XML comment")=191
XML_PI("processing instruction")=192
LPPAREN("opening brace '['")=193
RPPAREN("closing brace ']'")=194
AT("@ char")=195
PARENT("..")=196
LITERAL_child="child"=197
LITERAL_self="self"=198
LITERAL_descendant="descendant"=199
"descendant-or-self"=200
"following-sibling"=201
LITERAL_parent="parent"=202
LITERAL_ancestor="ancestor"=203
"ancestor-or-self"=204
"preceding-sibling"=205
DOUBLE_LITERAL=206
DECIMAL_LITERAL=207
INTEGER_LITERAL=208
"schema-element"=209
END_TAG_START("XML end tag")=210
QUOT("double quote '\"'")=211
APOS("single quote '")=212
QUOT_ATTRIBUTE_CONTENT=213
ESCAPE_QUOT=214
APOS_ATTRIBUTE_CONTENT=215
ESCAPE_APOS=216
ELEMENT_CONTENT=217
XML_COMMENT_END("end of XML comment")=218
XML_PI_END("end of processing instruction")=219
XML_CDATA("CDATA section")=220
LITERAL_collection="collection"=221
LITERAL_validate="validate"=222
XML_PI_START("start of processing instruction")=223
XML_CDATA_START("CDATA section start")=224
XML_CDATA_END("end of CDATA section")=225
LETTER=226
DIGITS=227
HEX_DIGITS=228
NMSTART=229
NMCHAR=230
WS=231
XQDOC_COMMENT("XQuery XQDoc comment")=232
EXPR_COMMENT("XQuery comment")=233
PREDEFINED_ENTITY_REF=234
CHAR_REF=235
S=236
NEXT_TOKEN=237
CHAR=238
BASECHAR=239
IDEOGRAPHIC=240
COMBINING_CHAR=241
DIGIT=242
EXTENDER=243
