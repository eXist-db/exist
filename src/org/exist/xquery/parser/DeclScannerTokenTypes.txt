// $ANTLR 2.7.7 (2006-11-01): DeclScanner.g -> DeclScannerTokenTypes.txt$
DeclScanner    // output token vocab name
QNAME=4
PREDICATE=5
FLWOR=6
PARENTHESIZED=7
ABSOLUTE_SLASH=8
ABSOLUTE_DSLASH=9
WILDCARD=10
PREFIX_WILDCARD=11
FUNCTION=12
UNARY_MINUS=13
UNARY_PLUS=14
XPOINTER=15
XPOINTER_ID=16
VARIABLE_REF=17
VARIABLE_BINDING=18
ELEMENT=19
ATTRIBUTE=20
ATTRIBUTE_CONTENT=21
TEXT=22
VERSION_DECL=23
NAMESPACE_DECL=24
DEF_NAMESPACE_DECL=25
DEF_COLLATION_DECL=26
DEF_FUNCTION_NS_DECL=27
ANNOT_DECL=28
GLOBAL_VAR=29
FUNCTION_DECL=30
PROLOG=31
OPTION=32
ATOMIC_TYPE=33
MODULE=34
ORDER_BY=35
GROUP_BY=36
POSITIONAL_VAR=37
CATCH_ERROR_CODE=38
CATCH_ERROR_DESC=39
CATCH_ERROR_VAL=40
MODULE_DECL=41
MODULE_IMPORT=42
SCHEMA_IMPORT=43
ATTRIBUTE_TEST=44
COMP_ELEM_CONSTRUCTOR=45
COMP_ATTR_CONSTRUCTOR=46
COMP_TEXT_CONSTRUCTOR=47
COMP_COMMENT_CONSTRUCTOR=48
COMP_PI_CONSTRUCTOR=49
COMP_NS_CONSTRUCTOR=50
COMP_DOC_CONSTRUCTOR=51
PRAGMA=52
GTEQ=53
SEQUENCE=54
LITERAL_xpointer="xpointer"=55
LPAREN("opening parenthesis '('")=56
RPAREN("closing parenthesis ')'")=57
NCNAME("name")=58
LITERAL_xquery="xquery"=59
LITERAL_version="version"=60
SEMICOLON("semicolon ';'")=61
LITERAL_module="module"=62
LITERAL_namespace="namespace"=63
EQ("=")=64
STRING_LITERAL("string literal")=65
LITERAL_declare="declare"=66
LITERAL_default="default"=67
"boundary-space"=68
LITERAL_ordering="ordering"=69
LITERAL_construction="construction"=70
"base-uri"=71
"copy-namespaces"=72
LITERAL_option="option"=73
LITERAL_function="function"=74
LITERAL_variable="variable"=75
MOD=76
LITERAL_import="import"=77
LITERAL_encoding="encoding"=78
LITERAL_collation="collation"=79
LITERAL_element="element"=80
LITERAL_order="order"=81
LITERAL_empty="empty"=82
LITERAL_greatest="greatest"=83
LITERAL_least="least"=84
LITERAL_preserve="preserve"=85
LITERAL_strip="strip"=86
LITERAL_ordered="ordered"=87
LITERAL_unordered="unordered"=88
COMMA=89
"no-preserve"=90
LITERAL_inherit="inherit"=91
"no-inherit"=92
DOLLAR("dollar sign '$'")=93
LCURLY("opening curly brace '{'")=94
RCURLY("closing curly brace '}'")=95
COLON=96
LITERAL_external="external"=97
LITERAL_schema="schema"=98
":"=99
LITERAL_as="as"=100
LITERAL_at="at"=101
"empty-sequence"=102
QUESTION("question mark '?'")=103
STAR("wildcard '*'")=104
PLUS("+")=105
LITERAL_item="item"=106
LITERAL_for="for"=107
LITERAL_let="let"=108
LITERAL_try="try"=109
LITERAL_some="some"=110
LITERAL_every="every"=111
LITERAL_if="if"=112
LITERAL_switch="switch"=113
LITERAL_typeswitch="typeswitch"=114
LITERAL_update="update"=115
LITERAL_replace="replace"=116
LITERAL_value="value"=117
LITERAL_insert="insert"=118
LITERAL_delete="delete"=119
LITERAL_rename="rename"=120
LITERAL_with="with"=121
LITERAL_into="into"=122
LITERAL_preceding="preceding"=123
LITERAL_following="following"=124
LITERAL_catch="catch"=125
UNION("union")=126
LITERAL_where="where"=127
LITERAL_return="return"=128
LITERAL_in="in"=129
LITERAL_by="by"=130
LITERAL_stable="stable"=131
LITERAL_ascending="ascending"=132
LITERAL_descending="descending"=133
LITERAL_group="group"=134
LITERAL_satisfies="satisfies"=135
LITERAL_case="case"=136
LITERAL_then="then"=137
LITERAL_else="else"=138
LITERAL_or="or"=139
LITERAL_and="and"=140
LITERAL_instance="instance"=141
LITERAL_of="of"=142
LITERAL_treat="treat"=143
LITERAL_castable="castable"=144
LITERAL_cast="cast"=145
BEFORE=146
AFTER=147
LITERAL_eq="eq"=148
LITERAL_ne="ne"=149
LITERAL_lt="lt"=150
LITERAL_le="le"=151
LITERAL_gt="gt"=152
LITERAL_ge="ge"=153
GT(">")=154
NEQ("!=")=155
LT("<")=156
LTEQ("<=")=157
LITERAL_is="is"=158
LITERAL_isnot="isnot"=159
ANDEQ("fulltext operator '&='")=160
OREQ("fulltext operator '|='")=161
CONCAT("||")=162
LITERAL_to="to"=163
MINUS("-")=164
LITERAL_div="div"=165
LITERAL_idiv="idiv"=166
LITERAL_mod="mod"=167
PRAGMA_START=168
PRAGMA_END("pragma expression")=169
LITERAL_union="union"=170
LITERAL_intersect="intersect"=171
LITERAL_except="except"=172
SLASH("single slash '/'")=173
DSLASH("double slash '//'")=174
LITERAL_text="text"=175
LITERAL_node="node"=176
LITERAL_attribute="attribute"=177
LITERAL_comment="comment"=178
"processing-instruction"=179
"document-node"=180
LITERAL_document="document"=181
SELF(".")=182
XML_COMMENT("XML comment")=183
XML_PI("processing instruction")=184
LPPAREN("opening brace '['")=185
RPPAREN("closing brace ']'")=186
AT("@ char")=187
PARENT("..")=188
LITERAL_child="child"=189
LITERAL_self="self"=190
LITERAL_descendant="descendant"=191
"descendant-or-self"=192
"following-sibling"=193
LITERAL_parent="parent"=194
LITERAL_ancestor="ancestor"=195
"ancestor-or-self"=196
"preceding-sibling"=197
DOUBLE_LITERAL=198
DECIMAL_LITERAL=199
INTEGER_LITERAL=200
"schema-element"=201
END_TAG_START("XML end tag")=202
QUOT("double quote '\"'")=203
APOS("single quote '")=204
QUOT_ATTRIBUTE_CONTENT=205
ESCAPE_QUOT=206
APOS_ATTRIBUTE_CONTENT=207
ESCAPE_APOS=208
ELEMENT_CONTENT=209
XML_COMMENT_END("end of XML comment")=210
XML_PI_END("end of processing instruction")=211
XML_CDATA("CDATA section")=212
LITERAL_collection="collection"=213
LITERAL_validate="validate"=214
XML_PI_START("start of processing instruction")=215
XML_CDATA_START("CDATA section start")=216
XML_CDATA_END("end of CDATA section")=217
LETTER=218
DIGITS=219
HEX_DIGITS=220
NMSTART=221
NMCHAR=222
WS=223
EXPR_COMMENT("XQuery comment")=224
PREDEFINED_ENTITY_REF=225
CHAR_REF=226
S=227
NEXT_TOKEN=228
CHAR=229
BASECHAR=230
IDEOGRAPHIC=231
COMBINING_CHAR=232
DIGIT=233
EXTENDER=234
