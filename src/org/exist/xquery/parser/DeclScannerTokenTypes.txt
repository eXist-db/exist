// $ANTLR 2.7.7 (2006-11-01): DeclScanner.g -> DeclScannerTokenTypes.txt$
DeclScanner    // output token vocab name
QNAME=4
EQNAME=5
PREDICATE=6
FLWOR=7
PARENTHESIZED=8
ABSOLUTE_SLASH=9
ABSOLUTE_DSLASH=10
WILDCARD=11
PREFIX_WILDCARD=12
FUNCTION=13
DYNAMIC_FCALL=14
UNARY_MINUS=15
UNARY_PLUS=16
XPOINTER=17
XPOINTER_ID=18
VARIABLE_REF=19
VARIABLE_BINDING=20
ELEMENT=21
ATTRIBUTE=22
ATTRIBUTE_CONTENT=23
TEXT=24
VERSION_DECL=25
NAMESPACE_DECL=26
DEF_NAMESPACE_DECL=27
DEF_COLLATION_DECL=28
DEF_FUNCTION_NS_DECL=29
ANNOT_DECL=30
GLOBAL_VAR=31
FUNCTION_DECL=32
INLINE_FUNCTION_DECL=33
FUNCTION_INLINE=34
FUNCTION_TEST=35
MAP_TEST=36
LOOKUP=37
ARRAY=38
ARRAY_TEST=39
PROLOG=40
OPTION=41
ATOMIC_TYPE=42
MODULE=43
ORDER_BY=44
GROUP_BY=45
POSITIONAL_VAR=46
CATCH_ERROR_CODE=47
CATCH_ERROR_DESC=48
CATCH_ERROR_VAL=49
MODULE_DECL=50
MODULE_IMPORT=51
SCHEMA_IMPORT=52
ATTRIBUTE_TEST=53
COMP_ELEM_CONSTRUCTOR=54
COMP_ATTR_CONSTRUCTOR=55
COMP_TEXT_CONSTRUCTOR=56
COMP_COMMENT_CONSTRUCTOR=57
COMP_PI_CONSTRUCTOR=58
COMP_NS_CONSTRUCTOR=59
COMP_DOC_CONSTRUCTOR=60
PRAGMA=61
GTEQ=62
SEQUENCE=63
LITERAL_xpointer="xpointer"=64
LPAREN("opening parenthesis '('")=65
RPAREN("closing parenthesis ')'")=66
NCNAME("name")=67
LITERAL_xquery="xquery"=68
LITERAL_version="version"=69
SEMICOLON("semicolon ';'")=70
LITERAL_module="module"=71
LITERAL_namespace="namespace"=72
EQ("=")=73
STRING_LITERAL("string literal")=74
LITERAL_declare="declare"=75
LITERAL_default="default"=76
"boundary-space"=77
LITERAL_ordering="ordering"=78
LITERAL_construction="construction"=79
"base-uri"=80
"copy-namespaces"=81
LITERAL_option="option"=82
LITERAL_function="function"=83
LITERAL_variable="variable"=84
MOD=85
LITERAL_import="import"=86
LITERAL_encoding="encoding"=87
LITERAL_collation="collation"=88
LITERAL_element="element"=89
LITERAL_order="order"=90
LITERAL_empty="empty"=91
LITERAL_greatest="greatest"=92
LITERAL_least="least"=93
LITERAL_preserve="preserve"=94
LITERAL_strip="strip"=95
LITERAL_ordered="ordered"=96
LITERAL_unordered="unordered"=97
COMMA=98
"no-preserve"=99
LITERAL_inherit="inherit"=100
"no-inherit"=101
DOLLAR("dollar sign '$'")=102
LCURLY("opening curly brace '{'")=103
RCURLY("closing curly brace '}'")=104
COLON=105
LITERAL_external="external"=106
LITERAL_schema="schema"=107
BRACED_URI_LITERAL("braced uri literal")=108
LITERAL_as="as"=109
LITERAL_at="at"=110
"empty-sequence"=111
QUESTION("question mark '?'")=112
STAR("wildcard '*'")=113
PLUS("+")=114
LITERAL_item="item"=115
LITERAL_map="map"=116
LITERAL_array="array"=117
LITERAL_for="for"=118
LITERAL_let="let"=119
LITERAL_try="try"=120
LITERAL_some="some"=121
LITERAL_every="every"=122
LITERAL_if="if"=123
LITERAL_switch="switch"=124
LITERAL_typeswitch="typeswitch"=125
LITERAL_update="update"=126
LITERAL_replace="replace"=127
LITERAL_value="value"=128
LITERAL_insert="insert"=129
LITERAL_delete="delete"=130
LITERAL_rename="rename"=131
LITERAL_with="with"=132
LITERAL_into="into"=133
LITERAL_preceding="preceding"=134
LITERAL_following="following"=135
LITERAL_catch="catch"=136
UNION("union")=137
LITERAL_where="where"=138
LITERAL_return="return"=139
LITERAL_in="in"=140
LITERAL_by="by"=141
LITERAL_stable="stable"=142
LITERAL_ascending="ascending"=143
LITERAL_descending="descending"=144
LITERAL_group="group"=145
LITERAL_satisfies="satisfies"=146
LITERAL_case="case"=147
LITERAL_then="then"=148
LITERAL_else="else"=149
LITERAL_or="or"=150
LITERAL_and="and"=151
LITERAL_instance="instance"=152
LITERAL_of="of"=153
LITERAL_treat="treat"=154
LITERAL_castable="castable"=155
LITERAL_cast="cast"=156
BEFORE=157
AFTER=158
LITERAL_eq="eq"=159
LITERAL_ne="ne"=160
LITERAL_lt="lt"=161
LITERAL_le="le"=162
LITERAL_gt="gt"=163
LITERAL_ge="ge"=164
GT(">")=165
NEQ("!=")=166
LT("<")=167
LTEQ("<=")=168
LITERAL_is="is"=169
LITERAL_isnot="isnot"=170
CONCAT("||")=171
LITERAL_to="to"=172
MINUS("-")=173
LITERAL_div="div"=174
LITERAL_idiv="idiv"=175
LITERAL_mod="mod"=176
PRAGMA_START=177
PRAGMA_END("pragma expression")=178
LITERAL_union="union"=179
LITERAL_intersect="intersect"=180
LITERAL_except="except"=181
SLASH("single slash '/'")=182
DSLASH("double slash '//'")=183
BANG=184
LITERAL_text="text"=185
LITERAL_node="node"=186
LITERAL_attribute="attribute"=187
LITERAL_comment="comment"=188
"processing-instruction"=189
"document-node"=190
LITERAL_document="document"=191
HASH=192
SELF(".")=193
XML_COMMENT("XML comment")=194
XML_PI("processing instruction")=195
LPPAREN("opening brace '['")=196
RPPAREN("closing brace ']'")=197
AT("@ char")=198
PARENT("..")=199
LITERAL_child="child"=200
LITERAL_self="self"=201
LITERAL_descendant="descendant"=202
"descendant-or-self"=203
"following-sibling"=204
LITERAL_parent="parent"=205
LITERAL_ancestor="ancestor"=206
"ancestor-or-self"=207
"preceding-sibling"=208
INTEGER_LITERAL=209
DOUBLE_LITERAL=210
DECIMAL_LITERAL=211
"schema-element"=212
END_TAG_START("XML end tag")=213
QUOT("double quote '\"'")=214
APOS("single quote '")=215
QUOT_ATTRIBUTE_CONTENT=216
ESCAPE_QUOT=217
APOS_ATTRIBUTE_CONTENT=218
ESCAPE_APOS=219
ELEMENT_CONTENT=220
XML_COMMENT_END("end of XML comment")=221
XML_PI_END("end of processing instruction")=222
XML_CDATA("CDATA section")=223
LITERAL_collection="collection"=224
LITERAL_validate="validate"=225
XML_PI_START("start of processing instruction")=226
XML_CDATA_START("CDATA section start")=227
XML_CDATA_END("end of CDATA section")=228
LETTER=229
DIGITS=230
HEX_DIGITS=231
NMSTART=232
NMCHAR=233
WS=234
XQDOC_COMMENT("XQuery XQDoc comment")=235
EXPR_COMMENT("XQuery comment")=236
PREDEFINED_ENTITY_REF=237
CHAR_REF=238
S=239
NEXT_TOKEN=240
CHAR=241
BASECHAR=242
IDEOGRAPHIC=243
COMBINING_CHAR=244
DIGIT=245
EXTENDER=246
