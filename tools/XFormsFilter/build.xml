<?xml version="1.0" encoding="UTF-8"?>

<!-- XFormsFilter build file

     call ant with the target as, e.g.

        ant -f build.xml build


     the main targets are:

     build
        compiles all classes into build.dir

     jar
		creates a XFormsFilter.jar which is suitable for deploying
		into $EXIST_HOME/lib/user

	deploy
		compiles, creates a jar file and copies it to $EXIST_HOME/lib/user
		Note - web.xml also needs to have the XFormsFilter added manually!

	undeploy
		removes a deployed XFormsFilter from eXist

     javadoc
        creates the java documentation for the java classes into doc.dir/api

     clean
        this target removes all compiled java classes from the build.dir
  -->

<project name="XFormsFilter" default="jar" basedir=".">

    <property file="build.properties"/>

    <property environment="env"/>

    <!-- our directory variables -->
    <property name="src.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="temp.build.dir" value="build.chiba"/>
	<property name="lib.dir" value="lib"/>
    <property name="doc.dir" value="doc"/>
    <property name="javadoc.dir" value="${doc.dir}/api"/>
	<property name="resources.dir" value="resources"/>
	<property name="xslt.dir" value="${resources.dir}/xslt"/>
	<property name="styles.dir" value="${resources.dir}/styles"/>

	<!-- external directory and file dependency variables -->
	<property name="exist.home" value="${env.EXIST_HOME}"/>
	<property name="exist.lib" value="${exist.home}/lib"/>
	<property name="exist.lib.cocoon" value="${exist.lib}/cocoon"/>
	<property name="exist.lib.user" value="${exist.lib}/user"/>
    <property name="chiba.core.src" value="${chiba.core.name}-${chiba.core.version}-src.tar.gz"/>
    <property name="chiba.web.src" value="${chiba.web.name}-${chiba.web.version}-src.tar.gz"/>

    <!-- compiler options -->
    <property name="javac.debug" value="on"/>
    <property name="javac.deprecation" value="off"/>
    <property name="javac.optimize" value="off"/>
	
	<!-- test if eXist home has been set correctly -->
	<available file="${exist.home}" property="exist.home.present" description="Check for existence of eXist"/>
	
	<!-- test if Chiba source files are available -->
    <available file="${chiba.core.src}" property="chiba.core.src.present" description="Check for existence of Chiba Core sources"/>
    <available file="${chiba.web.src}" property="chiba.web.src.present" description="Check for existence of Chiba Web sources"/>
	
    <!-- classpath -->
    <path id="compile.class.path" description="classpath for compiling core classes">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <pathelement path="${build.dir}"/>
    </path>
	
	<!-- proxy -->
	<!-- setproxy proxyhost="proxy-staff.devon.gov.uk" proxyport="80" /-->
	
	<!-- targets -->
	
	<!-- prepare target -->
    <target name="prepare" depends="chiba-web">
    	
        <echo message=""/>
        <echo message="---------- preparing: creating dirs and copying files ----------"/>
        <echo message=""/>
    	
        <tstamp/>

        <condition property="VM">
            <contains string="${java.version}" substring="1.4"/>
        </condition>

        <echo message="JDK1.4: ${VM}"/>
        <echo message="current JDK: ${java.version}"/>

        <mkdir dir="${javadoc.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>

	<!-- build target -->
    <target name="build" depends="prepare" description="compiling classes">
        <echo message=""/>
        <echo message="---------- compiling classes ----------"/>
        <echo message=""/>
    	
        <javac includeAntRuntime="false" description="compiling XFormsFilter Servlet Filter classes"
            destdir="${build.dir}"
            classpathref="compile.class.path"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            optimize="${javac.optimize}"
            source="${build.compiler.source}" target="${build.compiler.target}">
                <src path="${src.dir}"/>
            </javac>
    </target>

	<!-- javadoc target -->
    <target name="javadoc" depends="build" description="create XFormsFilter JavaDoc">
		<echo message=""/>
        <echo message="---------- creating javadoc ----------"/>
        <echo message=""/>
    	
        <javadoc sourcepath="${src.dir}"
            packagenames="uk.*"
            classpathref="compile.class.path"
            destdir="${javadoc.dir}">
            <fileset dir="${src.dir}"
                defaultexcludes="yes">
                <include name="uk/gov/devonline/**.java"/>
            </fileset>
        </javadoc>
    </target>

	<!-- jar target -->
    <target name="jar" depends="build">
    	<echo message=""/>
        <echo message="---------- creating XFormsFilter jar ----------"/>
        <echo message=""/>
    	
        <jar basedir="${build.dir}" destfile="${app.name}-${app.version}.jar" />
    </target>
	
	<!-- deploy target -->
    <target name="deploy" depends="build, jar">
    	<echo message=""/>
        <echo message="---------- deploying XFormsFilter to ${exist.lib.user} ----------"/>
        <echo message=""/>
    	
    	<fail unless="exist.home.present"
            message="Please set the EXIST_HOME environment variable correctly"/>
    	
    	<!-- copy XFormsFilter jar -->
    	<copy description="copy XFormsFilter" file="${app.name}-${app.version}.jar" todir="${exist.lib.user}"/>
    	
    	<!-- copy Chiba jar's and dependencies -->
    	<copy description="copy Chiba" todir="${exist.lib.user}">
			<fileset dir="${lib.dir}">
				<include name="chiba-*.jar"/>
				<include name="commons-codec*.jar"/>
				<include name="commons-jxpath*.jar"/>
				<include name="dwr*.jar"/>
				<include name="javax-activation*.jar"/>
				<include name="javax-mail*.jar"/>
			</fileset>
		</copy>

    	<!-- rename eXist/Cocoon commons-jxpath jar so that it doesnt conflict with Chiba's -->
		<move file="${exist.lib.cocoon}/commons-jxpath-1.2.jar" tofile="${exist.lib.cocoon}/commons-jxpath-1.2.jar.bak"/>
    	
    </target>

	<!-- undeploy target -->
    <target name="undeploy">
    	<echo message=""/>
        <echo message="---------- un-deploying XFormsFilter from ${exist.lib.user} ----------"/>
        <echo message=""/>
    	
    	<fail unless="exist.home.present"
            message="Please set the EXIST_HOME environment variable correctly"/>
    	
    	<!-- delete XFormsFilter jar -->
    	<delete file="${exist.lib.user}/${app.name}-${app.version}.jar"/>
    	
    	<!-- delete Chiba jar's and dependencies -->
    	<delete>
			<fileset dir="${exist.lib.user}">
				<include name="chiba-*.jar"/>
				<include name="commons-codec*.jar"/>
				<include name="commons-jxpath*.jar"/>
				<include name="dwr*.jar"/>
				<include name="javax-activation*.jar"/>
				<include name="javax-mail*.jar"/>
			</fileset>
		</delete>

    	<!-- restore eXist/Cocoon commons-jxpath jar -->
		<move file="${exist.lib.cocoon}/commons-jxpath-1.2.jar.bak" tofile="${exist.lib.cocoon}/commons-jxpath-1.2.jar"/>
    	
    </target>
	
	<!-- clean target -->
    <target name="clean" description="clean all classes">
    	<echo message=""/>
        <echo message="---------- cleaning ----------"/>
        <echo message=""/>
    	
        <delete dir="${temp.build.dir}"/>
    	<delete dir="${build.dir}"/>
    	<delete dir="${javadoc.dir}"/>
    	<delete dir="${lib.dir}"/>
    	<delete dir="${styles.dir}"/>
    	<delete file="${xslt.dir}/html4.xsl"/>
    	<delete file="${xslt.dir}/html-form-controls.xsl"/>
    	<delete file="${xslt.dir}/ui.xsl"/>
    	<delete file="chiba.default.xml"/>
    	<delete file="${app.name}-${app.version}.jar"/>
    	<delete file="${chiba.core.src}"/>
    	<delete file="${chiba.web.src}"/>
    </target>
	
	<!-- downloads the chiba-core source code -->
	<target name="download-chiba-core" unless="chiba.core.src.present">
		<echo message=""/>
        <echo message="---------- Downloading chiba-core source ----------"/>
        <echo message=""/>
    	<get src="${chiba.download.mirror}/${chiba.core.src}" dest="${chiba.core.src}" verbose="true"/>
        <echo message="Download complete"/>
    </target>
	
	<!-- downloads the chiba-web source code -->
	<target name="download-chiba-web" unless="chiba.web.src.present">
		<echo message=""/>
        <echo message="---------- Downloading chiba-web source ----------"/>
        <echo message=""/>
    	<get src="${chiba.download.mirror}/${chiba.web.src}" dest="${chiba.web.src}" verbose="true"/>
		<echo message=""/>
    </target>
	
	<!-- builds a jar for chiba-core and copies it to lib -->
	<target name="chiba-core" depends="download-chiba-core">
		<echo message=""/>
        <echo message="---------- building chiba-core ----------"/>
        <echo message=""/>

		<!-- copy the src archive -->
		<copy description="copy ${chiba.core.src} to temporary build folder ${temp.build.dir}" file="${chiba.core.src}" todir="${temp.build.dir}"/>
		
		<!-- unzip and untar the source -->
		<gunzip src="${temp.build.dir}/${chiba.core.src}" dest="${temp.build.dir}"/>
		<untar src="${temp.build.dir}/${chiba.core.name}-${chiba.core.version}-src.tar" dest="${temp.build.dir}"/>
		
       	<!-- "ant dist" on chiba-sandbox code in temp.build.dir -->
		<ant antfile="build.xml" dir="${temp.build.dir}" target="dist" inheritAll="false" inheritRefs="false"/>
		
		<!-- copy the newly built Chiba Core JAR to our lib folder -->
		<copy description="copy Chiba Core" file="${temp.build.dir}/${chiba.core.name}-${chiba.core.version}/${chiba.core.name}-${chiba.core.version}.jar" todir="${lib.dir}"/>		

		<!-- copy Chiba Core dependency JAR files to our lib folder -->
		<copy description="copy Chiba Core dependencies" todir="${lib.dir}">
			<fileset dir="${temp.build.dir}/lib">
				<include name="commons-jxpath*.jar"/>
				<include name="commons-httpclient*.jar"/>
				<include name="commons-codec*.jar"/>
				<include name="log4j*.jar"/>
				<include name="javax-activation*.jar"/>
				<include name="javax-mail*.jar"/>
				<include name="junit*.jar"/>
			</fileset>
		</copy>
		
		<!-- remove temporary build directory -->
		<delete dir="${temp.build.dir}"/>
	</target>

	<!-- builds a jar for chiba-web and copies it to lib -->
	<target name="chiba-web" depends="chiba-core, download-chiba-web">
		<echo message=""/>
        <echo message="---------- building chiba-web ----------"/>
        <echo message=""/>
		
		<!-- copy the src archive -->
		<copy description="copy ${chiba.web.src} to temporary build folder ${temp.build.dir}" file="${chiba.web.src}" todir="${temp.build.dir}"/>
		
		<!-- unzip and untar the source -->
		<gunzip src="${temp.build.dir}/${chiba.web.src}" dest="${temp.build.dir}"/>
		<untar src="${temp.build.dir}/${chiba.web.name}-${chiba.web.version}-src.tar" dest="${temp.build.dir}"/>

		<!-- chiba-web extracts into its own folder, move it out of its own folder into temp.build.dir -->
		<move todir="${temp.build.dir}">
			<fileset dir="${temp.build.dir}/${chiba.web.name}-${chiba.web.version}">
				<include name="**/*"/>
			</fileset>
		</move>
		<delete dir="${temp.build.dir}/${chiba.web.name}-${chiba.web.version}"/>
		
		<!-- copy Chiba core to Chiba Web's lib/core - needed for building -->
		<copy description="copy Chiba Core for Chiba Web build" file="${lib.dir}/${chiba.core.name}-${chiba.core.version}.jar" todir="${temp.build.dir}/lib/core"/>

		<!-- copy Chiba web dependencies from Chiba core to Chiba Web's lib - needed for building -->
		<copy todir="${temp.build.dir}/lib">
			<fileset dir="${lib.dir}">
				<include name="log4j*.jar"/>
				<include name="commons-httpclient*.jar"/>
				<include name="junit*.jar"/>
			</fileset>
		</copy>
		
		<!-- "ant build" on chiba-web code in temp.build.dir -->
		<ant antfile="build.xml" dir="${temp.build.dir}" target="deploy-prepare" inheritAll="false" inheritRefs="false"/>

		<!-- create a JAR of Chiba Web classes and place this in lib -->
		<jar basedir="${temp.build.dir}/build/WEB-INF/classes" destfile="${lib.dir}/${chiba.web.name}-${chiba.web.version}.jar" />		
		
		<!-- copy Chiba Web dependency JAR files to our lib folder -->
		<copy description="copy Chiba Web dependencies" todir="${lib.dir}">
			<fileset dir="${temp.build.dir}/lib">
				<include name="commons-fileupload*.jar"/>
				<include name="dwr*.jar"/>
			</fileset>
		</copy>

		<!-- copy XFormsFilter servlet dependency JAR file to our lib folder -->
		<copy description="copy XFormsFilter dependencies" file="${temp.build.dir}/lib/servlet-api-2.5.jar" todir="${lib.dir}"/>
		
		<!-- copy Chiba Web's default.xml to chiba.default.xml -->
		<copy description="copy Chiba Web's default.xml" file="${temp.build.dir}/build/WEB-INF/chiba-config.xml" tofile="chiba.default.xml"/>
		
		<!-- copy Chiba Web's xslt's -->
		<copy description="copy Chiba Web's default XSLT's" todir="${xslt.dir}">
			<fileset dir="${temp.build.dir}/build/resources/xslt">
				<include name="html4.xsl"/>
				<include name="html-form-controls.xsl"/>
				<include name="ui.xsl"/>
			</fileset>
		</copy>
		
		<!-- copy Chiba's CSS -->
		<copy description="copy Chiba Web's default CSS" file="${temp.build.dir}/build/resources/styles/xforms.css" todir="${styles.dir}"/>
		
		<!-- remove temporary build directory -->
		<delete dir="${temp.build.dir}"/>
	</target>
	
</project>
