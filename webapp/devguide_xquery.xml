<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<book>
    <bookinfo>
        <graphic fileref="logo.jpg"/>
        <productname>Open Source Native XML Database</productname>
        <title>Developer's Guide</title>
        <date>November 2009</date>
        <author>
            <firstname>Wolfgang M.</firstname>
            <surname>Meier</surname>
            <affiliation>
                <address format="linespecific">
                    <email>wolfgang at exist-db.org</email>
                </address>
            </affiliation></author>
    </bookinfo>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sidebar.xml"/>
    <chapter id="ch01">
        <title>Developer's Guide</title>
        <section id="sectXQuery">
            <title>Writing Web Applications using XQuery</title>
            <para>Not only is XQuery a powerful query language, it is also a functional programming
                language with strong typing features, and can therefore be used to implement the
                entire processing logic of a web application. eXist provides preinstalled library
                modules for getting request parameters, getting/setting session attributes, encoding
                URLs and so on. The directory <filename>extensions/modules</filename> in the eXist
                distribution contains even more extension modules, e.g. for sending mails,
                generating thumbnails or retrieving data from an SQL database. There's also a
                complete, usable HTTP client implemented as an XQuery module.</para>
            <para>XQuery is powerful enough to replace JSP or PHP as a server-side language. We
                don't say that PHP or JSP are bad in any way. But if you start writing XQueries, you
                may soon find it easier to write everything in XQuery (maybe with the help of some
                XSLT) and stay within the XML world. The XSLT functions make it easy to prepare the
                results of an XQuery for presentation (for transformations, XSLT is often more
                convenient than XQuery, though XQuery could be used as well). Version 1.4 even
                provides a lightweight <ulink url="urlrewrite.xml">MVC (model-view-controller)
                    framework</ulink> and allows you to properly customize and rewrite the URLs the
                user sees.</para>
            <para>Instead of directly producing HTML output, "XQuerylets" can also be designed as
                self-contained services which deliver XML data to applications on the client.
                Creating AJAX applications with eXist is straight-forward. No complex framework is
                required on the server. No need for an additional persistence layer. XQuery
                integrates it all.</para>
            <para>Beyond the simple examples, the distribution contains a number of web applications
                which can be used as a starting point to learn more about XQuery as a server-side
                language, e.g. the web-based <ulink url="admin/admin.xql">admin interface</ulink>,
                which doesn't use any AJAX but demonstrates various extension functions to
                manipulate the database</para>
            <section>
                <title>Executing XQueries on the Server</title>
                <para>eXist provides 3 different ways (if you include Atom, there are even 4) to
                    call an XQuery over the web:</para>
                <variablelist>
                    <varlistentry>
                        <term>XQueryServlet</term>
                        <listitem>
                            <para>The XQueryServlet reads an XQuery script from the file system,
                                usually from the directory in which the web application resides, and
                                executes it with the current HTTP context. The result of the query
                                is returned as the content of the HTTP response.</para>
                            <para>Using the XQueryServlet is thus similar to calling a JSP page or
                                PHP script, which resides on the file system of the server.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>REST Server</term>
                        <listitem>
                            <para>The <ulink url="devguide_rest.xml#serialization">REST
                                    servlet</ulink> can be used to execute <emphasis>stored
                                    XQueries</emphasis> on the server! If the target resource of a
                                    <option>GET</option> or <option>POST</option> request is a
                                binary document with mime-type <option>application/xquery</option>,
                                the REST server will try to load and execute this resource with the
                                current HTTP context.</para>
                            <para>This is a very powerful concept as it allows you to store entire
                                web applications into the database. Links to images or other
                                resources will be resolved relative to the database collection in
                                which the called XQuery is stored.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section>
                <title>XQueryServlet </title>
                <para>eXist generates HTML web pages from XQuery files via the
                    XQueryServlet. With this Servlet the compiled XQuery script is stored in a cache for future use.
                    For this, eXist compiles XQuery into a tree of expression objects, which can be
                    repeatedly executed. This code will only be recompiled if the source file has
                    changed.</para>
                <para>The XQueryServlet provides initialization parameters
                    to set the username and password used for requests. However, the code will also
                    check if the current HTTP session contains the session attributes
                        <option>user</option> and <option>password</option>. If so, the session
                    settings will overwrite any previous settings. For more information on changing
                    user identities, see the <ulink url="xquery/login.xql">Session Example</ulink>.
                    The user identity under which the current query executes can also be changed
                    from within the query itself, using the <methodname>xmldb:login()</methodname>
                    function.</para>
                <variablelist>
                    <varlistentry>
                        <term>XQueryServlet</term>
                        <listitem>
                            <para>This servlet responds to URL-patterns (e.g. <filename
                                    >*.xql</filename> and <filename>*.xqy</filename>) as defined in
                                the <filename>web.xml</filename> configuration file of the
                                application. The servlet will interpret this pattern as pointing to
                                a valid XQuery file. The XQuery file is then loaded, compiled and
                                executed with the current HTTP context. The results are then sent to
                                the client in the content of the HTTP response.</para>
                            <para>The <option>Content-Type</option> header of the HTTP response will
                                be set to the value of the <option>media-type</option> serialization
                                property defined by the XQuery (see <ulink
                                    url="xquery.xml#serialization">serialization
                                parameters</ulink>).</para>
                            <para>To use the servlet, you must define the URL-patterns for your web
                                application by adding the following to the <filename
                                    >WEB-INF/web.xml</filename> configuration file:</para>
                            <example>
                                <title>Configuration for the Servlet</title>
                                <programlisting><markup><![CDATA[
<web-app>
    <display-name>eXist Server</display-name>
    <description>eXist Server Setup</description>
    
    <servlet>
        <servlet-name>org.exist.http.servlets.XQueryServlet</servlet-name>
        <servlet-class>org.exist.http.servlets.XQueryServlet</servlet-class>

        <init-param>
            <param-name>uri</param-name>
            <param-value>xmldb:exist:///db</param-value>
        </init-param>
    </servlet>
    
    <servlet-mapping>
	  <servlet-name>org.exist.http.servlets.XQueryServlet</servlet-name>
	  <url-pattern>*.xql</url-pattern>
    </servlet-mapping>
</web-app>
]]></markup></programlisting>
                            </example>
                            <para>This will configure the servlet to respond to any URL-pattern
                                ending with the <option>.xql</option> file extension as specified in
                                    <sgmltag>servlet-mapping</sgmltag>. Note that the
                                    <option>.xq</option> is specifically NOT used for the
                                    <sgmltag>url-pattern</sgmltag> definition so as not to interfere
                                with Cocoon examples, which exclusively use this file extension.
                                Also note that the <option>uri</option> parameter in
                                    <sgmltag>init-param</sgmltag> specifies the <filename
                                    >XML:DB</filename> root collection used by the servlet. To
                                configure this parameter to have the servlet access a remote
                                database, follow instructions provided in the <ulink
                                    url="deployment.xml">deployment docs</ulink>.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section>
                <title>A Simple Example</title>
                <para>To illustrate the use of the XQueryServlet and the HTTP extension functions,
                    let's have a look at a very basic example: a simple <ulink
                        url="xquery/guess.xql">number guessing</ulink> game running on the server.
                    The source code for this game is found in <filename
                        >webapp/xquery/guess.xql</filename>. As the file extension indicates, this
                    particular script is processed by the XQueryServlet. The full script is as
                    follows:</para>
                <example>
                    <title>Guess a Number</title>
                    <programlisting language="xquery"><![CDATA[
xquery version "1.0";
(: $Id$ :)

import module namespace request="http://exist-db.org/xquery/request";
import module namespace session="http://exist-db.org/xquery/session";
import module namespace util="http://exist-db.org/xquery/util";

declare function local:random($max as xs:integer) 
as empty()
{
    let $r := ceiling(util:random() * $max) cast as xs:integer
    return (
        session:set-attribute("random", $r),
        session:set-attribute("guesses", 0)
    )
};

declare function local:guess($guess as xs:integer,
$rand as xs:integer) as element()
{
    let $count := session:get-attribute("guesses") + 1
    return (
        session:set-attribute("guesses", $count),
        if ($guess lt $rand) then
            <p>Your number is too small!</p>
        else if ($guess gt $rand) then
            <p>Your number is too large!</p>
        else
            let $newRandom := local:random(100)
            return
                <p>Congratulations! You guessed the right number with
                {$count} tries. Try again!</p>
    )
};

declare function local:main() as node()?
{
    session:create(),
    let $rand := session:get-attribute("random"),
        $guess := xs:integer(request:get-parameter("guess", ()))
    return
		if ($rand) then 
			if ($guess) then
				local:guess($guess, $rand)
			else
				<p>No input!</p>
		else 
		    local:random(100)
};

<html>
    <head><title>Number Guessing</title></head>
    <body>
        <form action="{session:encode-url(request:get-uri())}">
            <table border="0">
                <tr>
                    <th colspan="2">Guess a number</th>
                </tr>
                <tr>
                    <td>Number:</td>
                    <td><input type="text" name="guess" size="3"/></td>
                </tr>
                <tr>
                    <td colspan="2" align="left"><input type="submit"/></td>
                </tr>
            </table> 
        </form>
        { local:main() }
        <p><small>View <a href="guess.xql?_source=yes">source code</a></small></p>
    </body>
</html>
]]></programlisting>
                </example>
                <para>The mainline of this script simply creates an HTML document with a form. Since
                    we need to store some information in the HTTP session, the
                        <option>action</option> link of the form is encoded with the current session
                    ID (the first time the script is called there will be no session yet, but that's
                    not a problem). The main application logic is called in line 68:</para>
                <synopsis language="xquery">{ local:main() }</synopsis>
                <para>The <methodname>local:main()</methodname> function first calls
                        <methodname>session:create()</methodname> to create a session if it has not
                    already been generated before. The script uses two session attributes:</para>
                <variablelist>
                    <varlistentry>
                        <term>random</term>
                        <listitem>
                            <para>stores the random number the user should guess</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>guesses</term>
                        <listitem>
                            <para>keeps track of the number of attempts</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>If the session attribute "random" is empty, we need to create a new random
                    number first. This is done by calling
                    <methodname>local:random()</methodname>:</para>
                <synopsis language="xquery">
<![CDATA[declare function local:random($max as xs:integer) 
as empty()
{
    let $r := ceiling(util:random() * $max) cast as xs:integer
    return (
        session:set-attribute("random", $r),
        session:set-attribute("guesses", 0)
    )
};]]></synopsis>
                <para><methodname>local:random()</methodname> generates a new random and stores it
                    into the session. The "guesses" session attribute is reset to 0.</para>
                <para>Back to <methodname>local:main()</methodname>: if <parameter>$rand</parameter>
                    is set, the function checks if the user entered a guess, which should have been
                    passed in the request parameter "guess". If a guess has been made, it needs to
                    be checked by calling <methodname>local:guess()</methodname>:</para>
                <synopsis language="xquery">
<![CDATA[declare function local:guess($guess as xs:integer,
$rand as xs:integer) as element()
{
    let $count := session:get-attribute("guesses") + 1
    return (
        session:set-attribute("guesses", $count),
        if ($guess lt $rand) then
            <p>Your number is too small!</p>
        else if ($guess gt $rand) then
            <p>Your number is too large!</p>
        else
            let $newRandom := local:random(100)
            return
                <p>Congratulations! You guessed the right number with
                {$count} tries. Try again!</p>
    )
};]]></synopsis>
                <para>The function checks the guess and returns an HTML paragraph to tell the user
                    if the guess was too high or too low. If the numbers match, a new random is
                    generated.</para>
            </section>
            <section id="storedxq">
                <title>Using the REST Server and Stored XQueries</title>
                <para>Instead of executing XQueries on the file system, one can also use eXist's
                    REST-style HTTP interface to call queries which are stored in a database
                    collection. For the document to be recognized as an XQuery resource, the
                    following two conditions need to be met:</para>
                <orderedlist>
                    <listitem>
                        <para>the XQuery document should be stored as a <emphasis>binary
                                resource</emphasis></para>
                    </listitem>
                    <listitem>
                        <para>the <emphasis>mime-type</emphasis> of the resource has to be
                                <option>application/xquery</option>. The Java admin client will
                            usually assign this mime-type automatically. If in doubt, use the Java
                            client to check the resource properties:</para>
                        <screenshot>
                            <graphic fileref="resources/bin-properties.png"/>
                        </screenshot>
                    </listitem>
                </orderedlist>
                <para>As an example, you can use the above number-guessing game. Store the XQuery
                    file into a database collection, e.g. as <filename
                    >/db/test/guess.xql</filename>.Next, point you web browser to the REST
                    URL:</para>
                <synopsis>
                    <ulink url="rest/db/test/guess.xql">http://localhost:8080/exist/rest/db/test/guess.xql</ulink>
                </synopsis>
                <para>However, what you see is probably not what you expected: depending on your web
                    browser, you will get the raw XML (or rather HTML) of the page. Obviously, the
                    browser does not recognize it as HTML yet. This happens because, by default, the
                    REST server sets the <parameter>Content-Type</parameter> header in the HTTP
                    response to "application/xml". We thus need to change this to "text/html" to tell the
                    web browser that the received content can be displayed as HTML.</para>
                <para>The REST server copies the value for the content type header from the XQuery
                    serialization parameter <option>media-type</option>. You can set this parameter
                    in the XQuery itself. Just add a line</para>
                <synopsis language="xquery">declare option exist:serialize "method=xhtml media-type=text/html";</synopsis>
                <para>after the "import module" statements and before the first function
                    declaration. With this change in place, the XQuery output should properly
                    display as HTML and the game should work as before.</para>
            </section>
        </section>
    </chapter>
</book>
