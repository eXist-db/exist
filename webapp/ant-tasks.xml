<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<book> 
    <bookinfo>
        <graphic fileref="logo.jpg"/>
        
        <productname>Open Source Native XML Database</productname>
        <title>Ant Tasks</title>
        <date>September 2009</date>
        <author>
            <firstname>Wolfgang M.</firstname>
            <surname>Meier</surname>
            <affiliation>
                <address format="linespecific"><email>wolfgang at exist-db.org</email></address>
            </affiliation>
        </author>
        <author>
           <firstname>Peter</firstname>
           <surname>Klotz</surname>
           <affiliation>
               <address format="linespecific">
                   <email>peter.klotz@blue-elephant-systems.com</email>
               </address>
           </affiliation>
      </author>
      <author>
          <firstname>Sabine</firstname>
          <surname>Meier</surname>
          <affiliation>
              <address format="linespecific">
                  <email>sabine@exist-db.org</email>
              </address>
          </affiliation>
      </author>
      <author>
          <firstname>Leif-JÃ¶ran</firstname>
          <surname>Olsson</surname>
          <affiliation>
              <address format="linespecific">
                  <email>ellefj@gmail.com</email>
              </address>
          </affiliation>
      </author>
       <author>
          <firstname>James</firstname>
          <surname>Fuller</surname>
          <affiliation>
              <address format="linespecific">
                  <email>jim.fuller@webcomposite.com</email>
              </address>
          </affiliation>
      </author>
        
    </bookinfo>
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sidebar.xml"/>
    <chapter>
        <title>Ant Tasks</title>

      <para>eXist provides a library for the
        <ulink url="http://ant.apache.org">Ant</ulink> build tool to automate common
        tasks like backup/restore or importing a bunch of files. To use this library
        you need at least Ant 1.6, which is included in the eXist distribution (if you
        installed the eXist source code).
      </para>

      <para>In your build file, import the eXist tasks as follows:</para>
        
        <example>
            <title>Import the Tasks</title>
            
            <programlisting>
<markup><![CDATA[<typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
    <classpath refid="classpath.core"/>
</typedef>]]></markup></programlisting>
        </example>
        
        <para> The classpath has to be defined before as follows</para>
        <example>
            <title>Definition of Classpath</title>
        
        <programlisting>
<markup><![CDATA[<path id="classpath.core">
    <fileset dir="${server.dir}/lib/core">
        <include name="*.jar"/>
    </fileset>
    <pathelement path="${server.dir}/exist.jar"/>
    <pathelement path="${server.dir}/exist-optional.jar"/>
</path>]]></markup></programlisting>
        </example>
        
        <note><para>For a working example have a look into the file
            <filename>webapp/xqts/build.xml </filename>, 
            which is used to prepare the database for running the xquery testsuite.</para></note>
        
        
        <para>All tasks share the following common attributes:</para>

        <variablelist>
            <varlistentry>
                <term>uri</term>
                <listitem>
                    <para>An XMLDB URI specifying the database collection.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>initdb</term>
                <listitem>
                    <para>Setting this option to "true" will automatically
                    initialize a database instance if the uri points to an
                    embedded database.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>user</term>
                <listitem>
                    <para>The user to connect with (default: guest).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>password</term>
                <listitem>
                    <para>Password for the user (default: guest).</para>
                </listitem>
            </varlistentry>
          <varlistentry>
               <term>failonerror</term>
               <listitem>
                   <para>Whether or not a error should stop the build execution</para>
               </listitem>
           </varlistentry>
       </variablelist>

        <section>
            <title>Storing Documents</title>

          <para>The store task uploads and stores the specified documents into
           the database. Documents are specified through one or more filesets or as single source file.
           The following attributes are recognized:
          </para>
            <example>
                <title>Storing Documents</title>

                <programlisting>
<markup><![CDATA[<xdb:store xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays"
    createcollection="true">
    <fileset dir="samples/shakespeare"> 
        <include name="*.xml"/>
        <include name="*.xsl"/>
    </fileset>
</xdb:store>
<xdb:store xmlns:xdb="http://exist-db.org/ant"
  uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays"
  createcollection="true" srcfile="samples/shakespeare/hamlet.xml"/>]]></markup></programlisting>
            </example>

            <variablelist>
                <varlistentry>
                    <term>createcollection</term>
                    <listitem>
                        <para>If set to "true", a non-existing base collections will
                        be automatically created.</para>
                    </listitem>
                </varlistentry>
              <varlistentry>
                  <term>createsubcollections</term>
                  <listitem>
                      <para>If set to "true", any non-existing sub-collections will
                      be automatically created.</para>
                  </listitem>
              </varlistentry>
                <varlistentry>
                    <term>type</term>
                    <listitem>
                        <para>The type of the resource: either "xml" or "binary". If
                        "binary", documents will be stored as binary resources. If it
			is unset, it will be guessed from identified MIME type</para>
                    </listitem>
                </varlistentry>
              <varlistentry>
                  <term>defaultmimetype</term>
                  <listitem>
                      <para>The default MIME type to use when the resource MIME type cannot be identified. If
                      it is not set, binary one (application/octet-stream) is the default.</para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>forcemimetype</term>
                  <listitem>
                      <para>Use this attribute when you want to force an specific MIME type. You should also set
		      'type' attribute, because resource kind guessing is disabled in this mode.</para>
                  </listitem>
              </varlistentry>
                <varlistentry>
                    <term>mimetypesfile</term>
                    <listitem>
                        <para>The mime-types.xml file used by Ant eXist extension to identify the resource kind
			("binary" or "xml") and MIME type of the documents to store. If it is not set,
			it will used a default one which is either at eXist HOME installation or bundled
			inside the Ant eXist extension</para>
                    </listitem>
                </varlistentry>
              <varlistentry>
                  <term>srcfile</term>
                  <listitem>
                      <para>a single source file to store, use instead of filesets</para>
                  </listitem>
              </varlistentry>
            </variablelist>
        </section>
        <section>
            <title>Removing Documents/Collections</title>

            <para>The remove task removes a single resource or collection from
            the collection specified in the uri attribute.</para>
          <example>
              <title>Remove a Resource</title>
              <programlisting>
<markup><![CDATA[<xdb:remove xmlns:xdb="http://exist-db.org/ant"
  uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays" resource="hamlet.xml"/>]]></markup></programlisting>
          </example>
          <example>
              <title>Remove a Collection</title>
              <programlisting>
<markup><![CDATA[<xdb:remove xmlns:xdb="http://exist-db.org/ant"
  uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare" collection="plays"/>]]></markup></programlisting>
          </example>

            <variablelist>
                <varlistentry>
                    <term>collection</term>
                    <listitem>
                        <para>The name of the subcollection which should be removed.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>resource</term>
                    <listitem>
                        <para>The name of the resource which should be removed.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
      <section>
          <title>Creating Empty Collections</title>

          <para>The create task creates a single empty collection from
          the collection specified in the uri attribute.</para>
        <example>
            <title>Create a Collection</title>
            <programlisting>
<markup><![CDATA[<xdb:create xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare" collection="plays"/>]]></markup></programlisting>
        </example>

          <variablelist>
              <varlistentry>
                  <term>collection</term>
                  <listitem>
                      <para>The name of the subcollection which should be created.</para>
                  </listitem>
              </varlistentry>
          </variablelist>
      </section>
      <section>
          <title>Check Existence of Resource/Collection</title>

          <para>The exist task is a condition that checks whether a resource or
            collection as specified in the uri attribute.
            A ant target can be executed conditionally depending on the property set or not
            set by the condition.
          </para>
        <example>
            <title>Check a Collection</title>
            <programlisting language="xml">
<![CDATA[<condition property="exists">
    <xdb:exist xmlns:xdb="http://exist-db.org/ant"
        uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays" resource="hamlet.xml"/>
 </condition>]]></programlisting>
        </example>

          <variablelist>
              <varlistentry>
                  <term>resource</term>
                  <listitem>
                      <para>The name of the resource which should be checked.</para>
                  </listitem>
              </varlistentry>
          </variablelist>
      </section>
      <section>
          <title>List Resources/Collections</title>

          <para>The list task returns a list of all resources and/or conditions
            in the collection specified in the uri attribute.</para>
        <example>
            <title>List Resources</title>
            <programlisting>
<markup><![CDATA[<xdb:list xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays" resources="true" outputproperty="resources"/>]]></markup></programlisting>
        </example>
        <example>
            <title>List Collections</title>
            <programlisting>
<markup><![CDATA[<xdb:list xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare" collections="true" outputproperty="collections"/>]]></markup></programlisting>
        </example>

          <variablelist>
              <varlistentry>
                  <term>resources</term>
                  <listitem>
                      <para>If "true" lists resources</para>
                  </listitem>
              </varlistentry>
            <varlistentry>
                <term>collections</term>
                <listitem>
                    <para>If "true" lists collections</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>separator</term>
                <listitem>
                    <para>separator character for the returned list, default is ","</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>outputproperty</term>
                <listitem>
                    <para>name of a new ant property that will contain the result</para>
                </listitem>
            </varlistentry>
          </variablelist>
      </section>
      <section>
          <title>Copy a Resource/Collection</title>

          <para>The copy task copies a resource or collection to a new destination.</para>
        <example>
            <title>Copy a Resource</title>
            <programlisting>
<markup><![CDATA[<xdb:copy  xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays" resource="hamlet.xml" destination="sub"/>]]></markup></programlisting>
        </example>
        <example>
            <title>Copy a Collection</title>
            <programlisting>
<markup><![CDATA[<xdb:copy  xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare" collection="plays" destination="sub"/>]]></markup></programlisting>
        </example>

          <variablelist>
              <varlistentry>
                  <term>resource</term>
                  <listitem>
                      <para>The name of the resource which should be copied.</para>
                  </listitem>
              </varlistentry>
            <varlistentry>
                <term>collection</term>
                <listitem>
                    <para>The name of the collection which should be copied.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>destination</term>
                <listitem>
                    <para>The name of the destination collection to copy to.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>name</term>
                <listitem>
                    <para>The new name of the resource or collection in the destination.</para>
                </listitem>
            </varlistentry>
          </variablelist>
      </section>
      <section>
          <title>Move a Resource/Collection</title>

          <para>The move task moves a resource or collection to a new destination.</para>
        <example>
            <title>Move a Resource</title>
            <programlisting>
<markup><![CDATA[<xdb:move xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays" resource="hamlet.xml" destination="sub"/>]]></markup></programlisting>
        </example>
        <example>
            <title>Move a Collection</title>
            <programlisting>
<markup><![CDATA[<xdb:move xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare" collection="plays" destination="sub"/>]]></markup></programlisting>
        </example>

          <variablelist>
              <varlistentry>
                  <term>resource</term>
                  <listitem>
                      <para>The name of the resource which should be moved.</para>
                  </listitem>
              </varlistentry>
            <varlistentry>
                <term>collection</term>
                <listitem>
                    <para>The name of the collection which should be moved.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>destination</term>
                <listitem>
                    <para>The name of the destination collection to move to.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>name</term>
                <listitem>
                    <para>The new name of the resource or collection in the destination.</para>
                </listitem>
            </varlistentry>
          </variablelist>
      </section>
      <section>
           <title>Process an XPath Expression</title>

           <para>The xpath task executes an XPath expression.
             The output of the script is discarded, except when a destination file
             or output property is specified.
           </para>
           <para>The XQuery may either be specified through the query attribute
             or within the text content of the element. A optional namespace may be used
             for the query.
           </para>
           <example>
               <title>Process an XPath</title>
               <programlisting>
<markup><![CDATA[<xdb:xpath xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db" query="/example-queries/query"/>]]></markup></programlisting>
           </example>
           <para>The query task accepts the following attributes:</para>
           <variablelist>
               <varlistentry>
                   <term>query</term>
                   <listitem>
                       <para>The query to be processed.</para>
                   </listitem>
               </varlistentry>
             <varlistentry>
                 <term>resource</term>
                 <listitem>
                     <para>query a resource instead of a collection.</para>
                 </listitem>
             </varlistentry>
             <varlistentry>
                 <term>count</term>
                 <listitem>
                     <para>If "true" the number of found results is returned
                       instead of the results itself.
                     </para>
                 </listitem>
             </varlistentry>
             <varlistentry>
                 <term>outputproperty</term>
                 <listitem>
                     <para>return the results as a string in a new property.
                       In this case only the text of the result is returned.
                     </para>
                 </listitem>
             </varlistentry>
             <varlistentry>
                 <term>destfile</term>
                 <listitem>
                     <para>write the results of the query to a destination file.
                       In this case the whole XML fragments of the result is written to the file.
                       Care should be taken to get a wellformed document (e.g. one root tag).
                     </para>
                 </listitem>
             </varlistentry>
             <varlistentry>
                 <term>namespace</term>
                 <listitem>
                     <para>XML namespace to use for the query (optional).</para>
                 </listitem>
             </varlistentry>
           </variablelist>
       </section>
        <section>
            <title>Process an XQuery Expression</title>

            <para>The xquery task executes an XQuery expression. This task is
            primarily intended for transformations. The output of the script is
            discarded when no destination file or output property is specified.</para>
            <para>The XQuery may either be specified through the query attribute
            or within the text content of the element. You can also use the
            loadfile task to load the query from a file as in the following example:</para>
            <example>
                <title>Process an XQuery</title>
                <programlisting>
<markup><![CDATA[<loadfile property="xquery" srcFile="wzb.xq"/>
<xdb:xquery  xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db" query="${xquery}"/>]]></markup></programlisting>
            </example>
            <para>The query task accepts the following attributes:</para>
            <variablelist>
                <varlistentry>
                    <term>query</term>
                    <listitem>
                        <para>The query to be processed.</para>
                    </listitem>
                </varlistentry>
              <varlistentry>
                  <term>queryUri</term>
                  <listitem>
                      <para>The query to be processed specified as a URI.</para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>outputproperty</term>
                  <listitem>
                      <para>return the results as a string in a new property.</para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>destfile</term>
                  <listitem>
                      <para>write the results of the query to a destination file.</para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                   <term>queryfile</term>
                   <listitem>
                       <para>read the query from a file.</para>
                   </listitem>
               </varlistentry>
            </variablelist>
        </section>
      <section>
          <title>Extract a Resource/Collection</title>

          <para>The extract task dumps a resource or collection to a file or directory.</para>
        <example>
            <title>Extract a Resource</title>
            <programlisting>
<markup><![CDATA[<xdb:extract xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays" resource="hamlet.xml" destfile="/tmp/hamlet.xml"/>]]></markup></programlisting>
        </example>
        <example>
            <title>Extract a Collection</title>
            <programlisting>
<markup><![CDATA[<xdb:extract xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays" destdir="/tmp" subcollections="true" createdirectories="true"/>]]></markup></programlisting>
        </example>

          <variablelist>
              <varlistentry>
                  <term>resource</term>
                  <listitem>
                      <para>The name of the resource which should be extracted.</para>
                  </listitem>
              </varlistentry>
            <varlistentry>
                <term>subcollections</term>
                <listitem>
                    <para>If "true" all sub-collections of the specified collection
                      are extracted as well
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>destfile</term>
                <listitem>
                    <para>The name of the destination file to extract to.
                      Only supported when a resource is extracted.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>destdir</term>
                <listitem>
                    <para>The name of a destination directory to extract to.
                      Has to be used when extracting a collection.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>createdirectories</term>
                <listitem>
                    <para>If "true" directories for sub-collections will be created
                      Otherwise all extracted resources are written to the destination
                      directory directly.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>type</term>
                <listitem>
                    <para>Type of the resource to extract.
                      Only "xml" is supported currently.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>overwrite</term>
                <listitem>
                    <para>Set to true to force overwriting of files.
                    </para>
                </listitem>
            </varlistentry>
          </variablelist>
      </section>
        <section>
            <title>Backup</title>

            <para>Creates a backup of the specified database collection on the
            local disk. For example:</para>
            
            <example>
                <title>Backing up the System Collection</title>
                <programlisting>
<markup><![CDATA[<xdb:backup xmlns:xdb="http://exist-db.org/ant"
    uri="${backup.uri}/db/system"
    dir="${backup.dir}" user="${backup.user}" password="${backup.pass}"/>]]></markup></programlisting>
            </example>
            
            <para>creates a backup of the system collection.</para>
            
            <variablelist>
                <varlistentry>
                    <term>dir</term>
                    <listitem>
                        <para>The directory where backup files will be stored.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section>
            <title>Restore</title>

			<para>Restores database contents from a backup. The backup is read
			from location specified by the <option>dir</option> or
			<option>file</option> attributes. The <option>dir</option> attribute should point to
			a directory containing a valid backup, i.e. a directory with a
			__contents__.xml backup descriptor in it (e.g.
			<filename>/home/me/Backup/090228/db</filename>). The
			<option>file</option> attribute should specify a zip archive which
			contains the backup. The base attribute specifies the base XMLDB
			URI (i.e. the URI without collections) used for the restore.  The
			collection names will be read from the __contents__.xml
			file.</para>
            
            <variablelist>
                <varlistentry>
                    <term>dir</term>
                    <listitem>
                        <para>A directory containing a __content__.xml file to be used
                          for the restore.</para>
                    </listitem>
                </varlistentry>
				<varlistentry>
					<term>file</term>
					<listitem>
						<para>A zip file which contains the backup to be restored.
						</para>
					</listitem>
				</varlistentry>
            </variablelist>
            
            <para>The following example restores the /db/home collection:</para>
            
            <example>
                <title>Restore a Collection</title>
                <programlisting>
<markup><![CDATA[<xdb:restore xmlns:xdb="http://exist-db.org/ant"
    uri="xmldb:exist://localhost:8080/exist/xmlrpc" user="admin" password=""
    dir="${backup.dir}/db/home"/>]]></markup></programlisting>
            </example>
        </section>
      <section>
          <title>List Groups</title>
          <para>
            This task lists all groups defined in eXist.
          </para>

          <example>
              <title>Write list of groups to output property</title>
              <programlisting>
<markup><![CDATA[<xdb:groups xmlns:xdb="http://exist-db.org/ant"
    uri="${backup.uri}/db/system" outputproperty="groups"/>]]></markup></programlisting>
          </example>

          <variablelist>
              <varlistentry>
                  <term>outputproperty</term>
                  <listitem>
                      <para>Name of new property to write the output to.</para>
                  </listitem>
              </varlistentry>
            <varlistentry>
                <term>separator</term>
                <listitem>
                    <para>Separator character for output, by default "," (comma).</para>
                </listitem>
            </varlistentry>
          </variablelist>
      </section>
      <section>
           <title>List Users</title>
           <para>
             This task lists all users defined in eXist.
           </para>

           <example>
               <title>Write list of users to output property</title>
               <programlisting>
<markup><![CDATA[<xdb:users xmlns:xdb="http://exist-db.org/ant"
    uri="${backup.uri}/db/system" outputproperty="users"/>]]></markup></programlisting>
           </example>

           <variablelist>
               <varlistentry>
                   <term>outputproperty</term>
                   <listitem>
                       <para>Name of new property to write the output to.</para>
                   </listitem>
               </varlistentry>
             <varlistentry>
                 <term>separator</term>
                 <listitem>
                     <para>Separator character for output, by default ",".</para>
                 </listitem>
             </varlistentry>
           </variablelist>
       </section>
      <section>
            <title>Lock Resource</title>
            <para>
              This task locks a resource for a user.
            </para>

            <example>
                <title>Lock Resource</title>
                <programlisting>
<markup><![CDATA[<xdb:lock  xmlns:xdb="http://exist-db.org/ant"
    uri="${backup.uri}/db/shakespeare/plays" resource="hamlet.xml" name="guest"/>]]></markup></programlisting>
            </example>

            <variablelist>
                <varlistentry>
                    <term>resource</term>
                    <listitem>
                        <para>Name of resource to lock.</para>
                    </listitem>
                </varlistentry>
              <varlistentry>
                  <term>name</term>
                  <listitem>
                      <para>Name of user to lock the resource for.</para>
                  </listitem>
              </varlistentry>
            </variablelist>
        </section>
      <section>
            <title>Add User</title>
            <para>
              This task adds a user.
            </para>

            <example>
                <title>Add User</title>
                <programlisting>
<markup><![CDATA[<xdb:adduser xmlns:xdb="http://exist-db.org/ant"
uri="${backup.uri}/db" name="guest" secret="ToPSecreT" primaryGroup="users" />]]></markup></programlisting>
            </example>

            <variablelist>
              <varlistentry>
                  <term>name</term>
                  <listitem>
                      <para>Name of the new user.</para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>home</term>
                  <listitem>
                      <para>Name of collection that is home collection.</para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>secret</term>
                  <listitem>
                      <para>The password of the new user.</para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>primaryGroup</term>
                  <listitem>
                      <para>Name of primary group of the new user.</para>
                  </listitem>
              </varlistentry>
            </variablelist>

           <note>
            <para> This task does not seem to work currently!</para>
           </note>
        </section>
      <section>
            <title>Remove User</title>
            <para>
              This task removes a user.
            </para>

            <example>
                <title>Remove User</title>
                <programlisting>
<markup><![CDATA[<xdb:rmuser xmlns:xdb="http://exist-db.org/ant"
    uri="${backup.uri}/db" name="guest"/>]]></markup></programlisting>
            </example>

            <variablelist>
              <varlistentry>
                  <term>name</term>
                  <listitem>
                      <para>Name of the user to remove.</para>
                  </listitem>
              </varlistentry>
            </variablelist>
        </section>
        <section>
            <title>Change resource permissions (chmod)</title>
            <para>
              This task changes the permissions of a resource.
						   </para>

            <example>
                <title>Chmod</title>
                <programlisting>
    <markup><![CDATA[<xdb:chmod xmlns:xdb="http://exist-db.org/ant"
        uri="${backup.uri}/db/shakespear/plays" resource="hamlet.xml" mode="group=-write,other=-write"/>]]></markup></programlisting>
            </example>

        <variablelist>
          <varlistentry>
              <term>resource</term>
              <listitem>
                  <para>Name of resource to modify.</para>
              </listitem>
          </varlistentry>
          <varlistentry>
              <term>mode</term>
              <listitem>
                  <para>Permission modification string. The string has the following syntax:</para>
		  <synopsis>[user|group|other]=[+|-][read|write|update]</synopsis>
		  <para>For example, to set read and write permissions for the group, but not for others:</para>
		  <synopsis>group=+read,+write,other=-read,-write</synopsis>
		  <para>The new settings are or'ed with the existing settings.</para>
              </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section>
            <title>Change Owner of resource/collection (chown)</title>
            <para>
              This task changes the owner of a resource or collection.
            </para>

            <example>
                <title>Chown</title>
                <programlisting>
<markup><![CDATA[<xdb:chown xmlns:xdb="http://exist-db.org/ant"
uri="${backup.uri}/db/shakespear/plays" resource="hamlet.xml" name="guest" group="guest"/>]]></markup></programlisting>
            </example>

            <variablelist>
              <varlistentry>
                  <term>name</term>
                  <listitem>
                      <para>Name of user to own the resource/collection.</para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>group</term>
                  <listitem>
                      <para>Name of group to own the resource/collection.</para>
                  </listitem>
              </varlistentry>
            </variablelist>
        </section>
        <section>
            <title>Database Shutdown</title>
            <para>The shutdown task is required if you use the database in embedded
            mode. It will try to shut down the database instance listening at
            the provided URI.</para>
        </section>
        <section>
            <title>Example Ant script - Simple Data Migration</title>
            <para>This example Ant script shows how to copy data from two different instances of eXist (remote or local).</para>
            <para>To use supply your own values for the source and target user, pass, and url properties. Run the default target 'migrate'
            to copy data from one instance of eXist to another.</para><example>
                <title>Simple Data Migration</title>
                <programlisting>
<markup><![CDATA[<?xml version='1.0'?>
<project name="exist-data-migrate" default="migrate" xmlns:xdb="http://exist-db.org/ant">
<description>Migrate data from one instance of eXist to another</description>

<!-- edit these properties //-->
<property name="p.exist.dir" value="/opt/eXist-1.0"/>
<property name="p.source.exist.url" value="xmldb:exist://www.example.org:8080/exist/xmlrpc/db/"/>
<property name="p.source.user" value="myusername"/>
<property name="p.source.pass" value="myuserpass"/>
<property name="p.target.exist.url" value="xmldb:exist://www.example.org:8680/exist/xmlrpc/db/"/>
<property name="p.target.user" value="myotherusername"/>
<property name="p.target.pass" value="myotheruserpass"/>
<property name="p.export.dir" location="export"/>

<!-- import eXist-db tasks -->
<typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
<classpath>
<fileset dir="${p.exist.dir}/lib/core">
    <include name="*.jar"/>
</fileset>
<fileset dir="${p.exist.dir}/lib/endorsed">
    <include name="*.jar"/>
</fileset>
<fileset dir="${p.exist.dir}/lib/optional">
    <include name="*.jar"/>
</fileset>
<pathelement location="${p.exist.dir}/exist.jar"/>
<pathelement location="${p.exist.dir}/exist-optional.jar"/>
</classpath>
</typedef>

<target name="clean" >
    <delete dir="${p.export.dir}"/>
    <mkdir dir="${p.export.dir}"/>
</target>

<target name="migrate" depends="extract-source, load-target">
    <echo message="migration complete"/>
</target>

<target name="extract-source" depends="clean" description="export xml from source eXist instance">

<xdb:extract uri="${p.source.exist.url}"
user="${p.source.user}"
password="${p.source.pass}"
destdir="${p.export.dir}"/>

</target>

<target name="load-target" description="store xml to
target eXist instance">

<xdb:store uri="${p.target.exist.url}"
user="${p.target.user}"
password="${p.target.pass}"
createcollection="true"
createsubcollections="true">

<fileset dir="${p.export.dir}"/>
</xdb:store>

</target>

<target name="check-env"
description="check env and dependencies are
installed">
</target>

</project>
        ]]></markup></programlisting>
            </example>
            <para> You can find this Ant script under the samples/ant directory.</para>
        </section>
    </chapter>
</book>
