<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<book>
    <bookinfo>
        <graphic fileref="logo.jpg"/>
        <productname>Open Source Native XML Database</productname>
        <title>Developer's Guide</title>
        <author>
            <firstname>Wolfgang M.</firstname>
            <surname>Meier</surname>
            <affiliation>
                <address format="linespecific">
                    <email>wolfgang at exist-db.org</email>
                </address>
            </affiliation>
        </author>
    </bookinfo>
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sidebar.xml"/>
    <chapter id="ch01">
        <title>Developer's Guide</title>
        <section>
            <title>Using the XML-RPC API</title>
            <para>XML-RPC (XML Remote Procedural Call) provides a simple way to call remote
                procedures from a wide variety of programming languages. eXist's XML-RPC API makes
                it easy to access eXist from other applications, CGI scripts, PHP, JSP and more. For
                more information on XML-RPC see <ulink url="http://www.xmlrpc.org"
                >www.xmlrpc.org</ulink>. For the Java server, eXist uses the XML-RPC library created
                by Hannes Wallnoefer which recently has moved to Apache (see: <ulink
                    url="http://xml.apache.org/xmlrpc">http://xml.apache.org/xmlrpc</ulink>). Perl
                examples use the RPC::XML package, which should be available at every CPAN mirror
                (see <ulink url="http://www.cpan.org">CPAN</ulink>).</para>
            <para>The following is a small example, which shows how to talk to eXist from Java using
                the Apache XML-RPC library. This example can be found in <filename moreinfo="none"
                    >samples/org/exist/examples/xmldb/Retrieve.java</filename>.</para>
            <example>
                <title>Retrieving a document from eXist</title>
                <programlisting format="linespecific" language="java"> <![CDATA[
public class Retrieve {

protected final static String uri = 
    "http://localhost:8080/exist/xmlrpc";

protected static void usage() {
    System.out.println( "usage: org.exist.examples.xmlrpc.Retrieve " +
        "path-to-document" );
    System.exit( 0 );
}

public static void main( String args[] ) throws Exception {
    if ( args.length < 1 ) {
        usage();
    }
    XmlRpc.setEncoding("UTF-8");
    XmlRpcClient xmlrpc = new XmlRpcClient( uri );
    Hashtable options = new Hashtable();
    options.put("indent", "yes");
    options.put("encoding", "UTF-8");
    options.put("expand-xincludes", "yes");
    options.put("highlight-matches", "elements");
    
    Vector params = new Vector();
    params.addElement( args[0] ); 
    params.addElement( options );
    String xml = (String)
        xmlrpc.execute( "getDocumentAsString", params );
    System.out.println( xml );
}
}
]]></programlisting>
            </example>
            <para>As shown above, the <methodname>execute</methodname> method of
                    <classname>XmlRpcClient</classname> expects as its parameters a method (passed
                as a string) to call on the server and a Vector of parameters to pass to this
                executed method. In this example, the method
                <methodname>getDocumentAsString</methodname> is called as the first parameter, and a
                Vector <parameter>params</parameter>. Various output properties can also be set
                through the hashtable argument (see the method description below). Since all
                parameters are passed in a Vector, they are necessarily Java objects.</para>

            <para>XML-RPC messages (requests and responses sent between the server and client) are
                themselves XML documents. In some cases, these documents may use a character
                encoding which is in conflict with the encoding of the document we would like to
                receive. It is thus important to set the <emphasis>transport</emphasis> encoding to
                    <option>UTF-8</option> as shown in the above example. However, conflicts may
                persist depending on which client library is used. To avoid such conflicts, eXist
                provides alternative declarations for selected methods, which expect string
                parameters as byte arrays. The XML-RPC library will send them as binary data (using
                Base64 encoding for transport). With this approach, document encodings are preserved
                regardless of the character encoding used by the XML-RPC transport layer.</para>
            <note>
                <para>Please note that the XML-RPC API uses <option>int</option> to encode booleans.
                    This is because some clients do not correctly pass boolean parameters.</para>
            </note>
            <para>Querying is as easy using XML-RPC. The following example:</para>
            <example>
                <title>Sending a Query to eXist (XML-RPC)</title>
                <programlisting format="linespecific" language="java">
<![CDATA[#!/usr/bin/perl
use RPC::XML;
use RPC::XML::Client;

$query = <<END;
for \$speech in //SPEECH[LINE &= 'tear*']
order by \$speech/SPEAKER[1]
return
    \$speech
END

$URL = "http://guest:guest\@localhost:8080/exist/xmlrpc";
print "connecting to $URL...\n";
$client = new RPC::XML::Client $URL;

# Output options
$options = RPC::XML::struct->new(
    'indent' => 'yes', 
    'encoding' => 'UTF-8',
    'highlight-matches' => 'none');

$req = RPC::XML::request->new("query", $query, 20, 1, $options);
$response = $client->send_request($req);
if($response->is_fault) {
    die "An error occurred: " . $response->string . "\n";
}
print $response->value;
]]></programlisting>
            </example>
            <para>You will find the source code of this example in
                    <filename>samples/xmlrpc/search2.pl</filename>. It uses the simple query method,
                which executes the query and returns a document containing the specified number of
                results. However, the result set is not cached on the server. </para>
            <para>The following example calls the <methodname>executeQuery</methodname> method,
                which returns a unique session id. In this case, the actual results are cached on
                the server and can be retrieved using the <methodname>retrieve</methodname> method. </para>
            <example>
                <title>Another Query Examplet (XML-RPC)</title>
                <programlisting format="linespecific" language="java"><![CDATA[use RPC::XML;
#!/usr/bin/perl

use RPC::XML;
use RPC::XML::Client;

# Execute an XQuery through XML-RPC. The query is passed
# to the "executeQuery" method, which returns a handle to
# the created result set. The handle can then be used to
# retrieve results.

$query = <<END;
for \$speech in //SPEECH[LINE &= 'corrupt*']
order by \$speech/SPEAKER[1]
return
    \$speech
END

$URL = "http://guest:guest\@localhost:8080/exist/xmlrpc";
print "connecting to $URL...\n";
$client = new RPC::XML::Client $URL;

# Execute the query. The method call returns a handle
# to the created result set.
$req = RPC::XML::request->new("executeQuery", 
    RPC::XML::base64->new($query), 
	"UTF-8");
$resp = process($req);
$result_id = $resp->value;

# Get the number of hits in the result set
$req = RPC::XML::request->new("getHits", $result_id);
$resp = process($req);
$hits = $resp->value;
print "Found $hits hits.\n";

# Output options
$options = RPC::XML::struct->new(
    'indent' => 'no', 
    'encoding' => 'UTF-8');
# Retrieve query results 1 to 10
for($i = 1; $i < 10 && $i < $hits; $i++) {
    $req = RPC::XML::request->new("retrieve", $result_id, $i, $options);
    $resp = process($req);
    print $resp->value . "\n";
}

# Send the request and check for errors
sub process {
    my($request) = @_;
    $response = $client->send_request($request);
    if($response->is_fault) {
        die "An error occurred: " . $response->string . "\n";
    }
    return $response;
}
]]></programlisting>
            </example>
        </section>
        <section>
            <title>XML-RPC: Available Methods</title>
            <para>This section gives you an overview of the methods implemented by the eXist XML-RPC
                server. Only the most common methods are presented here. For a complete list see the
                Java interface <ulink url="api/org/exist/xmlrpc/RpcAPI.html">RpcAPI.java</ulink>.
                Note that the method signatures are presented below using Java data types. Also note
                that some methods like <methodname>getDocument()</methodname> and
                    <methodname>retrieve()</methodname> accept a struct to specify optional output
                properties.</para>

            <para>In general, the following optional fields for methods are supported:</para>

            <variablelist>

                <varlistentry>
                    <term>indent</term>
                    <listitem>
                        <para>Returns indented pretty-print XML. [<option>yes | no</option>]</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>encoding</term>
                    <listitem>
                        <para>Specifies the character encoding used for the output. If the method
                            returns a string, only the XML declaration will be modified
                        accordingly.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>omit-xml-declaration</term>
                    <listitem>
                        <para>Add XML declaration to the head of the document. [<option>yes |
                            no</option>]</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>expand-xincludes</term>
                    <listitem>
                        <para>Expand XInclude elements. [<option>yes | no</option>]</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>process-xsl-pi</term>
                    <listitem>
                        <para>Specifying "yes": XSL processing instructions in the document will be
                            processed and the corresponding stylesheet applied to the output.
                                [<option>yes | no</option>]</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>highlight-matches</term>
                    <listitem>
                        <para>Database adds special tags to highlight the strings in the text that
                            have triggered a fulltext match. Set to "<option>elements</option>" to
                            highlight matches in element values, "<option>attributes</option>" for
                            attribute values or "<option>both</option>" for both elements and
                            attributes.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>stylesheet</term>
                    <listitem>
                        <para>Use this parameter to specify an XSL stylesheet which should be
                            applied to the output. If the parameter contains a relative path, the
                            stylesheet will be loaded from the database.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>stylesheet-param.key1 ... stylesheet-param.key2</term>
                    <listitem>
                        <para>If a stylesheet has been specified with <option>stylesheet</option>,
                            you can also pass it parameters. Stylesheet parameters are recognized if
                            they start with the prefix <option>stylesheet-param.</option>, followed
                            by the name of the parameter. The leading
                            "<option>stylesheet-param.</option>" string will be removed before the
                            parameter is passed to the stylesheet.</para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <section>
                <title>Retrieving documents</title>
                <itemizedlist>
                    <listitem>
                        <synopsis format="linespecific">byte[] getDocument(String name, Hashtable parameters)</synopsis>
                        <synopsis>String getDocumentAsString(String name, Hashtable parameters)</synopsis>
                        <para>Retrieves a document from the database.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>name</term>
                                <listitem>
                                    <para>Path of the document to be retrieved (e.g.
                                            <filename>/db/shakespeare/plays/r_and_j.xml</filename>).</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>parameters</term>
                                <listitem>
                                    <para>A struct containing <option>key=value</option> pairs for
                                        configuring the output.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">Hashtable getDocumentData(String name, Hashtable parameters)</synopsis>
                        <synopsis>Hashtable getNextChunk(String handle, Int offset)</synopsis>
                        <synopsis>Hashtable getNextExtendedChunk(String handle, String offset)</synopsis>
                        <para>To retrieve a document from the database, but limit the number of
                            bytes transmitted in one chunk to avoid memory shortage on the server,
                            use the following:</para>
                        <para><methodname>getDocumentData()</methodname> returns a struct containing
                            the following fields: <parameter>data</parameter>,
                            <parameter>handle</parameter>, <parameter>offset</parameter>, <parameter>supports-long-offset</parameter>.
                                <parameter>data</parameter> contains the document's data (as
                                <option>byte[]</option>) or the first chunk of data if the document
                            size exceeds the predefined internal limit.
                            <parameter>handle</parameter> and <parameter>offset</parameter> can be
                            passed to <methodname>getNextChunk()</methodname> or <methodname>getNextExtendedChunk()</methodname>
			    to retrieve the remaining data chunks.
			    <parameter>supports-long-offset</parameter>, when available, tells whether the server understands
			    <method>getNextExtendedChunk()</method> method.
			    </para>
                        <para>If <parameter>offset</parameter> is 0, no more chunks are available
                            and all of the data is already contained in the
                            <parameter>data</parameter> field. Otherwise, further chunks can be
                            retrieved by passing the handle and the offset (as returned by the last
                            call) to <methodname>getNextChunk()</methodname> or <methodname>getNextExtendedChunk()</methodname>.
			    Once the last chunk is read, <parameter>offset</parameter> will be 0 and the handle becomes
                            invalid.</para>
			<para><methodname>getNextChunk()</methodname> and <methodname>getNextExtendedChunk()</methodname> do
			more or less the same, but with the difference that <methodname>getNextExtendedChunk()</methodname>
			does not have the 2GB limitation in <parameter>offset</parameter>. As previous eXist servers could not
			implement it, you must take into account the <parameter>supports-long-offset</parameter> parameter from
			<methodname>getDocumentData()</methodname> returned structure.
			</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>name</term>
                                <listitem>
                                    <para>Path of the document to be retrieved (e.g.
                                            <filename>/db/shakespeare/plays/r_and_j.xml</filename>).</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>parameters</term>
                                <listitem>
                                    <para>A struct containing <option>key=value</option> pairs to
                                        configure the output.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>handle</term>
                                <listitem>
                                    <para>The handle returned by the call to
                                            <methodname>getDocumentData()</methodname>. This
                                        identifies a temporary file on the server to be read.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>offset</term>
                                <listitem>
                                    <para>The data offset in the document at which the next chunk in
                                        the sequence will be read.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Storing Documents</title>
                <itemizedlist>
                    <listitem>
                        <synopsis format="linespecific">boolean parse(byte[] xml, String docName, int overwrite)</synopsis>
                        <synopsis format="linespecific">boolean parse(byte[] xml, String docName)</synopsis>
                        <para>Inserts a new document into the database or replace an existing one:</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>xml</term>
                                <listitem>
                                    <para>XML content of this document as a UTF-8 encoded byte
                                        array.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>docName</term>
                                <listitem>
                                    <para>Path to the database location where the new document is to
                                        be stored.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>overwrite</term>
                                <listitem>
                                    <para>Set this value to &gt; 0 to automatically replace an
                                        existing document at the same location.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis>String upload(byte[] chunk, int length)</synopsis>
                        <synopsis>String upload(String file, byte[] chunk, int length)</synopsis>
                        <synopsis>boolean parseLocal(String localFile, String docName, boolean replace)</synopsis>
                        <para>Uploads an entire document on to the database before parsing it.</para>
                        <para>While the parse method receives the document as a large single chunk,
                            the upload method allows you to upload the whole document to the server
                            before parsing. This way, <emphasis>out-of-memory</emphasis> exceptions
                            can be avoided, since the document is not entirely kept in the main
                            memory. To identify the file on the server, upload returns an identifier
                            string. After uploading all chunks, you can call
                            <methodname>parseLocal</methodname> and pass it this identifier string
                            as the first argument.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>file</term>
                                <listitem>
                                    <para>The name of the file to which the uploaded chunk is
                                        appended. This is the name of a temporary file on the
                                        server. Use the two-argument version of upload for the first
                                        chunk. The method creates a temporary file and returns its
                                        name. On subsequent calls to this chunk, pass this
                                    name.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>chunk</term>
                                <listitem>
                                    <para>A byte array containing the data to be appended.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>length</term>
                                <listitem>
                                    <para>Defines the number of bytes to be read from chunk.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>localFile</term>
                                <listitem>
                                    <para>The name of the local file on the server that is to be
                                        stored in the database. This should be the same as the name
                                        returned by <methodname>upload</methodname>.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>docName</term>
                                <listitem>
                                    <para>The full path specifying the location where the document
                                        should be stored in the database.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>replace</term>
                                <listitem>
                                    <para>Set this to <option>true</option> if an existing document
                                        with the same name should be automatically
                                    overwritten.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Creating a Collection</title>
                <itemizedlist>
                    <listitem>
                        <synopsis format="linespecific">boolean createCollection(String name)</synopsis>
                        <para>Creates a new collection</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>name</term>
                                <listitem>
                                    <para>Path to the new collection.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Removing Documents or Collections</title>
                <itemizedlist>
                    <listitem>
                        <synopsis format="linespecific">boolean remove(String docName)</synopsis>
                        <para>Removes a document from the database.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>docName</term>
                                <listitem>
                                    <para>The full path to the database document.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">boolean removeCollection( String collection)</synopsis>
                        <para>Removes a collection from the database (including all of its documents
                            and sub-collections).</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>collection</term>
                                <listitem>
                                    <para>The full path to the collection.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Querying</title>
                <itemizedlist>
                    <listitem>
                        <synopsis format="linespecific">int executeQuery(String xquery)</synopsis>
                        <synopsis format="linespecific">int executeQuery(byte[] xquery)</synopsis>
                        <synopsis format="linespecific">int executeQuery(byte[] xquery, String encoding)</synopsis>
                        <para>Executes an XQuery and returns a reference identifier to the generated
                            result set. This reference can be used later to retrieve results.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>xquery</term>
                                <listitem>
                                    <para>A valid XQuery expression.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>encoding</term>
                                <listitem>
                                    <para>The character encoding used for the query string.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">Hashtable querySummary(int result-Id)</synopsis>
                        <para>Returns a summary of query results for the result-set referenced by
                                <parameter>result-Id</parameter>.</para>
                        <para>The <parameter>result-Id</parameter> value is taken from a previous
                            call to <methodname>executeQuery</methodname> (See above). The
                                <methodname>querySummary</methodname> method returns a struct with
                            the following fields: <parameter>queryTime</parameter>,
                            <parameter>hits</parameter>, <parameter>documents</parameter>,
                                <parameter>doctype</parameter>.</para>
                        <para><parameter>queryTime</parameter> and <parameter>hits</parameter> are
                            integer values that describe the processing time in milliseconds for the
                            query execution and the number of hits in the result-set respectively.
                            The field <parameter>documents</parameter> is an array of an array (i.e.
                                <option>Object[][3]</option>) that represents a table in which each
                            row identifies one document. The first field in each row contains the
                                <parameter>document-id</parameter> (integer value). The second has
                            the document's name as a string value. The third contains the number of
                            hits found in this document (integer value).</para>
                        <para>The<parameter>doctype</parameter> field is also an array of an array
                            (Object[][2]) that contains the <option>doctype</option> public
                            identifier and the number of hits found for this
                            <option>doctype</option> in each row.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>resultId</term>
                                <listitem>
                                    <para>Reference to a result-set as returned by a previous call
                                        to <methodname>executeQuery</methodname>.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">byte[] retrieve(int resultId, int pos, Hashtable parameters)</synopsis>
                        <para>Retrieves a single result-fragment from the result-set referenced by
                                <parameter>resultId</parameter>. The result-fragment is identified
                            by its position in the result-set, which is passed in the parameter
                                <parameter>pos</parameter>.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>resultId</term>
                                <listitem>
                                    <para>Reference to a result-set as returned by a previous call
                                        to <methodname>executeQuery</methodname>.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>pos</term>
                                <listitem>
                                    <para>The position of the item in the result-sequence, starting
                                        at 0.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>parameters</term>
                                <listitem>
                                    <para>A struct containing <option>key=value</option> pairs to
                                        configure the output.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">Hashtable retrieveFirstChunk(int resultId, int pos, Hashtable parameters)</synopsis>
                        <para>Retrieves a single result-fragment from the result-set referenced by
                                <parameter>resultId</parameter>, but limiting the number of
                            bytes transmitted in one chunk to avoid memory shortage on the server.
			    The result-fragment is identified by its position in the result-set,
			    which is passed in the parameter <parameter>pos</parameter>. It returns
			    the same structure as <methodname>getDocumentData()</methodname>, and its
			    fields behaves the same, so next chunks must be fetched using either
			    <methodname>getNextChunk()</methodname> or <methodname>getNextExtendedChunk()</methodname>
			    (see <methodname>getDocumentData()</methodname> documentation for further details).</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>resultId</term>
                                <listitem>
                                    <para>Reference to a result-set as returned by a previous call
                                        to <methodname>executeQuery</methodname>.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>pos</term>
                                <listitem>
                                    <para>The position of the item in the result-sequence, starting
                                        at 0.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>parameters</term>
                                <listitem>
                                    <para>A struct containing <option>key=value</option> pairs to
                                        configure the output.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">int getHits(int resultId)</synopsis>
                        <para>Get the number of hits in the result-set identified by
                                <parameter>resultId</parameter>.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>resultId</term>
                                <listitem>
                                    <para>Reference to a result-set as returned by a previous call
                                        to <methodname>executeQuery</methodname>.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">String query(byte[] xquery, int howmany, int start, Hashtable parameters)</synopsis>
                        <para>Executes an XQuery expression and returns a specified subset of the
                            results. This method will directly return a subset of the
                            result-sequence, starting at <parameter>start</parameter>, as a new XML
                            document. The number of results returned is determined by parameter
                                <parameter>howmany</parameter>. The result-set will be deleted on
                            the server, so later calls to this method will again execute the query.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>xquery</term>
                                <listitem>
                                    <para>An XQuery expression.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>start</term>
                                <listitem>
                                    <para>The position of the first item to be retrieved from the
                                        result-sequence.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>howmany</term>
                                <listitem>
                                    <para>The maximum number of items to retrieve.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>parameters</term>
                                <listitem>
                                    <para>A struct containing <option>key=value</option> pairs to
                                        configure the output.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis>void releaseQueryResult(int resultId)</synopsis>
                        <para>Forces the result-set identified by its result id to be released on
                            the server.</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Retrieving Information on Collections and Documents</title>
                <itemizedlist>
                    <listitem>
                        <synopsis format="linespecific">Hashtable describeCollection(String collection)</synopsis>
                        <para>Returns a struct describing a specified collection.</para>
                        <para>The returned struct has the following fields:
                            <parameter>name</parameter> (the collection path),
                            <parameter>owner</parameter> (identifies the collection owner),
                                <parameter>group</parameter> (identifies the group that owns the
                            collection), <parameter>created</parameter> (the creation date of the
                            collection expressed as a long value),
                            <parameter>permissions</parameter> (the active permissions that apply to
                            the collection as an integer value).</para>

                        <para><parameter>collections</parameter> is an array listing the names of
                            available sub-collections in this collection.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>collection</term>
                                <listitem>
                                    <para>The full path to the collection.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">Hashtable describeResource(String resource)</synopsis>
                        <para>Returns a struct describing a specified resource.</para>
                        <para>The returned struct has the following fields:
                            <parameter>name</parameter> (the collection path),
                            <parameter>owner</parameter> (identifies the collection owner),
                                <parameter>group</parameter> (identifies the group that owns the
                            collection), <parameter>created</parameter> (the creation date of the
                            collection expressed as a long value),
                            <parameter>permissions</parameter> (the active permissions that apply to
                            the collection as an integer value), <parameter>type</parameter> (either
                                <option>XMLResource</option> for XML documents or
                                <option>BinaryResource</option> for binary files),
                                <parameter>content-length</parameter> (the estimated size of the
                            resource in bytes). The <parameter>content-length</parameter> is based
                            on the number of pages occupied by the resource in the DOM storage. For
                            binary resources, the value will always be 0.</para>
                    </listitem>
                    <listitem>
                        <synopsis format="linespecific">Hashtable getCollectionDesc(String collection)</synopsis>
                        <para>Returns a struct describing a collection.</para>
                        <para>The returned struct has the following fields:
                            <parameter>name</parameter> (the collection path),
                            <parameter>owner</parameter> (identifies the collection owner),
                                <parameter>group</parameter> (identifies the group that owns the
                            collection), <parameter>created</parameter> (the creation date of the
                            collection expressed as a long value),
                            <parameter>permissions</parameter> (the active permissions that apply to
                            the collection as an integer value).</para>

                        <para><parameter>collections</parameter> is an array listing the names of
                            available sub-collections in this collection.</para>

                        <para><parameter>documents</parameter> is an array listing information on
                            all of the documents in this collection. Each item in the array is a
                            struct with the following fields: name, owner, group, permissions, type.
                            The type field contains a string describing the type of the resource:
                            either <option>XMLResource</option>or <option>BinaryResource</option>. </para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>collection</term>
                                <listitem>
                                    <para>The full path to the collection.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>XUpdate</title>
                <itemizedlist>
                    <listitem>
                        <synopsis>int xupdate(String collectionName, byte[] xupdate)</synopsis>
                        <synopsis>int xupdateResource(String documentName, byte[] xupdate)</synopsis>
                        <para>Applies a set of XUpdate modifications to a collection or document.</para>
                        <variablelist>
                            <varlistentry>
                                <term>collectionName</term>
                                <listitem>
                                    <para>The full path to the collection to which the XUpdate
                                        modifications should be applied.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>documentName</term>
                                <listitem>
                                    <para>The full path to the document to which the XUpdate
                                        modifications should be applied.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>xupdate</term>
                                <listitem>
                                    <para>The XUpdate document containing the modifications. This
                                        should be send as an <option>UTF-8</option> encoded binary
                                        array.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Managing Users and Permissions</title>
                <itemizedlist>
                    <listitem>
                        <synopsis>boolean setUser(String name, String passwd, String digestPasswd, Vector groups)</synopsis>
                        <synopsis>boolean setUser(String name, String passwd, String digestPasswd, Vector groups, String home)</synopsis>
                        <para>Modifies or creates a database user.</para>
                        <variablelist>
                            <title>Parameters:</title>
                            <varlistentry>
                                <term>name</term>
                                <listitem>
                                    <para>Username value.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>passwd</term>
                                <listitem>
                                    <para>The plain-text password for the user.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>digestPasswd</term>
                                <listitem>
                                    <para>The md5 encoded password for the user.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>groups</term>
                                <listitem>
                                    <para>A vector of groups assigned to the user. The first group
                                        in the vector will become the user's primary group.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>home</term>
                                <listitem>
                                    <para>An optional setting for the user's home collection path.
                                        The collection will be created if it does not exist, and
                                        provides the user with full access.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis>boolean setPermissions(String resource, String permissions)</synopsis>
                        <synopsis>boolean setPermissions(String resource, int permissions)</synopsis>
                        <synopsis>boolean setPermissions(String resource, String owner, String ownerGroup, String permissions)</synopsis>
                        <synopsis>boolean setPermissions(String resource, String owner, String ownerGroup, int permissions)</synopsis>
                        <para>Sets the permissions assigned to a given collection or document.</para>
                        <variablelist>
                            <varlistentry>
                                <term>resource</term>
                                <listitem>
                                    <para>The full path to the collection or document on which the
                                        specified permissions will be set. The method first checks
                                        if the specified path points to a collection or
                                    resource.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>owner</term>
                                <listitem>
                                    <para>The name of the user owning this resource.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>ownerGroup</term>
                                <listitem>
                                    <para>The name of the group owning this resource.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>permissions</term>
                                <listitem>
                                    <para>The permissions assigned to the resource, which can be
                                        specified either as an integer value constructed using the
                                            <ulink url="api/org/exist/security/Permission"
                                            >Permission</ulink> class, or using a modification
                                        string. The bit encoding of the integer value corresponds to
                                        Unix conventions. The modification string has the following
                                        syntax:</para>
                                    <synopsis>[user|group|other]=[+|-][read|write|update][, ...]</synopsis>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis>Hashtable getPermissions(String resource)</synopsis>
                        <para>Returns the active permissions for the specified document or
                            collection.</para>
                        <para>The returned struct has the following fields:
                            <parameter>name</parameter> (the collection path),
                            <parameter>owner</parameter> (identifies the collection owner),
                                <parameter>group</parameter> (identifies the group that owns the
                            collection), <parameter>created</parameter> (the creation date of the
                            collection expressed as a long value),
                            <parameter>permissions</parameter> (the active permissions that apply to
                            the collection as an integer value).</para>
                    </listitem>
                    <listitem>
                        <synopsis>boolean removeUser(String name)</synopsis>
                        <para>Removes the identified user.</para>
                    </listitem>
                    <listitem>
                        <synopsis>Hashtable getUser(String name)</synopsis>
                        <para>Returns a struct describing the user identified by its name.</para>
                        <para>The returned struct has the following fields:
                            <parameter>name</parameter> (the collection path),
                            <parameter>home</parameter> (identifies the user's home directory),
                                <parameter>groups</parameter> (an array specifying all groups to
                            which the user belongs).</para>
                    </listitem>
                    <listitem>
                        <synopsis>Vector getUsers()</synopsis>
                        <para>Returns a list of all users currently known to the system.</para>
                        <para>Each user in the list is described by the same struct returned by the
                                <methodname>getUser()</methodname> method.</para>
                    </listitem>
                    <listitem>
                        <synopsis>Vector getGroups()</synopsis>
                        <para>Returns a list of all group names (as string values) currently
                            defined.</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Access to the Index Contents</title>
                <para>The following methods provide access to eXist's internal index structure.</para>
                <itemizedlist>
                    <listitem>
                        <synopsis>Vector getIndexedElements(String collectionName, boolean inclusive)</synopsis>
                        <para>Returns a list (i.e. array[][4]) of all indexed element names for the
                            specified collection.</para>
                        <para>For each element, an array of four items is returned:</para>
                        <orderedlist>
                            <listitem>
                                <para>name of the element</para>
                            </listitem>
                            <listitem>
                                <para>optional namespace URI</para>
                            </listitem>
                            <listitem>
                                <para>optional namespace prefix</para>
                            </listitem>
                            <listitem>
                                <para>number of occurrences of this element as an integer
                                value</para>
                            </listitem>
                        </orderedlist>
                        <variablelist>
                            <varlistentry>
                                <term>collectionName</term>
                                <listitem>
                                    <para>The full path to the collection.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>inclusive</term>
                                <listitem>
                                    <para>If set to <option>true</option>, the subcollections of the
                                        specified collection will be included into the
                                    result.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                    <listitem>
                        <synopsis>Vector scanIndexTerms(String collectionName, String start, String end, boolean inclusive)</synopsis>
                        <para>Return a list (array[][2]) of all index terms contained in the
                            specified collection.</para>
                        <para>For each term, an array with two items is returned:</para>
                        <orderedlist>
                            <listitem>
                                <para>the term itself</para>
                            </listitem>
                            <listitem>
                                <para>number occurrences of the term in the specified
                                collection</para>
                            </listitem>
                        </orderedlist>
                        <variablelist>
                            <varlistentry>
                                <term>collectionName</term>
                                <listitem>
                                    <para>The full path to the collection.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>start</term>
                                <listitem>
                                    <para>The start position for the returned range expressed as a
                                        string value. Returned index terms are positioned after the
                                        start position in ascending, alphabetical order.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>end</term>
                                <listitem>
                                    <para>The end position for the returned range expressed as a
                                        string value. Returned index terms are positioned before the
                                        end position in ascending, alphabetical order.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>inclusive</term>
                                <listitem>
                                    <para>If set to<option>true</option>, subcollections of the
                                        specified collection will be included into the
                                    result.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Other Methods</title>
                <itemizedlist>
                    <listitem>
                        <synopsis>boolean shutdown()</synopsis>
                        <para>Shuts down the database engine. All dirty pages are written to
                        disk.</para>
                    </listitem>
                    <listitem>
                        <synopsis>boolean sync()</synopsis>
                        <para>Causes the database to write all dirty pages to disk.</para>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
    </chapter>
</book>
