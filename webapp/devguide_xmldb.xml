<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<book>
    <bookinfo>
        <graphic fileref="logo.jpg"/>
        <productname>Open Source Native XML Database</productname>
        <title>Developer's Guide</title>
        <date>September 2009</date>
        <author>
            <firstname>Wolfgang M.</firstname>
            <surname>Meier</surname>
            <affiliation>
                <address format="linespecific"><email>wolfgang at exist-db.org</email></address>
            </affiliation>
        </author>
    </bookinfo>
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sidebar.xml"/>
    <chapter id="ch01">
        <title>Developer's Guide</title>
        <section>
            <title>Writing Java Applications with the XML:DB API</title>

            <para>The preferred way to work with eXist when developing Java applications is to use
                the XML:DB API. This API provides a common interface to native or XML-enabled
                databases and supports the development of portable, reusable applications. eXist's
                implementation of the XML:DB standards follows the Xindice implementation, and
                conforms to the latest working drafts put forth by the <ulink
                    url="http://xmldb-org.sourceforge.net/xapi/">XML:DB Initiative</ulink>. For more
                information, refer to the <ulink url="api/index.html">Javadocs for this API</ulink>.</para>

            <para>The basic components employed by the XML:DB API are <emphasis>drivers</emphasis>,
                    <emphasis>collections</emphasis>, <emphasis>resources</emphasis> and
                    <emphasis>services</emphasis>.</para>

            <para><emphasis>Drivers</emphasis> are implementations of the database interface that
                encapsulate the database access logic for specific XML database products. They are
                provided by the product vendor and must be registered with the database manager.</para>

            <para>A <emphasis>collection</emphasis> is a hierarchical container for
                    <emphasis>resources</emphasis> and further sub-collections. Currently two
                different resources are defined by the API: <classname>XMLResource</classname> and
                    <classname>BinaryResource</classname>. An <classname>XMLResource</classname>
                represents an XML document or a document fragment, selected by a previously executed
                XPath query.</para>
            <para>Finally, <emphasis>services</emphasis> are requested for special tasks such as
                querying a collection with XPath, or managing a collection.</para>
            <note>
                <para>There are several XML:DB examples provided in eXist's
                    <filename>samples</filename> directory . To start an example, use the <filename
                        moreinfo="none">start.jar</filename> jar file and pass the name of the
                    example class as the first parameter, for instance:</para>
                <synopsis format="linespecific">java -jar start.jar 
					org.exist.examples.xmldb.Retrieve [- other options]</synopsis>
            </note>
            <para>Programming with the XML:DB API is straightforward. You will find some code
                examples in the <filename>samples/org/exist/examples/xmldb</filename> directory. In
                the following simple example, a document can be retrieved from the eXist server and
                printed to standard output.</para>
            <example>
                <title>Retrieving a Document with XML:DB</title>
                
                <programlisting format="linespecific" language="java"><![CDATA[
import org.xmldb.api.base.*;
import org.xmldb.api.modules.*;
import org.xmldb.api.*;
import javax.xml.transform.OutputKeys;

public class RetrieveExample {
    protected static String URI = "xmldb:exist://localhost:8080/exist/xmlrpc";

    public static void main(String args[]) throws Exception {
        String driver = "org.exist.xmldb.DatabaseImpl";
        
        // initialize database driver
        Class cl = Class.forName(driver);
        Database database = (Database) cl.newInstance();
        DatabaseManager.registerDatabase(database);

        // get the collection
        Collection col = DatabaseManager.getCollection(URI + args[0]);
        col.setProperty(OutputKeys.INDENT, "no");
        XMLResource res = (XMLResource)col.getResource(args[1]);
        if(res == null)
            System.out.println("document not found!");
        else
            System.out.println(res.getContent());   }
}
        ]]></programlisting>
            </example>
            <para>With this example, the database driver class for eXist
                    (<classname>org.exist.xmldb.DatabaseImpl</classname>) is first registered with
                the <classname>DatabaseManager</classname>. Next we obtain a
                <classname>Collection</classname> object from the database manager by calling the
                static method <methodname>DatabaseManger.getCollection()</methodname>. The method
                expects a fully qualified URI for its parameter value, which identifies the desired
                collection. The format of this URI should look like the following:</para>
            <synopsis format="linespecific">xmldb:[DATABASE-ID]://[HOST-ADDRESS]/db/collection</synopsis>
            <para>Because more than one database driver can be registered with the database manager,
                the first part of the URI (<option>xmldb:exist</option>) is required to determine
                which driver class to use. The <emphasis>database-id</emphasis> is used by the
                database manager to select the correct driver from its list of available drivers. To
                use eXist, this ID should always be "exist" (unless you have set up multiple
                database instances; additional instances may have other names).</para>
            <para>The final part of the URI identifies the collection path, and optionally the host
                address of the database server on the network. Internally, eXist uses two different
                driver implementations: The first talks to a remote database engine using XML-RPC
                calls, the second has direct access to a local instance of eXist. The root
                collection is always identified by <option>/db</option>. For example, the URI</para>
            <synopsis format="linespecific">xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare/plays</synopsis>
            <para>references the Shakespeare collection on a remote server running the XML-RPC
                interface as a servlet at <option>localhost:8080/exist/xmlrpc</option>. If we leave
                out the host address, the XML:DB driver will try to connect to a locally attached
                database instance, e.g.:</para>
            <synopsis format="linespecific">xmldb:exist:///db/shakespeare/plays</synopsis>
            <para>In this case, we have to tell the XML:DB driver that it should create a new
                database instance if none has been started. This is done by setting the
                    <option>create-database</option> property of class
                <classname>Database</classname> to "true" (more information on embedded use of eXist
                can be found in the <ulink url="deployment.xml">deployment guide</ulink>.</para>
            <para>The <methodname>setProperty</methodname> calls are used to set database-specific
                parameters. In this case, pretty-printing of XML output is turned on for the
                collection. eXist uses the property keys defined in the standard Java package
                    <filename>javax.xml.transform</filename>. Thus, in Java you can simply use class
                    <classname>OutputKeys</classname> to get the correct keys.</para>
            <para>Calling <methodname>col.getResource()</methodname> finally retrieves the document,
                which is returned as an <classname>XMLResource</classname>. All resources have a
                method <methodname>getContent()</methodname>, which returns the resource's content,
                depending on it's type. In this case we retrieve the content as type
                    <classname>String</classname>.</para>
            <para>To query the repository, we may either use the standard
                    <classname>XPathQueryService</classname> or eXist's
                <classname>XQueryService</classname> class. The XML:DB API defines different kinds
                of services, which may or may not be provided by the database. The
                    <methodname>getService</methodname> method of class
                <classname>Collection</classname> calls a service if it is available. The method
                expects the service name as the first parameter, and the version (as a string) as
                the second, which is used to distinguish between different versions of the service
                defined by the XML:DB API.</para>
            <para>The following is an example of using the XML:DB API to execute a database query:</para>

            <example>
                <title>Querying the Database (XML:DB API)</title>
                
                <programlisting format="linespecific" language="java"><![CDATA[import org.xmldb.api.base.*;
import org.xmldb.api.modules.*;
import org.xmldb.api.*;

public class QueryExample {
    public static void main(String args[]) throws Exception {
        String driver = "org.exist.xmldb.DatabaseImpl";
        Class cl = Class.forName(driver);			
        Database database = (Database)cl.newInstance();
        DatabaseManager.registerDatabase(database);
        
        Collection col = 
            DatabaseManager.getCollection(
                "xmldb:exist://localhost:8080/exist/xmlrpc/db"
            );
        XPathQueryService service =
            (XPathQueryService) col.getService("XPathQueryService", "1.0");
        service.setProperty("indent", "yes");
                
        ResourceSet result = service.query(args[0]);
        ResourceIterator i = result.getIterator();
        while(i.hasMoreResources()) {
            Resource r = i.nextResource();
            System.out.println((String)r.getContent());
        }
    }
}
        ]]></programlisting>
            </example>
            <para>To execute the query, method <methodname>service.query(xpath)</methodname> is
                called. This method returns a <classname>ResourceSet</classname>, containing the
                Resources found by the query. <methodname>ResourceSet.getIterator()</methodname>
                gives us an iterator over these resources. Every Resource contains a single document
                fragment or value selected by the XPath expression.</para>
            <para>Internally, eXist does not distinguish between XPath and XQuery expressions.
                    <classname>XQueryService</classname> thus maps to the same implementation class
                as <classname>XPathQueryService</classname>. However, it provides a few additional
                methods. Most important, when talking to an embedded database,
                    <classname>XQueryService</classname> allows for the XQuery expression to be
                compiled as an internal representation, which can then be reused. With compilation,
                the previous example code would look as follows:</para>
            <example>
                <title>Compiling a Query (XML:DB API)</title>
                
                <programlisting format="linespecific" language="java"><![CDATA[import org.xmldb.api.base.*;
import org.xmldb.api.modules.*;
import org.xmldb.api.*;
import org.exist.xmldb.XQueryService;

public class QueryExample {
    public static void main(String args[]) throws Exception {
        String driver = "org.exist.xmldb.DatabaseImpl";
        Class cl = Class.forName(driver);			
        Database database = (Database)cl.newInstance();
        database.setProperty("create-database", "true");
        DatabaseManager.registerDatabase(database);
        
        Collection col = 
            DatabaseManager.getCollection("xmldb:exist:///db");
        XQueryService service =
            (XQueryService) col.getService("XQueryService", "1.0");
        service.setProperty("indent", "yes");
        
        CompiledExpression compiled = service.compile(args[0]);
        ResourceSet result = service.execute(compiled);
        ResourceIterator i = result.getIterator();
        while(i.hasMoreResources()) {
            Resource r = i.nextResource();
            System.out.println((String)r.getContent());
        }
    }
}
        ]]></programlisting>
            </example>
            <para>The XML-RPC server automatically caches compiled expressions, and so calling
                    <methodname>compile</methodname> through the remote driver produces no effect if
                the expression is already cached.</para>
            <para>Next, we would like to store a new document into the repository. This is done by
                creating a new <classname>XMLResource</classname>, assigning it the content of the
                new document, and calling the <methodname>storeResource</methodname> method of class
                    <classname>Collection</classname>. First, a new Resource is created by method
                    <methodname>Collection.createResource()</methodname>, and expects two
                parameters: the id and type of resource being created. If the id-parameter is null,
                a unique resource-id will be automatically generated .</para>
            <para>In some cases, the collection may not yet exist, and so we must create it. To
                create a new collection, call the <methodname>createCollection</methodname> method
                of the <classname>CollectionManagementService</classname> service. In the following
                example, we simply start at the root-collection object to get the
                    <classname>CollectionManagementService</classname> service.</para>
            <example>
                <title>Adding a File (XML:DB API)</title>
                
                <programlisting format="linespecific" language="java"><![CDATA[public class StoreExample {
    public final static String URI = "xmldb:exist://localhost:8080/exist/xmlrpc";

    public static void main(String args[]) throws Exception {
        if(args.length < 2) {
            System.out.println("usage: StoreExample collection-path document");
            System.exit(1);
        }

        String collection = args[0], file = args[1];

        // initialize driver
        String driver = "org.exist.xmldb.DatabaseImpl";
        Class cl = Class.forName(driver);
        Database database = (Database)cl.newInstance();
        DatabaseManager.registerDatabase(database);

        // try to get collection
        Collection col =
            DatabaseManager.getCollection(URI + collection);
        if(col == null) {
            // collection does not exist: get root collection and create
            // for simplicity, we assume that the new collection is a
            // direct child of the root collection, e.g. /db/test.
            // the example will fail otherwise.
            Collection root = DatabaseManager.getCollection(URI + "/db");
            CollectionManagementService mgtService = (CollectionManagementService)
                root.getService("CollectionManagementService", "1.0");
            col = mgtService.createCollection(collection.substring("/db".length()));
        }
        // create new XMLResource; an id will be assigned to the new resource
        XMLResource document = (XMLResource)col.createResource(null, "XMLResource");
        File f = new File(file);
        if(!f.canRead()) {
            System.out.println("cannot read file " + file);
            return;
        }
        document.setContent(f);
        System.out.print("storing document " + document.getId() + "...");
        col.storeResource(document);
        System.out.println("ok.");
    }
}]]></programlisting>
            </example>
            <para>Please note that the <classname>XMLResource.setContent()</classname> method takes
                a Java object as its parameter. The eXist driver checks if the object is a File.
                Otherwise, the object is transformed into a String by calling the object's
                    <methodname>toString()</methodname> method. Passing a File has one big
                advantage: If the database is running in the embedded mode, the file will be
                directly passed to the indexer. Thus, the file's content does not have to be loaded
                into the main memory. This is handy if your files are very large.</para>
        </section>
        <section>
            <title>Extensions to XML:DB</title>
            <section>
                <title>Additional Services</title>
                <para>eXist provides several services in addition to those defined by the XML:DB
                    specification:</para>
                <para>The <ulink url="api/org/exist/xmldb/UserManagementService.html"
                        >UserManagementService</ulink> service contains methods to manage users and
                    handle permissions. These methods resemble common Unix commands such as
                        <methodname>chown</methodname> or <methodname>chmod</methodname>. As with
                    other services, <classname>UserManagementService</classname> can be retrieved
                    from a collection object, as in:</para>
                <synopsis format="linespecific">UserManagementService service = 
                    (UserManagementService)collection.getService("UserManagementService", "1.0");</synopsis>
                <para>Another service called <ulink
                        url="api/org/exist/xmldb/DatabaseInstanceManager.html"
                        >DatabaseInstanceManager</ulink>, provides a single method to shut down the
                    database instance accessed by the driver. You have to be a member of the
                        <option>dba</option> user group to use this method or an exception will be
                    thrown. See the <ulink url="deployment.xml#embedded">Deployment Guide</ulink>
                    for an example.</para>
                <para>Finally, interface <ulink url="api/org/exist/xmldb/IndexQueryService.html"
                        >IndexQueryService</ulink> supports access to the terms and elements
                    contained in eXist's internal index. Method getIndexedElements() returns a list
                    of element occurrences for the current collection. For each occurring element,
                    the element's name and a frequency count is returned.</para>
                <para>Method scanIndexTerms() allows for a retrieval of the list of occurring words
                    for the current collection. This might be useful, for example, to provide users
                    a list of searchable terms together with their frequency.</para>
            </section>
            <section id="multidb">
                <title>Multiple Database Instances</title>
                <para>As explained above, passing a local XML:DB URI to the
                        <classname>DatabaseManager</classname> means that the driver will try to
                    start or access an embedded database instance. You can configure more than one
                    database instance by setting the location of the central configuration file. The
                    configuration file is set through the <option>configuration</option> property of
                    the <classname>DatabaseImpl</classname> driver class. If you would like to use
                    different drivers for different database instances, specify a name for the
                    created instance through the <option>database-id</option> property. You may
                    later use this name in the URI to refer to a database instance. The following
                    fragment sets up two instances:</para>
                <example>
                    <title>Multiple Database Instances</title>
                    <programlisting format="linespecific" language="java"><![CDATA[
// initialize driver
String driver = "org.exist.xmldb.DatabaseImpl";
Class cl = Class.forName(driver);			
Database database1 = (Database)cl.newInstance();
database1.setProperty("create-database", "true");
database1.setProperty("configuration", "/home/exist/test/conf.xml");
database1.setProperty("database-id", "test");
DatabaseManager.registerDatabase(database1);

Database database2 = (Database)cl.newInstance();
database2.setProperty("create-database", "true");
database2.setProperty("configuration", "/home/exist/production/conf.xml");
database2.setProperty("database-id", "exist");
DatabaseManager.registerDatabase(database1);
]]></programlisting>
                </example>
                <para>With the above example, the URI</para>
                <synopsis format="linespecific">xmldb:test:///db</synopsis>
                <para>selects the test database instance. Both instances should have their own data
                    and log directory as specified in the configuration files.</para>
            </section>
        </section>
        <section>
            <title>XMLDBTransformer for Cocoon (Deprecated)</title>
            
            <important>
                <para>The XMLDBTransformer is no longer actively developed since all its
                functionality can be replaced with simple XQuery.</para>
            </important>
            
            <para>eXist offers several ways to access the database from Cocoon-based applications.
                This includes access via the XMLDB pseudo-protocol, through XSP pages, and through
                the XMLDBTransformer. The XMLDBTransformer provides a simple way to query the
                database, and works in a similar way to other transformers supplied with Cocoon.
                Consult the <ulink url="cocoon.apache.org/">Cocoon documentation</ulink> for more on
                using Transformers and about their basic concepts.</para>
            <para>As with other transformers, the XMLDBTransformer listens for a limited set of tags
                that belong to the namespace <filename moreinfo="none"
                    >http://exist-db/transformer/1.0</filename>. These are
                <sgmltag>collection</sgmltag>, <sgmltag>for-each</sgmltag>,
                <sgmltag>select-node</sgmltag>, <sgmltag>current-node</sgmltag>. To examine how they
                are used, let's consider the following example (Note that the complete version of
                this example can be found at <filename moreinfo="none"
                >webapp/examples/simple2.xml</filename>):</para>
            <example>
                <title>XMLDBTransformer Example</title>
                <programlisting format="linespecific" language="java"><![CDATA[
<xdb:collection xmlns:xdb="http://exist-db.org/transformer/1.0"
	uri="xdb:exist:///db">
	<!-- iterate through all rdf:Description elements containing the
	     term "computer" -->
	<xdb:for-each query="//rdf:Description[dc:title &amp;= 'computer']"
		from="0" to="9" sort-by="/dc:title">
		<!-- output a book element for each entry -->
		<book>
			<!-- extract the title. There's only one title, so we use
			     select-node -->
			<title><xdb:select-node query="dc:title/text()"/></title>
			<!-- extract the creators. There's probably more than one,
			     so we use a nested for-each -->
			<xdb:for-each query="dc:creator/text()">
				<creator><xdb:current-node/></creator>
			</xdb:for-each>
		</book>
	</xdb:for-each>
</xdb:collection>
]]></programlisting>
            </example>
            <para>As we can see above, before you can start to query the database, you must specify
                a collection in the <sgmltag>collection</sgmltag> element, which accepts a standard
                XMLDB URI in its <option>uri</option> attribute. To process a query, you may either
                use the <sgmltag>for-each</sgmltag>, or the <sgmltag>select-node</sgmltag> tag. The
                difference is the following:</para>
            <itemizedlist>
                <listitem>
                    <para><sgmltag>for-each</sgmltag> iterates over all the results it finds for the
                        given query. The body of the statement will therefore be evaluated for each
                        query result.</para>
                </listitem>
                <listitem>
                    <para><sgmltag>select-node</sgmltag> selects the first result it finds. If the
                        result set contains more than one match, the remaining matches will be
                        ignored.</para>
                </listitem>
            </itemizedlist>
            <para>The <sgmltag>current-node</sgmltag> element is used to return the current node
                being processed in a for-each iteration to the output document. You can restrict the
                number of for-each iterations by specifying the bounds set by the
                <option>from</option> and <option>to</option> attributes. The
                <option>sort-by</option> attribute is still experimental: the query results will be
                sorted by an XPath expression. For each of the results, the XPath expression is
                evaluated and the resulting string value is used to sort the query results in
                ascending order.</para>
            <para>As shown above, it is possible to nest multiple for-each or select-node tags. The
                nested tag will be evaluated relative to the current result node. In the example
                above, the main for-each statement selects all <sgmltag>rdf:Description</sgmltag>
                fragments whose title contains the term "computer". During each iteration, we
                further process the current result fragment by using nested
                <sgmltag>for-each</sgmltag> and <sgmltag>select-node</sgmltag> tags to select the
                title and creators.</para>
            <para>Notice that the same result could be achieved by an XSLT stylesheet. However, if
                the selected fragments are rather large, post-processing with XSLT can be much
                slower, since each fragment has to be serialized and then parsed by the XSLT
                processor.</para>
            <para>The results of the XMLDBTransformer query are enclosed in the element
                    <sgmltag>result-set</sgmltag>. Attributes for this tag include the number of
                hits for the query, the XPath query processed, the query time (in milliseconds), and
                the start and end position of the retrieved records in the result set. The output of
                the XMLDBTransformer for the above fragment is shown below:</para>
            <example>
                <title>XMLDBTransformer Output</title>
<programlisting format="linespecific"><markup><![CDATA[<xdb:result-set count="72" xpath="//rdf:Description[dc:title &= 'computer']"
	query-time="370" from="0" to="9">
	<book xdb:document-id="zit.rdf" xdb:collection="/db/library"> 
		<title> A Centennial History of the American Society of Mechanical Engineers 1880-1980 </title> 
		<creator xdb:document-id="zit.rdf" xdb:collection="/db/library"> Sinclair, Bruce </creator>
	</book>
	<!-- more books here ... -->
</xdb:result-set>]]></markup></programlisting>
            </example>

        </section>
        <section>
            <title>XML:DB Logicsheet for Cocoon</title>
            <important>
                <para>The XMLDB logicsheet is no longer actively developed. The XQueryGenerator
                provides a much easier way to generate web page contents.</para>
            </important>
            
            <para>Cocoon offers a powerful mechanism called XSP (eXtensible Server Pages) to write
                dynamic XML-based web pages. Similar to JSP, XSP embeds Java code in the XML pages.
                However, embedding large sections of Java code in an XML document is usually
                considered poor programming form. To support the separation of content and
                programming logic, XSP allows us to put reusable code into "logicsheets", which
                correspond to the tag libraries found in JSP. A logicsheet helps to minimize the
                amount of Java code used inside an XSP page.</para>
            <para>Version 0.8 of eXist includes a logicsheet based on the XML:DB API, which defines
                tags for all important tasks. While it is possible to write all of the XML:DB
                related code by hand, these predefined tags make the XML file more readable and
                helps users without Java experience to understand the process involved.</para>
            <para>An overview of the available XSP tags is available with the <ulink
                    url="xmldb/xsl.html">stylesheet documentation</ulink> (generated using <ulink
                    url="www.xsldoc.org">xsldoc</ulink>). In the following simple XSP example, a
                document is retrieved and displayed:</para>
            <example>
                <title>Simple XSP Page (example1.xsp)</title>
                <programlisting format="linespecific">
<markup><![CDATA[<xsp:page xmlns:xsp="http://apache.org/xsp"
          xmlns:xdb="http://exist-db.org/xmldb/1.0"
>
<document>
    <body>
        <section title="View document">
            
        <p>Retrieving document <xsp:expr>request.getParameter("doc")</xsp:expr></p>
        
        <xdb:collection uri="xdb:exist:///db/shakespeare/plays">
            <xml-source>
                <xdb:get-document encoding="ISO-8859-1" as="xml">
                     <xdb:name>request.getParameter("doc")</xdb:name>
                </xdb:get-document>
            </xml-source>
        </xdb:collection>
        </section>
    </body>
</document>
</xsp:page>]]></markup></programlisting>
            </example>
            <para>The Cocoon version included with eXist is already configured to recognize the
                    <filename>xmldb</filename> namespace and associate it with the XML:DB
                logicsheet. The logicsheet is defined in <filename moreinfo="none"
                    >src/org/exist/cocoon/xmldb.xsl</filename>. To use the logicsheet from our page we just
                declare the xmldb namespace (i.e. xmlns:xdb="http://exist-db.org/xmldb/1.0").</para>
            <para>The above sample code retrieves a document from the collection <filename
                    moreinfo="none">/db/shakespeare/plays</filename>. The name of the document is
                passed in the HTTP request parameter <parameter>doc</parameter>.</para>
            <para>To post-process the retrieved XML data, we set the attribute
                <parameter>as</parameter> to "xml". This indicates that the resource should be fed
                into the current Cocoon processing stream. To include the data as a string value,
                you may specify <parameter moreinfo="none">as="string"</parameter>. As a result, all
                XML markup characters will be escaped.</para>
            <para>Please note that the parameters of the logicsheet tags may be specified either as
                an attribute of an element or as a child element. If you specify a parameter as a
                child element, its content will be interpreted as a Java expression. Literal values
                should be set via an attribute. For example, the <parameter moreinfo="none"
                >xpath</parameter> parameter is specified as a Java expression, it is thus embedded
                in an <sgmltag>xdb:xpath</sgmltag> element.</para>
            <para>Finally, in order to tell Cocoon how to process this page, we have to add a new
                    <sgmltag>map:match</sgmltag>pattern to the sitemap - for example:</para>
            <example>
                <title>Cocoon Sitemap Snippet (XSP)</title>
                <programlisting format="linespecific"><markup><![CDATA[
<map:match pattern="test.xsp">
    <map:generate type="serverpages" src="test.xsp"/>
    <map:transform src="stylesheets/doc2html-2.xsl"/>
    <map:serialize type="xhtml"/>
</map:match>
]]></markup></programlisting>
            </example>
            <para>The next example shows how to query the database:</para>
            <example>
                <title>Querying the Database (example2.xsp)</title>
                <programlisting format="linespecific"><markup><![CDATA[
<xsp:page xmlns:xsp="http://apache.org/xsp"
          xmlns:xdb="http://exist-db.org/xmldb/1.0"
>
    <html>
        <body>
            <h1>Find books by title</h1>
            <xdb:collection uri="xdb:exist:///db">
                <xdb:execute>
                    <xdb:xpath>
                        "xmldb:document()//rdf:Description[dc:title" +
                        "&amp;='" + request.getParameter("title") + "']"
                    </xdb:xpath>
                    <p>Found <xdb:get-hit-count/> hits.</p>
                    
                    <xdb:results>
                        <pre>
                            <xdb:get-xml as="string"/>
                        </pre>
                    </xdb:results>
                </xdb:execute>
            </xdb:collection>
        </body>
    </html>
</xsp:page>
]]></markup></programlisting>
            </example>
            <para>This XSP example page takes the HTTP request parameter
                <parameter>title</parameter> as its input and creates an XPath expression that finds
                all <sgmltag>df:Description</sgmltag> elements having a <sgmltag>dc:title</sgmltag>
                element containing the keywords entered by the user. As required by the XML:DB API,
                any action has to be enclosed in an <sgmltag>xdb:collection</sgmltag> element. The
                query is specified in the <sgmltag>xdb:xpath</sgmltag> element using a Java
                expression, which inserts the value of the request parameter
                <parameter>title</parameter> into the XPath query string.</para>
            <para>The <sgmltag>xdb:results</sgmltag> element will iterate through the generated
                result set, inserting each resource into the page by calling
                <sgmltag>xdb:get-xml</sgmltag>. In this case, <sgmltag>xdb:get-xml</sgmltag> inserts
                the resource contents as a string, which means that all XML markup is
            escaped.</para>
        </section>
    </chapter>
</book>
