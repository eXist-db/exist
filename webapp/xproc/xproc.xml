<?xml version="1.0" encoding="UTF-8"?>
<book>
    <bookinfo>
        <graphic fileref="../logo.jpg"/>
        <productname>Open Source Native XML Database</productname>
        <title>XProc Introduction</title>
    	<subject>XProc</subject>
    	<date>November 2009</date>
        <author>
            <firstname>James</firstname>
            <surname>Fuller</surname>
            <affiliation>
                <address format="linespecific"><email>jim.fuller at webcomposite.com</email></address>
            </affiliation>
        </author>
    </bookinfo>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sidebar.xml"/>

    <chapter>
    	<title>XProc Introduction</title>
    	<section>
        <title>XProc Overview</title>
        <para>W3C XProc is a specification that defines a processor for working with XML technologies. eXist XProc implementation is called <b>xprocxq</b> and is mostly developed in XQuery.</para>
		<para>
		Using XProc's <a href="">core</a>, <a href="">standard</a>, <a href="">optional</a> and <a href="">extension</a> steps one defines XML pipelines which can model a wide range of processes.
		</para>
		<para>
		Steps accept input XML and produce output XML, its in this manner (somewhat analogous to unix pipes) that you can orchestrate and create sophisticated XML workflows. </para>
    </section>

    <section>
        <title>Quick Start &amp; Examples</title>
        <para>Since eXist v1.3/1.4, xprocxq is built and configured by default and should be enabled and ready to use.
         </para>
        <para>
            Check out some simple <a href="examples.xml">examples</a> to check if your eXist is working.
		</para>
    </section>

     <section>
        <title>Using XProc in eXist</title>
        <para>
The following XQuery file is an example of how to run xprocxq from within eXist.
             </para>
<example>
			<title>Example of Running XProc from XQuery</title>
			<programlisting>
			<markup>
				<![CDATA[

xquery version "1.0" encoding "UTF-8";

(: for now you need to declare these namespaces :)
import module namespace const = "http://xproc.net/xproc/const";
import module namespace xproc = "http://xproc.net/xproc";
import module namespace u = "http://xproc.net/xproc/util";

(: define standard input source binding :)
let $stdin :=document{<test>Hello World</test>}

(: the xproc pipeline :)
let $pipeline :=document{
                    <p:pipeline name="pipeline"
                                xmlns:p="http://www.w3.org/ns/xproc">
                        <p:identity/>
                    </p:pipeline>
                }

return
(: the xproc entry function :)
     xproc:run($pipeline,$stdin)

]]>
			</markup>
			</programlisting>
         <a href="examples/hello.xqy" target="_example">run xproc from xquery</a>
</example>
 <para>
 list and define all xproc entry functions
 </para>
<para> The result of running this xquery should resemble:</para>
			<example>
			<title>Result</title>
			<programlisting>
			<markup>
				<![CDATA[
<test>Hello World</test>
]]>
			</markup>
			</programlisting>
            </example>

         <para>
             

         </para>
    </section>

    <section>
        <title>Learning XProc</title>
		<para>At their simplest, XProc pipelines contain steps, each of which accept zero or more XML documents as their input and produce zero or more XML documents as output.</para>
        <para>The XProc code in the following listing consists of a &lt;p:pipeline&gt; top-level element, a &lt;p:xslt&gt; step, and not much else.
			</para>

			<example>
			<title>Simple Pipeline - XSLT transformation</title>
			<programlisting>
			<markup>
				<![CDATA[
<p:declare-step xmlns:p="http://www.w3.org/ns/xproc" name="simple-pipeline">
    <p:input port="source" primary="true" sequence="false"/>
    <p:output port="result" primary="true" sequence="false"/>
    <p:xslt name="step1">
        <p:input port="source">
            <p:pipe step="simple-pipeline" port="source"/>
        </p:input>
        <p:input port="stylesheet">
            <p:document href="/db/xproc/examples/stylesheet.xml"/>
        </p:input>
    </p:xslt>
</p:declare-step>
]]>			
			</markup>
			</programlisting>
			<a href="examples/simple-pipeline.xproc?stdin=/db/xproc/examples/test.xml" target="_example">run simple-pipeline.xproc?stdin=/db/xproc/test.xml</a>
			</example>
	<para>
        An XML document is brought in as standard input using the stdin url param.
        The XProc processor uses this XML document as the input to the first step, &lt;p:xslt&gt; step, which applies an XSLT process using stylesheet.xml.
    </para>		
	<para>
        As the pipeline contains only a single step, results of XSLT processing are placed onto the result port for the pipeline, providing the XML document to standard output.
        The following figure illustrates this process, outlining where the XML document flows from source and result ports.
	</para>
	
	<graphic fileref="resource/image/processflow.gif"/>

	<para>
		In the Simple Pipeline listing, I used <code>&lt;p:pipeline&gt;</code>, which implicitly declared a source input and result output port. Using <code>&lt;p:declare-step&gt;</code> now means that I have to explicitly define these ports as well as declare step bindings between sequential sibling steps. These bindings and ports are summarized below:
		<ul>
		    <li>Top-level <b>source</b> input port will receive any standard input.</li>
		    <li>Top-level <b>result</b> output port will receive the results of the step1 result port and place them on the standard output.</li>
		    <li>step1 source input is bound to the <b>source</b> input port.</li>
		</ul>

		With a one step pipeline, it's difficult to illustrate step bindings between steps; so, I have created a nontrivial example which contains several steps. The next code listing presents a more representative XProc example containing multiple steps along with some conditional logic steps.	
	</para>

	<example>
	<title>Complex Pipeline - p:choose and p:for-each</title>
	<programlisting>
	<markup><![CDATA[<p:pipeline xmlns:p="http://www.w3.org/ns/xproc" xmlns:c="http://www.w3.org/ns/xproc-step" name="pipeline">

<p:compare name="compare">                       (: compare test step :)
<p:input port="alternate">
   <p:document href="/db/xproc/test.xml"/> (: example of using p:document :)
</p:input>
</p:compare>

<p:choose name="mychoosestep">
   <p:when test=".//c:result[.='false']">      (: note the eXist specific path convention with root :)
       <p:identity>
           <p:input port="source">
               <p:inline>
                   <p>This pipeline failed.</p>
               </p:inline>
           </p:input>
       </p:identity>
   </p:when>
   <p:when test=".//c:result[.='true']">  (: success :)
   <p:identity>
       <p:input port="source">
           <p:inline>
               <p>This pipeline successfully processed.</p>
           </p:inline>
       </p:input>
   </p:identity>
   </p:when>
   <p:otherwise>
       <p:identity>
           <p:input port="source">
               <p:inline>
                   <p>This pipeline failed.</p>
               </p:inline>
           </p:input>
       </p:identity>
   </p:otherwise>
</p:choose>

<p:identity>   (: currently need to define p:step to get multi container step output :)
    <p:input port="source">
        <p:step port="result" step="mychoosestep"/>
    </p:input>
</p:identity>


</p:pipeline>
		]]>			
	</markup>
	</programlisting>
	<a href="complex-pipeline.xproc?stdin=/db/xproc/examples/test.xml" target="_example">run complex-pipeline.xproc</a>
	</example>
	
	<para>
		This pipeline roughly translates to the following:
		<ul>
		   <li>1. Input stdin XML documents.</li>
		   <li>2. Apply &lt;xinclude&gt; processing (step1).</li>
		   <li>3. Choose (step2) between using an newer (step2a1) or older (step2b1) schema and validate.</li>
		   <li>4. Extract each (step3) HTML &lt;div&gt; element, applying a string replace operation (step3a1).</li>
		   <li>5. Wrap up (step4) the final sequence of &lt;div&gt; elements with a &lt;document&gt; element.</li>
		   <li>6. Output the XML documents to stdout.</li>
		</ul>
		Steps can have other input or output ports defined that work with non-XML documents, but only XML documents (as in XML infoset) can flow between primary input and output ports.
	</para>



	
		<section>
			<title><a href='core-xproc-steps.xml'>Core Steps</a></title>
			<para>
				<ul>
					<li><a href="core-xproc-steps.xml#pipeline">p:pipeline</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.pipeline" target="_spec">spec</a>]: </li>
					<li><a href="core-xproc-steps.xml#foreach">p:for-each</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.for-each" target="_spec">spec</a>]: </li>
					<li><a href="core-xproc-steps.xml#viewport">p:viewport</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.viewport" target="_spec">spec</a>]: </li>
					<li><a href="core-xproc-steps.xml#group">p:group</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.group" target="_spec">spec</a>]: </li>
					<li><a href="core-xproc-steps.xml#choose">p:choose</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.choose" target="_spec">spec</a>]: </li>
					<li><a href="core-xproc-steps.xml#try">p:try</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.try" target="_spec">spec</a>]: </li>
				</ul>
			</para>
		</section>


      	<section>
		<title><a href='components-xproc-steps.xml'>XProc Components</a></title>
		<para>
			<ul>
				<li><a href="components-xproc-steps.xml#ports">input and output ports</a>: </li>
				<li><a href="components-xproc-steps.xml#step">p:pipe, p:inline, p:document, p:data and p:empty</a>: </li>
				<li><a href="components-xproc-steps.xml#log">p:log</a>: </li>
				<li><a href="components-xproc-steps.xml#serialize">p:serialization</a>: </li>
				<li><a href="components-xproc-steps.xml#vars">variables,options and parameters</a>: </li>
				<li><a href="components-xproc-steps.xml#p:declare-step">p:declare-step</a>: </li>
				<li><a href="components-xproc-steps.xml#p:library">p:library</a>: </li>
                <li><a href="components-xproc-steps.xml#p:import">p:import</a>: </li>
			</ul>
		</para>
	</section>

		<section>
			<title><a href='standard-xproc-steps.xml'>Standard Steps</a></title>
			<para>
				<ul>
				<li><b><a href="standard-xproc-steps.xml#p:add-attribute">p:add-attribute</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Add
											an attribute to a set of matching elements.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:add-xml-base">p:add-xml-base</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Add
											or correct <code>xml:base</code> attributes
											on elements.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:compare">p:compare</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Compare
											two documents for equivalence.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:count">p:count</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Count the
											number of documents in source input.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:delete">p:delete</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Delete items
											specified by a match pattern from the source input.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:directory-list">p:directory-list</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Enumerate
											the directory listing into the result output.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:error">p:error</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Generate a
											dynamic error.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:escape-markup">p:escape-markup</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Escape
											source input.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:http-request">p:http-request</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Interact with
											resources identified by Internationalized Resource Identifiers (IRIs)
											over HTTP.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:identity">p:identity</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Make an exact
											copy of an input source to the result output.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:insert">p:insert</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Insert an XML
											selection into the source input.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:label-elements">p:label-elements</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Create a
											label for each matched element, and store the value of the label in
											an attribute.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:load">p:load</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Load an XML
											resource that an IRI specifies and provide it as result output.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:make-absolute-uris">p:make-absolute-uris</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Make
											the value of an element or attribute in the source input an absolute IRI
											value in the result output .
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:namespace-rename">p:namespace-rename</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Rename
											the namespace declarations.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:pack">p:pack</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Merge two
											document sequences.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:parameters">p:parameters</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Make available
											a set of parameters as a <code>c:param-set</code> XML
											document in the result output.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:rename">p:rename</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Rename elements,
											attributes, or processing instruction.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:replace">p:replace</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Replace matching
											elements.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:set-attributes">p:set-attributes</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Set attributes
											on matching elements.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:sink">p:sink</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Accept source input and
											generate no result output.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:split-sequence">p:split-sequence</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Divide a single
											sequence into two.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:store">p:store</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Store a serialized
											version of its source input to a URI.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:string-replace">p:string-replace</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b>Perform string
											replacement on the source input.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:unescape-markup">p:unescape-markup</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Unescape
											the source input.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:unwrap">p:unwrap</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Replace matched elements
											with their children.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:wrap">p:wrap</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Wrap matching nodes
											in the source document with a new parent element.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:wrap-sequence">p:wrap-sequence</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Produce a
											new sequence of documents.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:xinclude">p:xinclude</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Apply XInclude
											processing to the input source.
										</li>
				                        <li>
				                            <b>
				                                <a href="standard-xproc-steps.xml#p:xslt">p:xslt</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Apply an XSLT
											version 1.0 or XSLT version 2.0 style sheet input source.
										</li>
				</ul>
			</para>
		</section>

		<section>
			<title><a href='optional-xproc-steps.xml'>Optional Steps</a></title>
			<para>
				
				<ul>
				<li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:exec">p:exec</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Apply an external
											command to the input source.
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:hash">p:hash</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Generate a message
											digest or a digital fingerprint for some value.
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:uuid">p:uuid</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Generate a
											Universally Unique Identifier (UUID).
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:validate-with-relax-ng">p:validate-with-relax-ng</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Validate
											the input XML with RelaxNG schema.
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:validate-with-schematron">p:validate-with-schematron</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Validate
											the input XML with Schematron schema.
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:validate-with-xml-schema">p:validate-with-xml-schema</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Validate
											the input XML with XML schema.
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:www-form-urldecode">p:www-form-urldecode</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Decode
											the x-www-form-urlencoded string into a set of XProc parameters.
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:www-form-urlencode">p:www-form-urlencode</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Encode
											a set of XProc parameter values as an x-www-form-urlencoded string.
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:xquery">p:xquery</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Apply an XQuery
											version 1.0 query.
										</li>
				                        <li>
				                            <b>
				                                <a href="optional-xproc-steps.xml#p:xsl-formatter">p:xsl-formatter</a> [<a href="http://www.w3.org/XML/XProc/docs/langspec.html#p.add-attribute">spec</a>]:</b> Render an
											XSL version 1.1 document (as in XSL-FO).
										</li>
									</ul>
			</para>
		</section>
		
		<section>
			<title><a href='extension-xproc-steps.xml'>Extension Steps</a></title>
			<para>Implementation specific steps</para>
		</section>
	
		<section>
			<title><a href='functions-xproc-steps.xml'>XProc Functions</a></title>
			<para>
			<ul>
				<li>p:system-property(string property)</li>
				<li>p:step-available(string step-type)</li>
				<li>p:iteration-position()</li>
				<li>p:iteration-size()</li>
				<li>p:base-uri()</li>
				<li>p:resolve-uri(String relative)</li>					
			</ul>
			</para>
		</section>

		</section>

       <section>
			<title>Reuse and Extending XProc</title>
			<para>eXist XProc implementation provides a range of extension mechanisms for creating
                new steps.
			</para>

           <section>
                <title>Defining XProc libraries using XQuery</title>
            </section>
           <section>
                <title>Defining XProc libraries using XSLT</title>
            </section>  
           <section>
                <title>Defining XProc libraries using Java</title>
            </section>

		</section>

       <section>
			<title>W3C XProc Unit Test</title>
			<para> The following links run xprocxq against W3C XProc Unit Test suite
			<ul>
				<li><a href="unit-test/testrunner.xql?type=required/&amp;file=*.xml&amp;not=err&amp;debug=err&amp;dbg=0&amp;format=html" target="_result">All required without err tests</a></li>
                <li><a href="unit-test/testrunner.xql?type=optional/&amp;file=*.xml&amp;not=err&amp;debug=err&amp;dbg=0&amp;format=html" target="_result">All optional without err tests </a></li>
			</ul>
			</para>
            <important>
                <para>Please note that you will need to enable the File extension module and download the W3C XProc test suite
                    to run these tests.</para>
            </important>

		</section>
	    
		<section>
			<title>Additional XProc Resources</title>
			<section>
				<title>Mailing Lists</title>
			<ul>
			<li>W3C XProc dev mailing list xproc-dev@w3.org</li>
			</ul>
			</section>
			<section>
				<title>XProc articles</title>
			<ul>
			<li><a href="http://www.ibm.com/developerworks/library/x-xproc/" target="_resource"> Jim Fuller 'Discovering XProc' IBM Developworks 2008</a></li>

			<li><a href="http://www.xmlprague.cz/2009/presentations/Norman-Walsh-Exploring-XProc/index.html" target="_resource">Norman Walsh XML Prague 2009 XProc Talk</a></li>
		<li><a href="http://www.xmlprague.cz/2009/presentations/Vojtech-Toman-Optimizing-XML-Content-Delivery-with-XProc.pdf" target="_resource">Vojtěch Toman XLM Prague 2009 XProc Talk</a></li>
			</ul>
		</section>
		
			<section>
				<title>XProc Specifications</title>
			<ul>
			<li><a href="http://www.w3.org/XML/XProc/docs/langspec.html" target="_resource">XProc</a>: An XML Pipeline Language]: Explore this W3C XProc Editors Draft (the W3C working draft dated 01 May 2008).</li>


			<li><a href="http://www.w3.org/XML/XProc/docs/langspec.html#namespace-fixup-guidance" target="_resource"> XProc: Section E. Guidance on Namespace Fixup</a>: Review the non-normative list of suggestions for implementors to follow to reduce the need to fix up namespaces.</li>


			<li><a href="http://tests.xproc.org" target="_resource">XProc W3C unit test suite</a>: Repository where draft unit test suite for XProc is being developed.</li>
		</ul>
			</section>
		
			<section>
				<title>Useful</title>
			<ul>
			<li><a href="http://xproc.org" target="_resource">xproc.org</a></li>

			<li><a href="http://xproc.org/implementations/" target="_resource">XProc implementations</a></li>

			<li><a href="http://www.dpawson.co.uk/xproc/index.html" target="_resource">Dave Pawson XProc introduction</a></li>
		</ul>
			</section>
			<section>
				<title>EXProc, EXpath and EXQuery Community Specifications</title>
			<ul>
			<li><a href="http://exprog.org" target="_resource">EXProc</a>: Intended to be a place to discuss and define extension steps to XProc.</li>

			<li><a href="http://expath.org" target="_resource">EXPath</a>: Community defined extensions to XPath. Currently, xprocxq uses expath http-client module.</li>

			<li><a href="http://exquery.org" target="_resource">EXQuery</a>: Community defined extensions to XQuery. Predicted that xprocxq will use any output from this effort.</li>
		</ul>
		</section>
		<section>
			<title>XQuery</title>
			<ul>
				
			<li><a href="http://www.ibm.com/developerworks/edu/x-dw-x-advxquery.html" target="_resource">Jim Fuller's Advancing with XQuery</a>: IBM Developerworks article on implementing application idioms in XQuery</li>

			<li><a href="http://en.wikibooks.org/wiki/XQuery/" target="_resource"> XQuery WikiBooks</a>: Excellent XQuery reference led by Chris Wallace et al.</li>

			<li><a href="http://thewallaceline.blogspot.com/2009/04/xquery-unit-tests.html" target="_resource">Chris Wallace Unit Testing</a>: Nice article on the right way to do Unit Testing in XQuery</li>

			<li><a href="http://code.google.com/p/xprocxq/source/browse/trunk/main/test/xquery/test.xqm" target="_resource">Jim Fuller 'poor mans' XQuery unit testing</a>: simple XQuery module for facilitating tests that I developed during development of xprocxq.</li>
		</ul>
		</section>

			<section>
				<title>XProc links</title>
			<ul>
			<li><a href="http://www.w3.org/TR/2002/NOTE-xml-pipeline-20020228/" target="_resource">XML Pipeline Definition Language Version 1.0: W3C Note 28 February 2002</a>: Read the note submitted by Sun Microsystems, Alis Technologies, Arbortext, Cisco Systems, Fujitsu, Markup Technology, and Oracle.</li>

			<li><a href="http://www.w3.org/TR/2004/NOTE-proc-model-req-20040405/NOTE-proc-model-req-20040405.xml" target="_resource">XML Processing Model Requirements: W3C Working Group Note 05 April 2004</a>: Peruse the W3C WG Note from 05 April 2004.</li>

			<li><a href="http://www.w3.org/Submission/2005/SUBM-xpl-20050411/" target="_resource">XML Pipeline Language (XPL) Version 1.0 (Draft)</a>: Review the W3C Member Submission submitted by Orbeon on 11 March 2005 and published on 11 April 2005.</li>

			<li><a href="http://www.w3.org/XML/XProc/docs/diff.html" target="_resource"> XProc: An XML Pipeline Language (with revision marks)</a>: Peruse the W3C Working Draft with differences dated 8 May 2008.</li>

			<li><a href="http://www.w3.org/TR/xproc-requirements/" target="_resource">XML Processing Model Requirements and Use Cases</a>: Read the W3C XProc requirements and use cases document dated 11 April 2006.</li>

			<li><a href="http://www.w3.org/Submission/xpl/" target="_resource">XML Pipeline Language (XPL) Version 1.0 (Draft)</a>: Check out this draft of the early W3C member submission of an XML pipeline language.</li>
			</ul>
		</section>
	</section>

    <section>
        <title>xprocxq FAQ</title>

        <section>
            <title>Why can't I access files from filesytem ?</title>
        <para>By default, XProc is set to read files only from the XML Database. If you want to access
            files from the hard drive then you will need to enable eXist File extension module
            and make sure to use file:// prefix in your file paths.</para>
        </section>

        <section>
            <title>What is xprocxq ?</title>
        <para>Initially, development of eXist XProc processor was a standalone project, called xprocxq. The i</para>
        </section>

<section>
	<title>xprocxq compliance and limitations</title>
<para>
	xprocxq, being implemented in XQuery, currently has several limitations and is no where compliant with the existing XProc draft specification. The best way to understand what works or doesn't currently is to check out step examples included in the release.
</para>
<para>
	Here is a list of the more severe limitations:
<ul>
	    <li>when selecting elements in a namespace u will have to generically select them</li>

	    <li>due to my use of weak typing in XQuery there are several interrelated issues, but this will change as I sanitize the code</li>

	    <li>have disabled namespace management for the time being which applies XProc namespace fixup rules</li>

	    <li>defining reusable pipelines using p:library, p:import and p:declare-step is currently disabled</li>

	    <li>errors are thrown as XQuery errors, making it difficult to report correct line numbers, not to mention that errors themselves look quite ugly</li>

	    <li>p:choose xpath-context, iteration, etc is not implemented just yet</li>

	    <li>some step sorting issues (specifically intermixing of steps using p:inline), best to use explicit port binding to completely avoid.</li>

	    <li>p:xquery currently uses a c:result element to output, I also added a xproc:escape attribute to c:query to avoid having to wrap XQuery using CDATA (which is XProc spec requirement).</li>

	    <li>declare base-uri affects module imports (need to investigate across all XQuery processors)</li>

	    <li>cant pass required/add-attribute--002.xml test depends on namespace handling module to be finished</li>

	    <li>errors and/or p:error does not write to error port (also discussing need for a generic 'implementator specific error code' with XProc WG)</li>

	    <li>current preparsing routine is naive; I have a more rigorous solution in a source control branch to merge</li>
	</ul>
</para>
</section>
	
    <section>
        <title>Why is xprocxq implemented in XQuery ?</title>
        <para>
        	XQuery's somewhat functional approach appealed to me and having been a long time XSLT user I wanted to gain some understanding of the nuances between XSLT and XQuery.</para>
		<para>
			In building xprocxq, my primary goals were;
			<ul>
				<li>creating an implementation in XQuery meant that XProc processor will be as
					performant as the underlying XQuery implementation and be able to naturally process XML data stored in XML Database.</li>
                <li>make it easier to allow for extension steps to be built using xquery (and xslt)</li>
			    <li>Exercise fundamental FP principles building a non trivial XQuery application. I think I have achieved this goal, as xprocxq 'main engine' is the u:step-fold function (in util.xqm) which operates on simple pipelines.</li>
			    <li>To understand variability between XQuery processors. I think there is a surprising amount of differences between XQuery processors, but thankfully mostly in the form of extension functions, implicit type casting and in smaller part some interpretations of the spec (where the spec allowed for impl to do things as they see fit). The real impact though is that we need things like EXPath and EXQuery to allow for even a remote chance of compatibility between XQuery processors</li>
			</ul>
		</para>
		<para>I think that most people will find using XProc with XQuery is a powerful combination which can be used to implement a wide range of server side applications.
        </para>
    </section>

</section>
</chapter>
    
</book>
