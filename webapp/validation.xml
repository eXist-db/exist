<?xml version="1.0" encoding="UTF-8"?>
<book>
    <bookinfo>
        <graphic fileref="logo.jpg"/>
        <productname>Open Source Native XML Database</productname>
        <title>XML Validation</title>
        <author>
            <firstname>Dannes</firstname>
            <surname>Wessels</surname>
            <affiliation>
                <address format="linespecific">
                    <email>dizzzz at exist-db.org</email>
                </address>
            </affiliation>
        </author>
    </bookinfo>

    <ci:include xmlns:ci="http://apache.org/cocoon/include/1.0" src="sidebar.xml"/>

    <chapter>
        <title>XML Validation</title>
        <section id="sect1">
            <title>Introduction</title>
            <para>The database supports implicit and explicit validation of XML documents. Implicit
                validation can be executed automagically when documents are being inserted into the
                database, explicit validation can be performed using xquery extension
            functions.</para>
        </section>
        <section id="sect2">
            <title>Implicit validation</title>
            <para>To enable this feature the eXist-db configuration must be changed by editing the
                file <filename>conf.xml</filename>. The following items must be configured:<itemizedlist>
                    <listitem>
                        <para>Validation mode</para>
                    </listitem>
                    <listitem>
                        <para>Catalog Entity Resolver</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <example>
                    <title>Default configuration</title>
                    <programlisting format="linespecific"><![CDATA[
    <validation mode="auto">
        <entity-resolver>
            <catalog uri="${WEBAPP_HOME}/WEB-INF/catalog.xml" />
        </entity-resolver>
    </validation>]]></programlisting>
                </example>
            </para>

            <section>
                <title>Validation mode</title>
                <para>With the parameter <emphasis>mode</emphasis> it is possible to switch on/off
                    the validation capabilities of the (Xerces) XML parser. The possible values are:</para>
                <section>
                    <title>yes</title>
                    <para>Switch on validation. All XML documents will be validated. When the
                        grammar (XML schema, DTD) documents cannot be resolverd, the document will
                        be rejected.</para>
                </section>
                <section>
                    <title>no</title>
                    <para>Switch off validation. All well-formed XML documents will be
                    accepted.</para>
                </section>
                <section>
                    <title>auto (default)</title>
                    <para>Validation of an XML document will be performed based on the contents of
                        the document. When a document contains a reference to a grammar (XML schema
                        or DTD) document, the XML parser tries to resolve this grammar and the XML
                        document will be validated against this grammar, just like
                            <emphasis>mode="yes"</emphasis> is configured. If the grammar cannot be
                        resolved, the XML document will be rejected. When the XML document does not
                        contain a reference to a grammar, it will be parsed like
                        <emphasis>mode="no"</emphasis> is configured.</para>
                </section>
            </section>


            <section>
                <title>Catalog Entity Resolver</title>
                <para>All grammar (XML schema, DTD) files that must be part of the implicit
                    validation process must be registered to the database using <ulink
                        url="http://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html"
                        >OASIS catalog</ulink> files. These catalog files can be stored on disk and
                    in the database.</para>
                <para>In the upper example the ${WEBAPP_HOME} is substituted by a
                    <emphasis>file://</emphasis> URL pointing to the 'webapp'-directory of eXist or
                    the equivalent directory of a deployed WAR file when eXist is deployed in a
                    servlet container (e.g. '${CATALINA_HOME}/webapps/exist/')</para>
                <para>A catalog which is stored in the database can be addressed by an URL like
                    'xmldb:exist:///db/mycollection/catalog.xml' (note the 3 slashes) or the shorter
                    equivalent '/db/mycollection/catalog.xml'.</para>
                <para>
                    <example>
                        <title>Default OASIS catalog file</title>
                        <programlisting format="linespecific"><![CDATA[
    <?xml version="1.0" encoding="UTF-8"?>
    <catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
        <public publicId="-//PLAY//EN" uri="entities/play.dtd"/>
        <system systemId="play.dtd" uri="entities/play.dtd"/>
        <system systemId="mondial.dtd" uri="entities/mondial.dtd"/>    
        
        <uri name="http://exist-db.org/samples/shakespeare" uri="entities/play.xsd"/>
        
        <uri name="http://www.w3.org/XML/1998/namespace" uri="entities/xml.xsd"/>
    	<uri name="http://www.w3.org/2001/XMLSchema" uri="entities/XMLSchema.xsd"/>
    
        <uri name="urn:oasis:names:tc:entity:xmlns:xml:catalog" uri="entities/catalog.xsd" />
    </catalog>]]></programlisting>
                    </example>
                </para>
                <para>It is possible to configure any number of catalog entries in the
                    entity-resolver section of conf.xml .</para>
            </section>
        </section>

        <section id="sect3">
            <title>Explicit validation</title>
            <para>The database provides two extension functions to perform XML validation from an
                xquery script:<itemizedlist>
                    <listitem>
                        <para>validate(...)</para>
                    </listitem>
                    <listitem>
                        <para>validate-report(...)</para>
                    </listitem>
                </itemizedlist></para>
            <para>The first function returns a simple <emphasis>true</emphasis> or
                <emphasis>false</emphasis> while the second generates a XML validation report. Both
                functions accept either one or two parameters:</para>
            <itemizedlist>
                <listitem>
                    <para>validate($a) : Validate $a using the same catalog as used by the implicit
                        validation process.</para>
                </listitem>
                <listitem>
                    <para>validate-report($a,$b) : Validate $a using $b.</para>
                </listitem>
            </itemizedlist>
            <para>Explaination of parameters:</para>
            <variablelist>
                <varlistentry>
                    <term>$a</term>

                    <listitem>
                        <para>XML document as <itemizedlist>
                                <listitem>
                                    <para>xs:anyURI pointing to an XML resource (e.g.
                                        'xmldb:exist:///db/mycollection/doc.xml')</para>
                                </listitem>
                                <listitem>
                                    <para>node (element or document node)</para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>$b</term>

                    <listitem>
                        <para>xs:anyURI pointing to <itemizedlist>
                                <listitem>
                                    <para>an OASIS catalog xml-file (uri ends with ".xml")</para>
                                </listitem>
                                <listitem>
                                    <para> a grammar file (uri ends with ".xsd" or ".dtd")</para>
                                </listitem>
                                <listitem>
                                    <para>a collection (uri ends with "/") inside the database; XSDs
                                        are directly queried using the appropriate namespace
                                            (<code>"http://www.w3.org/2001/XMLSchema"</code>) while
                                        the DTDs are resolved by querying OASIS XML catalog
                                        documents (namespace
                                            <code>urn:oasis:names:tc:entity:xmlns:xml:catalog</code>).</para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <example>
                <title>Validation report</title>
                <programlisting format="linespecific"><![CDATA[    <report>
        <status>invalid</status>
        <time>62</time>
        <message level="Error" line="12" column="15">cvc-complex-type.2.4.a: Invalid content was 
        found starting with element 'name'. One of '{"http://jmvanel.free.fr/xsd/addressBook":cname}' is expected.</message>
    </report></exist>]]></programlisting>
            </example>
        </section>

        <section id="sect4">
            <title>Grammar management</title>
            <para>The XML parser (Xerces) compiles all grammar files (dtd, xsd) when they are used.
                For efficiency reasons these compiled grammars are cached for reuse, this results
                into a dramatic increase of validation speed. However under certain conditions (e.g.
                grammar development) this cache must be cleared. There are two related functions
                available: <itemizedlist>
                    <listitem>
                        <para>clear-grammar-cache() : removes all cached grammar and returns the
                            number of removed grammar</para>
                    </listitem>
                    <listitem>
                        <para>show-grammar-cache() : returns an XML report about all cached
                        grammar</para>
                    </listitem>
                </itemizedlist>
            </para>
            <example>
                <title>Cached grammars Report</title>
                <programlisting format="linespecific"><![CDATA[
    <?xml version='1.0'?>
    @@@]]></programlisting>
            </example>
        </section>

        <section id="sect4a">
            <title>Interactive Client</title>
            <para>Commands on the interface</para>
        </section>

        <section id="sect5">
            <title>XML instance examples</title>
            <para>
                <example>
                    <title>namespace</title>
                    <para>Most simple reference to an XML schema. The xmlns info is used by the
                        parser to resolve the grammar document.</para>
                    <programlisting format="linespecific"><![CDATA[
    <?xml version='1.0'?>
    <addressBook xmlns="http://jmvanel.free.fr/xsd/addressBook">
        .....
    </addressBook>]]></programlisting>
                </example>

                <example>
                    <title>schemaLocation</title>
                    <para>xsi:schemaLocation provides additional information to the parser on how to
                        resolve grammar file. According to the XML schema specifications this
                        information is considered to be a hint and might be ignored. eXist will
                        ignore this informaton, the grammar will be resolved like the previous
                        example.</para>
                    <programlisting format="linespecific"><![CDATA[
    <?xml version='1.0'?>
    <addressBook xsi:schemaLocation="http://jmvanel.free.fr/xsd/addressBook http://myshost/schema.xsd" 
                 xmlns="http://jmvanel.free.fr/xsd/addressBook" 
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        .....
    </addressBook>]]></programlisting>
                </example>

                <example>
                    <title>noNamespaceSchemaLocation</title>
                    <para>Taken from: conf.xml. The xsi:noNamespaceSchemaLocation is honoured by the
                        parser.</para>
                    <programlisting format="linespecific"><![CDATA[
    <?xml version='1.0'?>
    <exist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
           xsi:noNamespaceSchemaLocation="schema/conf.xsd">
        .....
    </exist>]]></programlisting>
                </example>

                <example>
                    <title>DTD DOCTYPE</title>
                    <para>Taken from 'samples/validation/dtd'. eXist resolves the grammar by
                        searching catalog files for the PUBLIC identifier.</para>
                    <programlisting format="linespecific"><![CDATA[
    <?xml version='1.0'?>
    <!DOCTYPE PLAY PUBLIC "-//VALIDATION//EN" "hamlet.dtd">
    <PLAY>
        .....
    </PLAY>]]></programlisting>
                </example>

            </para>
        </section>

        <section id="sect6">
            <title>Special notes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Tomcat has an long standing bug which makes it impossible to register
                            a custom protocol handler (object URLStreamHandler) to the JVM. The
                            alternative is to register the object by setting the system property
                                <code>java.protocol.handler.pkgs</code> but this fails as well.</para>
                        <para>As a result the validation features are only partly useable in tomcat.
                            There are two altenatives: (1) switch to a recent version of Jetty, or
                            (2) use absolute URLs pointing the the rest interface, e.g.
                                <code>http://localhost:8080/exist/rest/db/mycollection/schema.xsd</code>.</para>
                    </listitem>
                    <listitem>
                        <para>eXist heavily relies on the features as provided by the Xerces XML
                            parser. By default eXist izPack installer provides all required jar
                            files</para>
                        <para>When eXist is installed in e.g. Tomcat the required parser libraries
                            need to be copied from the lib/endorsed directory into the server
                            'endorsed' @@@ directory.</para>
                        <para>Required endorsed files: resolver-*.jar xalan-*.jar xml-apis.jar
                            serializer-*.jar xercesImpl-*.jar</para>
                    </listitem>
                    <listitem>
                        <para>@@To prevent potential deadlocks it is considered to be a good idea to
                            store XML instance documents and grammar documents in seperate
                            collections.</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </chapter>
</book>
