<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="db2html.xsl"?>
<book><bookinfo><graphic fileref="logo.jpg"></graphic><title>GSoC 2007 : eXist eXtension to full text search</title><author><firstname>Akhil</firstname><surname>Kumar Meshram</surname><affiliation><address format="linespecific"><email>itakhil@gmail.com</email></address></affiliation></author></bookinfo><include src="sidebar.xml" xmlns="http://apache.org/cocoon/include/1.0"></include><chapter><title>eXist eXtension to full text search - Statement of Work</title><section><title>Project Description</title><para>XQuery is a query language (with some programming language features) that is designed to query collections of XML documents. It is semantically similar to SQL. "The mission of the XML Query project is to provide flexible query facilities to extract data from real and virtual documents on the World Wide Web, therefore finally providing the needed interaction between the Web world and the database world. Ultimately, collections of XML files will be accessed like databases". <a href="http://www.w3.org/TR/xquery/">XQuery</a> is the standardized query language.  XQuery 1.0 does not include features for updating XML documents or databases; it also lacks full text search capability.  These features are both under active development for a subsequent version of the language. The W3C is putting their efforts to incorporate full text search in the XML databases. They have already published first drafts for <a href="http://www.w3.org/TR/2005/WD-xquery-full-text-20050404/">XQuery 1.0 and XPath 2.0 Full-Text</a> extension to XQuery, describing a syntax for full-text queries. A EBNF grammar for XQuery 1.0 with full text extension is been given in this draft which would be a prime reference for the development of full text extension in eXist.</para><para>eXist always featured a set of special functions and operators to support full-text search, i.e. queries on tokens and phrases rather than substrings. Full-text queries are performed on tokens and phrases. Tokens and phrases are produced via tokenization. Tokenization enables functions and operators that operate on a part or the root of the token (e.g., wildcards, stemming). A stemming algorithm reduces the words "fishing", "fished", "fish", and "fisher" to the root word, "fish". This root words can also be considered as a canonical form of the tokens. Tokenization enables functions and operators which work with the relative positions of tokens (e.g., proximity operators). A token is defined as a character, n-gram, or sequence of characters returned by a tokenizer as a basic unit to be searched. However eXist need to have a tokenizer which can tokenize the input character stream according to the customized user preferences (in case any like stemmer, stop words etc.). eXist team is working on n-gram tokens which would be a reference for the modularization of the Full text indexes.</para><para>The following are the planned project tasks.<ul><li>Integration of XQuery Full Text EBNF grammar into eXist's XQuery Parser</li><li>Modularization of current Full text indexes as per new indexing architecture</li><li>Refactorization of current Full text indexes to allow it to take benefit from the full text classes (analyzers, stemmers etc.)</li></ul></para><para>The above work indeed will be a contribution to the current W3C Full text working group.</para></section><section><title>Proposed Solution</title><para>eXist parses an XQuery expression in (currently) 4 phases:<ul><li>lexical analysis in XQueryLexer</li><li>syntax analysis and construction of an intermediate AST (abstract syntax tree) in XQueryParser.</li><li>analysis of the intermediate AST, and construction of the executable XQuery expression tree from the intermediate AST in {@link XQueryTreeParser}.</li><li>static analysis of the final expression tree.</li></ul>The grammar in XQuery.g corresponds to phase 2. It generates an intermediate AST which will then be parsed a second time by XQueryTree.g.     The integration of XQuery EBNF grammar requires addition of FTOptions, FTSelection and FTMatchOptions etc. as per  <a href="http://www.w3.org/TR/2005/WD-xquery-full-text-20050404/">W3C recommendations</a> in XQuery.g and XQueryTree.g.</para><para>The extension to full text search is done by implementing abstract Analyzer class. Before text is indexed, it is passed through an Analyzer. Analyzers are in charge of extracting index able tokens out of text to be indexed, and eliminating the rest. eXist will come with a few different Analyzer implementations. Some of them deal with skipping stop words (frequently-used words that don't help distinguish one document from the other, such as "a," "an," "the," "in," "on," etc.), some deal with converting all tokens to lowercase letters, so that searches are not case-sensitive, and so on. The user can implement different analyzers just by implementing the abstract Analyzer class and overriding the functions (this is must otherwise the analyzer ends up in continuous while loop). This analysis takes place in 2 totally different occasions.<ul><li>At indexing time: the index should pass the incoming stream to its analyzer (defined in a configuration) then store the resulting tokens,       whatever their form (lemmas, stems, NGrams...).</li><li>At query time: the query should also pass the incoming query to the *same* analyzer and search the resulting tokens in the index.</li></ul></para><para>This extension point is used to register text analyzers when indexing and searching XML Databases. Analyzers allow indexing of token streams (streams of words). Analyzers create tokens from the character stream. They examine text content and provide tokens for use with the index. The text stream can be tokenized in many unique ways (stems, ngrams, lemmas ...). A trivial analyzer can tokenize streams at white space; a different one can perform filtering of tokens, based on the application needs.     Analyzers used by the system should perform language and grammar aware tokenization and normalization of indexed text. For some languages, the quality of search increases significantly if stop word removal and stemming is performed on the indexed text. The analyzer contributed to this extension point will override the one provided eXist for a given locale.</para><para>eXist team is working to introduce the new user customizable indexing framework. Ngram Indexes are already been implemented as a user customized index under org.exist.indexing.impl package. In order to modularize the current FT Indexes, FTIndex files is to be implemented in the line of Ngram Indexes. With this implementation the user has a choice to go for FTIndexing, Ngram indexing and normal indexing. These choices are specified in collection.xconf.</para></section><section><title>Implementation Schedule</title><para>Work on this project will be scheduled as follows (The following is the tentative schedule and subject to change ;-))<ul><li>Week 1-2 June : Integration of FT Grammar in XQuery.g and XQueryTree.g</li><li>Week 3 June  : JUnit cases of above module</li><li>Deliverable 1: Modified XQuery.g and XQueryTree.g</li><li>Week 4 June - Week 1 July : Modularization of current FT Indexes</li><li>Week 2 July : JUnit Cases of above module</li><li>Deliverable 2: org.exist.indexing.impl.FTIndex.java, org.exist.indexing.impl.FTIndexConfig.java and org.exist.indexing.impl.FTIndexWorker.java</li><li>Weeks 3-4 July: Addition of Analyzer package which support Full text search in org.exist.xquery</li><li>Weeks 1 August: JUnit cases of above module</li><li>Deliverables 3: org.exist.xquery.Analyzer package with JUnit Cases</li><li>Weeks 2-3 August: Documentation of all the modules</li></ul></para></section><section><title>Deliverables</title><para><ul><li>Modified XQuery.g and XQueryTree.g</li><li>org.exist.indexing.impl.FTIndex.java, org.exist.indexing.impl.FTIndexConfig.java and org.exist.indexing.impl.FTIndexWorker.java</li><li>org.exist.xquery.Analyzer package</li><li>JUnit cases for all modules</li><li>Documentation and Examples</li></ul></para></section><section><title>Student Profile</title><para>My name is Akhil Kumar Meshram and I have been selected to participate in the<a href="http://code.google.com/soc">Google Summer of Code 2007</a>for the eXist Open Source Native XML Database Project. I will be working on an eXist eXtension to full text search, under the supervision of my mentor Pierrick Brihaye.</para><para>I am a Masters Computer Sciences student at the<a href="http://www.iiitm.ac.in">Indian Institute of Information Technology and Management, Gwalior</a>in India. I am well acquainted with XML Technologies and have an hand on experience in Java and C. I am initiator and active member of Human Centered Computing Lab in IIITM and member of Semantic Web Research Team. I have tried to substantiate my research work by four publications at International Conference and 1 publication at International Journal.</para><para>I am currently having my research internship at<a href="http://cri.ensmp.fr">CRI</a>, Ecole des Mines de Paris, Fontainebleau. I am working on PIPS extension to C language for Efficient Code Optimization of Large Multimedia Applications in SOCs.</para><para>I am very pleased to have been accepted to work on the eXist eXtension to full text search project. I sincerely hope to make a positive contribution to the eXist initiative and W3C effort on Full text extension of XQuery and XPath. </para></section></chapter></book>