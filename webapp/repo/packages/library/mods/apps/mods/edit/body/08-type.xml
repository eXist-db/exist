<?xml version="1.0" encoding="UTF-8"?>
<div xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xf="http://www.w3.org/2002/xforms" class="type" tab-id="type">
    <div class="block-form">
        <!--DLF/Aquifer: REQUIRED-->
        <!--Cluster: include-->
        <!-- The DLF/Aquifer Implementation Guidelines for Shareable MODS Records require the use in all records of at least one typeOfResource element using the required enumerated values. This element is repeatable. -->
        <fieldset level="1">
            <div class="join">
                <span class="legend">Resource Types</span>
                <span class="join-button">
                    <xf:trigger>
                        <xf:label>&#160;+</xf:label>
                        <xf:action ev:event="DOMActivate">
                            <xf:insert nodeset="mods:typeOfResource" at="index('type-of-resource-repeat')" position="after"/>
                        </xf:action>
                    </xf:trigger>
                </span>
                <span class="join-button">
                    <xf:trigger>
                        <xf:label>&#160;â€“</xf:label>
                        <xf:action ev:event="DOMActivate">
                            <xf:delete ev:event="DOMActivate" nodeset="instance('save-data')/mods:typeOfResource" at="index('type-of-resource-repeat')"/>
                        </xf:action>
                    </xf:trigger>
                </span>
                <span class="xforms-hint">
                    <span onmouseover="show(this, 'hint', true)" onmouseout="show(this, 'hint', false)" class="xforms-hint-icon"/>
                    <div class="xforms-hint-value">
                        <p> A term that specifies the characteristics and general type of the content of the resource being catalogued. This field includes a
                            high-level type that categorizes the material in a general way. More specific typing is done in the Genre field. </p>
                        <p> Information in Type Of Resource is about the original item. For example, in the case of a digitized photograph, Type Of Resource
                            would apply to the analog original; in born-digital materials, it wouldapply to the original digital format. </p>
                        <p> Resource Type, Genre, and Form (under Physical Description) overlap to some extent. </p>
                    </div>
                </span>
            </div>
            
            <!--typeOfResource repeat begins-->
            <xf:repeat nodeset="instance('save-data')/mods:typeOfResource" id="type-of-resource-repeat">
                <!--typeOfResource node-add begins-->
                <!--NB: attributes do not work-->
                <xf:group appearance="full" ref=".[not(.)]">
                    <xf:switch>
                        <xf:case id="typeOfResource-add-node-hide">
                            <div class="node-button">
                                <xf:trigger class="add-button">
                                    <xf:label class="xforms-group-label-centered">&gt;</xf:label>
                                    <xf:toggle case="typeOfResource-add-node-unhide" ev:event="DOMActivate"/>
                                </xf:trigger>
                            </div>
                        </xf:case>
                        <xf:case id="typeOfResource-add-node-unhide">
                            <div class="node-button">
                                <xf:trigger>
                                    <xf:label class="xforms-group-label-centered">&lt;</xf:label>
                                    <xf:toggle case="typeOfResource-add-node-hide" ev:event="DOMActivate"/>
                                </xf:trigger>
                            </div>
                            <div class="node-adds">
                                <xf:group id="typeOfResource-add-node-recommended" ref=".[not(.)]" appearance="full">
                                    <xf:label class="xforms-group-label-centered">Recommended Fields</xf:label>
                                    <!-- <xf:trigger ref=".[not(@collection)]" class="add-button"> <xf:label class="xforms-group-label-centered">Add Object Part</xf:label> <xf:action ev:event="DOMActivate"> <xf:toggle case="typeOfResource-add-node-hide" ev:event="DOMActivate"/> <xf:insert context="." origin="instance('insert-templates')/mods:typeOfResource/@collection"/> </xf:action> </xf:trigger> <xf:trigger ref=".[not(@manuscript)]" class="add-button"> <xf:label class="xforms-group-label-centered">Add Language</xf:label> <xf:action ev:event="DOMActivate"> <xf:toggle case="typeOfResource-add-node-hide" ev:event="DOMActivate"/> <xf:insert context="." origin="instance('insert-templates')/mods:typeOfResource/@manuscript"/> </xf:action> </xf:trigger> <xf:trigger ref=".[not(@displayLabel)]" class="add-button"> <xf:label class="xforms-group-label-centered">Add Transliteration</xf:label> <xf:action ev:event="DOMActivate"> <xf:toggle case="typeOfResource-add-node-hide" ev:event="DOMActivate"/> <xf:insert context="." origin="instance('insert-templates')/mods:typeOfResource/@displayLabel"/> </xf:action> </xf:trigger> <xf:trigger ref=".[not(@altRepGroup)]" class="add-button"> <xf:label class="xforms-group-label-centered">Add Authority</xf:label> <xf:action ev:event="DOMActivate"> <xf:toggle case="typeOfResource-add-node-hide" ev:event="DOMActivate"/> <xf:insert context="." origin="instance('insert-templates')/mods:typeOfResource/@altRepGroup"/> </xf:action> </xf:trigger> <xf:trigger ref=".[not(@usage)]" class="add-button"> <xf:label class="xforms-group-label-centered">Add Usage</xf:label> <xf:action ev:event="DOMActivate"> <xf:toggle case="typeOfResource-add-node-hide" ev:event="DOMActivate"/> <xf:insert context="." origin="instance('insert-templates')/mods:typeOfResource/@usage"/> </xf:action> </xf:trigger> -->
                                    <xf:trigger ref=".[not(mods:typeOfResource)]" class="add-button">
                                        <xf:label class="xforms-group-label-centered">Add Target Audience</xf:label>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:toggle case="typeOfResource-add-node-hide" ev:event="DOMActivate"/>
                                            <xf:insert nodeset="mods:form" at="index('typeOfResource-repeat')" position="after" origin="instance('insert-templates')/mods:typeOfResource/mods:form"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xf:group>
                                <!-- <xf:group id="typeOfResource-add-node-optional">-->
                                <!-- <xf:group id="typeOfResource-add-node-not-recommended"> <xf:label class="xforms-group-label-centered">Deprecated Fields</xf:label>-->
                            </div>
                        </xf:case>
                    </xf:switch>
                </xf:group>
                <!--typeOfResource node-add ends-->
                <!--DLF/Aquifer: RECOMMENDED IF APPLICABLE-->
                <!--Cluster: include-->
                <xf:group ref=".[@collection]" appearance="full" schema_3.3="yes" schema_3.4="yes">
                    <xf:select1 ref="./@collection">
                        <xf:label>Collection:</xf:label>
                        <xf:hint>
                            <p> "Yes" indicates that the resource is a collection. </p>
                            <p> A collection is defined as a multi-part group of resources. One example would be an anthology. If there are multiple resource
                                types within the collection, these should be enumerated in separate Type Of Resource fields. </p>
                            <p> Collection and Manuscript are associated with a specific value used in Type Of Resource. </p>
                            <p> For example, an object which consists of a collection of maps with associated text would be represented by two instances of Type
                                Of Resource. The first would be "Cartographic" with Collection "yes," and the second would be "Text" with Collection "No". </p>
                        </xf:hint>
                        <xf:itemset nodeset="instance('code-tables')/code-table[code-table-name='yes-empty-code']/items/item">
                            <xf:label ref="label"/>
                            <xf:value ref="value"/>
                        </xf:itemset>
                    </xf:select1>
                </xf:group>
                <!--DLF/Aquifer: RECOMMENDED IF APPLICABLE-->
                <!--Cluster: include-->
                <xf:group ref=".[@manuscript]" appearance="full" schema_3.3="yes" schema_3.4="yes">
                    <xf:select1 ref="./@manuscript">
                        <xf:label>Manuscript:</xf:label>
                        <xf:hint>
                            <p> "Yes" indicates that the resource is handwritten or typescript. </p>
                            <p> The fields "collection" and "manuscript" are associated with a specific value used in Type Of Resource. </p>
                            <p> For example, an object which consists of a collection of maps with associated text would be represented by two instances of Type
                                Of Resource. </p>
                            <p> The first would be "Cartographic" with Collection "yes," and the second would be "text" with Collection "No". </p>
                        </xf:hint>
                        <xf:itemset nodeset="instance('code-tables')/code-table[code-table-name='yes-empty-code']/items/item">
                            <xf:label ref="label"/>
                            <xf:value ref="value"/>
                        </xf:itemset>
                    </xf:select1>
                </xf:group>
                <xf:group ref=".[@displayLabel]" appearance="full" schema_3.4="yes">
                    <xf:input ref="./@displayLabel" class="text_50">
                        <xf:label>Display Label:</xf:label>
                        <xf:hint>Hint</xf:hint>
                    </xf:input>
                </xf:group>
                <xf:group ref=".[@altRepGroup]" appearance="full" schema_3.4="yes">
                    <xf:select1 ref="./@altRepGroup">
                        <xf:label>Alternate Representation Groups: </xf:label>
                        <xf:hint>
                            <p>Alternate Representation Groups is used to link alternate representations of the same element content, such as different scripts, transliterations, and translations. 
                                The same attribute value is applied to each of the element instances to be linked.</p>
                        </xf:hint>
                        <xf:itemset nodeset="instance('code-tables')/code-table[code-table-name='altRepGroup-code']/items/item">
                            <xf:label ref="label"/>
                            <xf:value ref="value"/>
                        </xf:itemset>
                    </xf:select1>
                    <!-- 
                        <xf:trigger>
                        <xf:label class="xforms-label-small">-</xf:label>
                        <xf:toggle case="name-add-node-hide" ev:event="DOMActivate"/><xf:toggle case="name-add-node-hide" ev:event="DOMActivate"/>
                        <xf:delete ev:event="DOMActivate" nodeset="instance('save-data')/mods:name/@altRepGroup" at="index('name-repeat')"/>
                        </xf:trigger>
                    -->
                </xf:group>
                <xf:group ref=".[@usage]" appearance="full" schema_3.4="yes">
                    <xf:select1 ref="./@usage">
                        <xf:label>Usage: </xf:label>
                        <xf:hint>
                            <p>Usage with the value "primary" can be used with repeated fields to indicate special prominence of one that is useful for various special purposes such as indexing.</p>
                        </xf:hint>
                        <xf:itemset nodeset="instance('code-tables')/code-table[code-table-name='usage-type-code']/items/item">
                            <xf:label ref="label"/>
                            <xf:value ref="value"/>
                        </xf:itemset>
                    </xf:select1>
                    <!-- <xf:trigger class="delete-button"> <xf:label class="xforms-label-small">-</xf:label> <xf:toggle case="name-add-node-hide" ev:event="DOMActivate"/><xf:toggle case="name-add-node-hide" ev:event="DOMActivate"/> <xf:delete ev:event="DOMActivate" nodeset="instance('save-data')/mods:name/@usage" at="index('name-repeat')"/> </xf:trigger> -->
                </xf:group>
                <!--DLF/Aquifer: RECOMMENDED IF APPLICABLE-->
                <!--Cluster: include-->
                <xf:group ref="." appearance="full" schema_3.3="yes" schema_3.4="yes">
                    <xf:select1 ref=".">
                        <xf:label>Resource Type:</xf:label>
                        <xf:hint>
                            <p> This field includes a high-level type that categorises the material in a general way. More specific typing is done in the Genre
                                field. There may be no value given for Type Of Resource if the Collection or Manuscript field is used and none of the enumerated
                                values is appropriate. Information in Type Of Resource is about the original item. For example, in the case of a digitised
                                photograph, Type Of Resource would apply to the analog original; in born-digital materials, it would apply to the original
                                digital format. </p>
                        </xf:hint>
                        <xf:itemset nodeset="instance('code-tables')/code-table[code-table-name='type-of-resource-code']/items/item">
                            <xf:label ref="label"/>
                            <xf:value ref="value"/>
                        </xf:itemset>
                    </xf:select1>
                </xf:group>
                <!--typeOfResource input ends-->
            </xf:repeat>
            <!--typeOfResource repeat ends-->
            <xf:group id="typeOfResource-add-element" ref=".[not(./mods:typeOfResource)]" appearance="full">
                <xf:trigger ref=".[not(mods:typeOfResource)]" class="add-button">
                    <xf:label class="xforms-group-label-centered">Add Missing Resource Type</xf:label>
                    <xf:action ev:event="DOMActivate">
                        <xf:insert nodeset="mods:form" at="index('typeOfResource-repeat')" position="after" origin="instance('new-instance')/mods:typeOfResource"/>
                    </xf:action>
                </xf:trigger>
            </xf:group>
        </fieldset>
    </div>
</div>