<?xml version="1.0" encoding="UTF-8"?>

<document xmlns:xi="http://www.w3.org/2001/XInclude">

    <xi:include href="header.xml"/>
    <xi:include href="sidebar.xml"/>

    <body>
        <section title="Examples">

            <p>The examples below require some XML documents to be stored in the database. If you
                have not yet imported these files, go to <a
                    href="admin/admin.xql?user=admin&amp;pass=&amp;panel=setup"> Examples
                    Setup</a>.</p>

            <section title="Basic XQuery Examples">
                <table border="0" cellspacing="10">
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xforms/shakespeare.xml">Simple Shakespeare Search</link>
                        </td>
                        <td width="70%">Search Shakespeare's plays using XForms and the KWIC
                            display module.</td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/guess.xql">Guess a Number</link>
                        </td>
                        <td width="70%"> Simple number guessing game to illustrate different
                            servlet features. </td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/table.xql">Simple HTML Example</link>
                        </td>
                        <td width="70%"> Prints a table in HTML with 10x10 cells. </td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/fibo.xql">Fibonacci</link>
                        </td>
                        <td width="70%"> Calculates the first 10 Fibonacci numbers. </td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/login.xql">Session example</link>
                        </td>
                        <td width="70%"> Presents a login page. Only valid database users can log
                            in. User and password are stored in the HTTP session. </td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/twitter.xql">Twitter client</link>
                        </td>
                        <td width="70%">A simple twitter client, which demonstrates
                            how to use the http client library to retrieve XML data
                            from external data sources. There's also an 
                            <a href="xproc/examples/twitter.xproc">XProc version</a> of this
                            code.</td>
                    </tr>
                </table>
            </section>
            
            <section title="More Complex Examples">
                <table border="0" width="100%" cellspacing="10">
                    <tr>
                        <td width="30%" valign="top">
                            <link href="sandbox/sandbox.xql">XQuery Sandbox</link>
                        </td>
                        <td width="70%"> A web interface to execute XQueries on the server. Uses
                            AJAX technology to validate your XQuery while you type. Requires
                            Javascript to be enabled. Demonstrates more advanced techniques for
                            writing web applications with XQuery, XML/HTML, CSS and Javascript.
                        </td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/acronyms.xql">XML Acronyms</link>
                        </td>
                        <td width="70%"> XQuery version of the <a
                            href="http://www.xml-acronym-demystifier.org/"> XML Acronym
                            Demystifier</a>, entirely implemented in XQuery. </td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/search.xql">Search the Documentation</link>
                        </td>
                        <td width="70%">
                            A not too complex example featuring full text queries and
                            post-processing of query results to show keywords in context. 
                        </td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/functions.xql">XQuery Function Library Search</link>
                        </td>
                        <td width="70%">The search interface for XQuery functions demonstrates usage of 
                            the NGram index and AJAX. The function documentation is generated once from
                            the Java classes and stored in XQDoc format.</td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="functions/">RESTful browser for Function Modules</link>
                        </td>
                        <td width="70%">Browse the function documentation without AJAX. Directly access
                            a function using a meaningful URL like "functions/module/function-name". A great
                            example, which demonstrates how to use URL rewriting to construct RESTful URIs.</td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xqts/report.xql">W3C XQuery Test suite (XQTS)</link>
                        </td>
                        <td width="70%"> Using this web application you can run the official XQuery test
                            suite on eXist. You will need to download the test suite data (read
                            the notice shown when you first access the page). The test runner is entirely written
                            in XQuery and is a good example for a complex script using lots of AJAX.</td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/call.xql">First-class functions example</link>
                        </td>
                        <td width="70%"> Demonstrates the use of first-class functions. First-class
                            functions are supported through the eXist-specific extension functions:
                            util:function and util:call. </td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xquery/json-test.xql">Transform XML fragments to JSON</link>
                        </td>
                        <td width="70%">An XQuery does not necessarily need to return XML.</td>
                    </tr>
                </table>
            </section>
            
            <section title="Building Blocks for Web Applications">
                <table border="0" width="100%" cellspacing="10">
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xforms/examples.xml">XForms</link>
                        </td>
                        <td width="70%">Examples based on XML Forms.</td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="xproc/examples.xml">XProc</link>
                        </td>
                        <td width="70%">XProc: the XML pipeline language.</td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            URL Rewriting
                        </td>
                        <td width="70%">eXist's XQueryURLRewrite servlet filter calls a user-defined XQuery to 
                            decide how a HTTP request is handled. The XML fragment returned by the
                            query determines how the request is processed. This happens transparently
                            to the client. One or more "views" can be applied to a request to further processes it.
                            This is how most of the pages here are rendered (except the Cocoon examples). 
                            The <link href="functions/">RESTful functions
								browser</link> implementation is a good demonstration of how to use
							URL rewriting and views. Please have a look at the
							source in
							<code>EXIST_HOME/webapp/functions/</code>.</td>
                    </tr>
                </table>
            </section>
            <section title="Misc Examples">
                <table border="0" width="100%" cellspacing="10">
                    <tr>
                        <td width="30%" valign="top">
                            <link href="rest/db/xinclude/xinclude.xml">XInclude Sample
                            Document</link>
                        </td>
                        <td width="70%">Dynamically generates a page out of the database by
                            expanding XInclude tags found in the source document.</td>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="rest/db/shakespeare/plays/macbeth.xml"> Retrieve a document
                                through REST </link>
                        </td>
                        <td width="70%">Retrieves a document through the REST-style API. The
                            document contains an XSL processing instruction. The XSL stylesheet is
                            read from the database and applied to the output. Please note that also
                            the CSS file referenced by the HTML output is loaded from the
                        database.</td>
                    </tr>
                </table>
            </section>

            <section title="Cocoon Examples">

                <p>These are <emphasis>older examples</emphasis> based on different Cocoon features.
                    Some of the examples have been rewritten in XQuery, so there are now two
                    versions of these. Please note: the demonstrated features, in particular: XSP
                    and the XML:DB transformer, are still functional, but not actively
                        <emphasis>maintained</emphasis>!</p>

                <table border="0" width="100%" cellspacing="10">
                    <tr>
                        <td width="30%" valign="top">
                            <link href="cocoon/biblio.xq">Bibliography</link>
                        </td>
                        <td width="70%"> A bibliographic demo, based on the MODS bibliographic
                            format, which is maintained by the Library of Congress. Shows session
                            handling and user authentication as well as some AJAX goodies. </td>
                    </tr>
                    <tr>
                        <th align="left" colspan="2"> Cocoon XML:DB Pseudo-Protocol </th>
                    </tr>
                    <tr>
                        <td width="30%" valign="top">
                            <link href="cocoon/xmldb/db/">Cocoon-based Database Browser</link>
                        </td>
                        <td width="70%">A database browser which uses Cocoon's <code>xmldb://</code>
                            pseudo-protocol and XSL stylesheets for the rendering.</td>
                    </tr>
                </table>
            </section>
            
            <section title="External Examples">
                <table border="0" width="100%" cellspacing="10">
                    <tr>
                        <td width="30%" valign="top">
                            <link href="http://atomic.exist-db.org/atomic/AtomicWikiFeatures">AtomicWiki</link>
                        </td>
                        <td width="70%">AtomicWiki is a combined Wiki and Weblog entirely
                            written in XQuery (and some XSLT) and using XQuery as a scripting
                            language within Wiki entries and Blog posts.
                        </td>
                    </tr>
                </table>
            </section>
            
        </section>
    </body>
</document>
