<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="db2html.xsl" type="text/xsl"?>
<book xmlns:xi="http://www.w3.org/2001/XInclude">
    <bookinfo>
        <graphic fileref="logo.jpg"/>
        <style href="styles/default-style.css"/>
        <title>Open Source XML Database</title>
        <author>
            <firstname>Wolfgang M.</firstname>
            <surname>Meier</surname>
            <affiliation>
                <address format="linespecific">
                    <email>wolfgang@exist-db.org</email>
                </address>
            </affiliation>
        </author>
    </bookinfo>
    <xi:include href="sidebar.xml"/>
    <!-- Cocoon include for the website docs -->
    <ci:include xmlns:ci="http://apache.org/cocoon/include/1.0" src="sidebar.xml"/>
    <chapter>
        <title>XInclude Examples</title>

        <para>Beginning with version 0.9, eXist comes with partial support for the XInclude
            standard. If configured (as is the default), eXist's XML serializer will scan all XML
            fragments for XInclude tags. Basically, the XInclude processor is implemented as a
            filter which sits between the serializer's output event stream and the receiver. If it
            finds an XInclude element, it will try to expand it. The current element in the stream
            is replaced by the result of the XInclude operation. XInclude processing is thus applied
            whenever eXist serializes an XML fragment, be it a document, the result of an XQuery or
            an XSLT stylesheet.</para>

        <para>eXist's support for XInclude is not complete. You cannot include raw text, just XML.
            XPointers are restricted to XPath; the additional features defined in the XPointer spec
            (points and ranges) are not supported. Since version 1.2, the
            <sgmltag>xi:fallback</sgmltag> element is implemented properly.</para>

        <para>Another common misunderstanding: eXist expands XIncludes at serialization time, which
            means that the query engine will see the XInclude tags <emphasis>before</emphasis> they
            are expanded. You cannot query across XIncludes - unless you create your own code (e.g.
            an XQuery function) for it. We would certainly like to support queries over xincluded
            content in the future though.</para>

        <para>Why do we need XInclude? One reason is that eXist does not preserve entity
            declarations. Entities are resolved by the XML parser, so eXist just sees the expanded
            text, not the entity itself. However, external entities are handy if you want to include
            a given fragment at several locations in different files. For example, the navigation
            sidebar at the left will probably be used by several documents throughout a site, so it
            would be wise to keep it in an external file.</para>

        <para>XInclude provides a powerful alternative. The following sections present some
            examples.</para>

        <note>
            <para>If you came here from the examples page, you are already looking at a page that
                has been passed through XInclude, and you can see the live effect of all the
                examples below. If not, install the example data via the <ulink
                    url="admin/admin.xql?panel=setup">web admin</ulink> interface, then browse to</para>

            <para>
                <ulink url="rest/db/xinclude/xinclude.xml">rest/db/xinclude/xinclude.xml</ulink>
            </para>

            <para>and continue to read there.</para>
        </note>

        <para>By the way, this page also demonstrates some of the possibilities of eXist's REST
            interface. All the files required to render this page reside in the database and are
            read from there, including the logo and the two XSLT stylesheets used for the
            formatting.</para>

        <section>
            <title>Including a Document</title>

            <para>To include an entire document, just specify its path in the <option>href</option>
                attribute of an <sgmltag>xi:include</sgmltag> tag. For example, the sidebar shown at
                the left of this documents has been included as follows:</para>

            <synopsis language="xml"><![CDATA[<xi:include href="sidebar.xml"/>]]></synopsis>

            <para>Please note that, as usual, you have to provide the correct namespace for
                XInclude, e.g. in the root element of the document. The official namespace is: </para>

            <synopsis>http://www.w3.org/2001/XInclude</synopsis>
        </section>

        <section>
            <title>Error Handling</title>

            <para>An error will be generated if you try to (x)include a resource which does not
                exist. You can specify a fallback to avoid the error. The result of the XInclude
                will be the content of the <sgmltag>xi:fallback</sgmltag> element:</para>

            <synopsis language="xml"><![CDATA[<xi:include href="unknown.xml">
    <xi:fallback><p>Included document not found!</p></xi:fallback>
<xi:include>]]></synopsis>

            <para>See the result below:</para>

            <synopsis language="xml">
                <xi:include href="unknown.xml">
                    <xi:fallback><p>Included document not found!</p></xi:fallback>
                </xi:include>
            </synopsis>
        </section>

        <section>
            <title>Shorthand Pointer</title>

            <para>The <option>xpointer</option> attribute is used to identify a portion of the
                resource to include. If the xpointer contains just a barename - called shorthand
                pointer - it will select the first element of the target document that has an
                attribute of type ID matching the name. For example, the following xinclude selects
                the p element from file <filename>disclaimer.xml</filename>, which has an ID
                attribute with value &quot;statement&quot;.</para>

            <synopsis language="xml"><![CDATA[<xi:include href="disclaimer.xml" xpointer="statement"/>]]></synopsis>

            <para>The result of the XInclude will be displayed below:</para>

            <synopsis language="xml">
                <xi:include href="disclaimer.xml" xpointer="statement"/>
            </synopsis>
        </section>
        <section>
            <title>Selecting Fragments by an XPath Expression</title>

            <para>We may also use an XPath expression to select fragments. The
                <option>xpointer</option> attribute contains an XPointer, which consists of so
                called "schemes". An XPath expression can be passed to the
                <command>xpointer()</command> XPointer scheme. The results of the expression will be
                included in place of the <sgmltag>xi:include</sgmltag> element. The following
                expression includes a section taken from Shakespeare's Macbeth:</para>

            <synopsis language="xml">&lt;xi:include href="/db/shakespeare/plays/macbeth.xml"
            xpointer="xpointer(//SPEECH[ngram:contains(SPEAKER, 'witch')][ft:query(., '&quot;fenny snake&quot;')])"/&gt;</synopsis>

            <para>As before, the results are included below:</para>

            <synopsis language="xml">
                <xi:include href="/db/shakespeare/plays/macbeth.xml" xpointer="xpointer(//SPEECH[ngram:contains(SPEAKER, 'witch')][ft:query(., '&quot;fenny snake&quot;')])"/>
            </synopsis>

            <para>An XPath expression will be applied to the entire collection if the path in href
                points to a collection and not a single document:</para>

            <synopsis language="xml">&lt;xi:include href="/db/shakespeare" xpointer="xpointer(//SPEECH[ft:query(., '&quot;cursed spite&quot;')])"/&gt;</synopsis>

            <synopsis language="xml">
                <xi:include href="/db/shakespeare" xpointer="xpointer(//SPEECH[ft:query(., '&quot;cursed spite&quot;')])"/>
			</synopsis>

            <para>Concerning namespaces: all namespace/prefix mappings declared in the source
                document are passed to the query context. Alternatively, you may declare mappings
                with xmlns().</para>

            <synopsis language="xml">&lt;xi:include href="disclaimer.xml" xpointer="xpointer(//comment:comment)xmlns(t=http://nop.com)xmlns(comment=http://test.org)"/&gt;</synopsis>

            <synopsis language="xml">
				<xi:include href="disclaimer.xml" xpointer="xpointer(//comment:comment)xmlns(t=http://nop.com)xmlns(comment=http://test.org)"/>
			</synopsis>
        </section>
        <section>
            <title>Including the Results of a Stored XQuery</title>

            <para>Another powerful feature: if the target of an XInclude reference points to an
                XQuery resource stored in the database (i.e. a binary resource with mime-type
                "application/xquery"), the XInclude processor will try to compile and execute this
                query. The root element included will be the root element returned by the XQuery
                script. For example:</para>

            <synopsis language="xml">&lt;xi:include href="display-collection.xq"/&gt;</synopsis>

            <para>Calls a query without parameters. The result is shown below:</para>

            <synopsis language="xml">
                <xi:include href="display-collection.xq"/>
            </synopsis>

            <para>The XInclude processor declares two variables in the XQuery's static context:</para>

            <variablelist>
                <varlistentry>
                    <term>$xinclude:current-doc</term>
                    <listitem>the name of the document which (x)includes the query (without the
                        collection path)</listitem>
                </varlistentry>
                <varlistentry>
                    <term>$xinclude:current-collection</term>
                    <listitem>the collection in which the current document resides</listitem>
                </varlistentry>
            </variablelist>

            <para>The example above uses <option>xinclude:current-collection</option> to determine
                the collection it should process. However, we can also pass explicit parameters to
                the XQuery:</para>

            <synopsis language="xml">&lt;xi:include href="testvars.xq?var1=Hello&amp;var2=World"/&gt;</synopsis>

            <para>The parameters <parameter>var1</parameter> and <parameter>var2</parameter> will be
                available to the XQuery as an external global variable. However, the XQuery needs to
                declare them or an error will be thrown:</para>

            <synopsis language="xquery">declare variable $var1 external;
declare variable $var2 external;</synopsis>

            <para>The result of the call is included below:</para>

            <synopsis language="xml">
                <xi:include href="testvars.xq?var1=Hello&amp;var2=World"/>
            </synopsis>
        </section>

		<section>
			<title>Including resources from external URIs or the file system</title>

			<para>Beginning with version 1.3, if the URI in the href attribute specifies 
			a known scheme (like http: or file:), eXist will try to load it as an external 
			resource. For example:</para>

			<synopsis language="xml">&lt;xi:include href="http://localhost:8080/exist/rest/db/xinclude/disclaimer.xml"/&gt;</synopsis>

			<para>Should load "disclaimer.xml" via HTTP (assuming that the URL is correct
			and you are using the default eXist setup):</para>

			<synopsis language="xml">
				<xi:include href="http://demo.exist-db.org/rest/db/xinclude/disclaimer.xml">
                	<xi:fallback><p>Included url not found! Example assumes eXist is running at
					http://localhost:8080/exist/</p></xi:fallback>
				</xi:include>
			</synopsis>

			<para>If no scheme is specified, the XInclude processor will first try to load
			the referenced document from the database (relative to the current collection),
			and if that fails: from the file system.</para>

			<para>If the document that contains the xinclude has been constructed in an XQuery,
			relative file system paths will be resolved relative to the main XQuery module 
			source file.</para>

			<para>You can also use XPointers on external resources:</para>
			
			<synopsis language="xml">
				&lt;xi:include href="http://localhost:8080/exist/rest/db/xinclude/disclaimer.xml"
					xpointer="xpointer(//comment:comment)xmlns(comment=http://test.org)"/&gt;
			</synopsis>

			<para>again, the output of this is shown below:</para>

			<synopsis language="xml">
				<xi:include href="http://demo.exist-db.org/rest/db/xinclude/disclaimer.xml"
					xpointer="xpointer(//comment:comment)xmlns(comment=http://test.org)">
					<xi:fallback><p>Included URL not found! Example assumes eXist is running at
					http://localhost:8080/exist/</p></xi:fallback>
				</xi:include>
			</synopsis>

		</section>
    </chapter>
</book>
