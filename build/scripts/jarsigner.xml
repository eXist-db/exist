<?xml version="1.0"?>
<!--
    Dedicated ant "build" file for signing eXist jar files.
    
    The eXist client can now be started via java 'Webstart'. For this,
    all jarfiles (at least the ones used by the swing client: exist.jar
    and lib/core/*.jar) must be signed *with the same* keys..
    
    This script is invoked by the main 'build.xml' file, but the 'core'
    jars need to be signed once manually.
    
    The certificates are stored in the file referred as "keystore.file".
    If the file is already available, it is not overwritten. The main idea
    is that you can supply your own certs. A real certificate will give you
    less warnings / messages during startup.
    
    DWE 2005-05-29
    
    $Id$
-->
<project name="Sign eXist jarfiles" default="jnlp-all" basedir="../..">
    
    <description>Sign jarfiles for eXist webstart application</description>
    
    <!-- Set sign properties -->
    <property name="keystore.alias" value="exist"/>
    <property name="keystore.password" value="secret"/>
    <property name="keystore.file" value="key.store"/>
    <property name="keystore.validity" value="100000"/>
    
    <!-- Check wether the keystore already exists -->
    <available file="${keystore.file}" property="keystore.present"/>
    
    <!-- Shared task -->
    <target name="jnlp-prepare">
        <tstamp/>
    </target> 
    
    <!-- Clean up files that have been copied or generated by this script -->
    <target name="jnlp-clean" description="Delete the keystore file."
            depends="jnlp-prepare">
        <delete file="${keystore.file}"/>
    </target> 
    
    <!-- Sign Jar files created by eXist -->
    <target name="jnlp-sign-exist" 
            description="Sign all EXIST jar files, e.g. exist.jar, exist-XX.jar and start.jar"
            depends="jnlp-prepare,jnlp-keygen">
        
        <signjar alias="${keystore.alias}" storepass="${keystore.password}"
                 keystore="${keystore.file}">
            <fileset dir=".">
                <include name="exist*.jar"/>
                <include name="start.jar"/>
            </fileset>
        </signjar>
    </target>
    
    <!-- Sign Jar files used by eXist -->
    <target name="jnlp-sign-core" description="Sign all CORE jar files in lib/core."
            depends="jnlp-prepare,jnlp-keygen">
        
        <signjar alias="${keystore.alias}" storepass="${keystore.password}"
                 keystore="${keystore.file}">
            <fileset dir="lib/core">
                <include name="*.jar"/>
            </fileset>
        </signjar>
    </target>
    
    <!-- Generate FAKE CERTIFICATE for signing JAR-files -->
    <target name="jnlp-keygen" unless="keystore.present"
            description="Generate a new keystore file if not present." depends="jnlp-prepare">
        <genkey alias="${keystore.alias}" storepass="${keystore.password}"
                keystore="${keystore.file}" validity="${keystore.validity}">
            <dname>
                <param name="CN" value="eXist XML database"/>
                <param name="OU" value="Anonymous"/>
                <param name="O" value="exist-db.org"/>
                <param name="C" value="DE"/>
            </dname>
        </genkey>
    </target>
    
    <!-- Generate FAKE CERTIFICATE for SSL -->
    <target name="jetty-keygen" description="Generate a new keystore file for jetty.">
        <genkey alias="jetty" storepass="${keystore.password}"
                keystore="tools/jetty/etc/keystore"
                validity="${keystore.validity}">
            <dname>
                <param name="CN" value="eXist XML database"/>
                <param name="OU" value="Anonymous"/>
                <param name="O" value="exist-db.org"/>
                <param name="C" value="DE"/>
            </dname>
        </genkey>
    </target>
    
    <!-- All tasks, in the best sequence -->
    <target name="jnlp-all"
            depends="jnlp-prepare,jnlp-keygen,jnlp-sign-exist,jnlp-sign-core"
            description="Create keystore file and sign all EXIST and CORE jar files."/>
    
    <target name="jnlp-sign-all" depends="jnlp-all">
        <echo>This target has been deprecated, please use 'jnlp-all'</echo>
    </target>
    
    <!-- Special task for unsigning jar files -->
    <target name="jnlp-unsign-all"
            description="Unsign all jar files.">
        <taskdef name="unsignjar" 
                 classname="nl.ow.dilemma.ant.jar.UnsignJarTask" 
                 classpath="${asocat-exist.jar}"/>
        <unsignjar>
            <fileset dir=".">
                <include name="exist*.jar"/>
                <include name="start.jar"/>
            </fileset>
            <fileset dir="lib/core">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="lib/extensions">
                <include name="exist-netedit.jar"/>
            </fileset>
            <fileset dir="lib/optional">
                <include name="commons-codec-*.jar"/>
                <include name="commons-httpclient-*.jar"/>
            </fileset>
        </unsignjar>
    </target>
    
    <!-- 
          For experienced developers only ; running this task might (or shall) 
          ruin all jar files. When it works, nice .pack.gz files are created.
      -->
    <target name="jnlp-pack200" description="Compress jar files with pack200.">
        <!-- First remove all signatures from the jar files -->
        <antcall target="jnlp-unsign-all"/>
        
        <!-- Secondly pack-unpack the jar files (normalize) -->
        <taskdef name="repack" 
                 classname="nl.ow.dilemma.ant.jar.RepackJarTask" 
                 classpath="${asocat-exist.jar}"/>
        <repack>
            <fileset dir=".">
                <include name="exist*.jar"/>
                <include name="start.jar"/>
            </fileset>
            <fileset dir="lib/core">
                <include name="*.jar"/>
            </fileset>
        </repack>
        
        <!-- Sign all jars -->
        <antcall target="jnlp-sign-exist"/>
        <antcall target="jnlp-sign-core"/>
        
        <!-- Create jar.pack.gz files -->
        <taskdef name="pack" 
                 classname="nl.ow.dilemma.ant.jar.Pack200Task" 
                 classpath="${asocat-exist.jar}"/>
        <pack>
            <fileset dir=".">
                <include name="exist*.jar"/>
                <include name="start.jar"/>
            </fileset>
            <fileset dir="lib/core">
                <include name="*.jar"/>
            </fileset>
        </pack>
    </target> 
    
</project>
