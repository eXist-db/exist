<!-- 
    Ant build file for the exist-db extension modules.
    
    Requires a configuration file called local.build.properties or build.properties.
    
    $Id$
-->
<project basedir="." default="jar" name="modules">

    <!--
        Reference to directories
    -->
    <property name="src" value="./src"/>
    <property name="classes" value="./classes"/>
    
    <property name="top.dir" value="../.."/>
    <property file="${top.dir}/build.properties"/>

    <property name="build.compiler" value="modern"/>

    <!--
        Get values from properies files. Note that the values in "local.build.properties" 
        are leading to "build.properties".
    -->
    <property file="../local.build.properties"/>
    <property file="../build.properties"/>

    <!-- Modules (in alphabetical order) -->
    <condition property="include.module.cache.config">
        <istrue value="${include.module.cache}"/>
    </condition>
    <condition property="include.module.compression.config">
        <istrue value="${include.module.compression}"/>
    </condition>
    <condition property="include.module.context.config">
        <istrue value="${include.module.context}"/>
    </condition>
    <condition property="include.module.counter.config">
        <istrue value="${include.module.counter}"/>
    </condition>
    <condition property="include.module.datetime.config">
        <istrue value="${include.module.datetime}"/>
    </condition>
    <condition property="include.module.example.config">
        <istrue value="${include.module.example}"/>
    </condition>
    <condition property="include.module.file.config">
        <istrue value="${include.module.file}"/>
    </condition>
    <condition property="include.module.httpclient.config">
        <istrue value="${include.module.httpclient}"/>
    </condition>        
    <condition property="include.module.ftpclient.config">
        <istrue value="${include.module.ftpclient}"/>
    </condition>
    <condition property="include.module.image.config">
        <istrue value="${include.module.image}"/>
    </condition>
    <condition property="include.module.jfreechart.config">
        <istrue value="${include.module.jfreechart}"/>
    </condition>
	<condition property="include.module.jfreechart_svg">
	    <and>
            <istrue value="${include.module.jfreechart}"/>
            <istrue value="${include.module.xslfo}"/>
        </and>
    </condition>
    <condition property="include.module.jndi.config">
        <istrue value="${include.module.jndi}"/>
    </condition>
    <condition property="include.module.lib.config">
        <istrue value="${include.module.lib}"/>
    </condition>
    <condition property="include.module.mail.config">
        <istrue value="${include.module.mail}"/>
    </condition>
    <condition property="include.module.math.config">
        <istrue value="${include.module.math}"/>
    </condition>
    <condition property="include.module.memcached.config">
        <istrue value="${include.module.memcached}"/>
    </condition>   
	<condition property="include.module.oracle.config">
	    <and>
            <istrue value="${include.module.oracle}"/>
            <available classname="oracle.jdbc.OracleTypes"/>
        </and>
    </condition>
    <condition property="include.module.scheduler.config">
        <istrue value="${include.module.scheduler}"/>
    </condition>
    <condition property="include.module.simpleql.config">
        <istrue value="${include.module.simpleql}"/>
    </condition>
    <condition property="include.module.sql.config">
        <istrue value="${include.module.sql}"/>
    </condition>
    <condition property="include.module.xmldiff.config">
        <istrue value="${include.module.xmldiff}"/>
    </condition>
    <condition property="include.module.xmpp.config">
        <istrue value="${include.module.xmpp}"/>
    </condition>
    <condition property="include.module.xslfo.config">
        <istrue value="${include.module.xslfo}"/>
    </condition>
    <condition property="include.module.xmlcalabash.config">
        <istrue value="${include.module.xmlcalabash}"/>
    </condition>
    <condition property="include.module.expathrepo.config">
        <istrue value="${include.module.expathrepo}"/>
    </condition>
    <path id="classpath.core">
        <fileset dir="${top.dir}/${lib.core}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.optional}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.endorsed}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.user}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/tools/ant/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/extensions/modules/lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${top.dir}/exist.jar"/>
        <pathelement path="${top.dir}/exist-optional.jar"/>
        <pathelement path="${top.dir}/start.jar"/>
        <pathelement path="${java.class.path}"/>
    </path>


    <taskdef name="fetch" classname="nl.ow.dilemma.ant.fetch.FetchTask" classpathref="classpath.core" />

    <!-- 
        Special targets for XSLFO module 
    -->
    <condition property="libs.available.xslfo">
        <and>
            <available file="${top.dir}/${lib.user}/fop.jar"/>
            <available file="${top.dir}/${lib.user}/batik-all-1.7.jar"/>
            <available file="${top.dir}/${lib.user}/xmlgraphics-commons-1.4.jar"/>
            <available file="${top.dir}/${lib.user}/avalon-framework-4.2.0.jar"/>
        </and>
    </condition>

    <target name="prepare-xslfo" unless="libs.available.xslfo" if="include.module.xslfo.config">
        <echo message="Load: ${include.module.xslfo}"/>
        <echo message="------------------------------------------------------"/>
        <echo message="Downloading libraries required by the xsl-fo module"/>
        <echo message="------------------------------------------------------"/>

        <!-- Apache FOP -->       
        <fetch classpathref="classpath.core" dest="${top.dir}/${lib.user}" url="${include.module.xslfo.url}">
            <patternset>
                <include name="**/fop.jar"/>
                <include name="**/batik-all-*.jar"/>
                <include name="**/xmlgraphics-commons-*.jar"/>
                <include name="**/avalon-framework-*.jar"/>
            </patternset>
        </fetch>        

    </target>

    <!-- 
        existdb-contrib fetch task import used for downloading and extracting jar/class from zip
    -->
    <taskdef name="fetch" classname="nl.ow.dilemma.ant.fetch.FetchTask" classpathref="classpath.core" />

   <!--
        Special targets for expath package module
    -->
    <target name="prepare-expathrepo" if="include.module.expathrepo.config">
        <echo message="------------------------------------------------------"/>
        <echo message="Downloading libraries required by the expath package module"/>
        <echo message="------------------------------------------------------"/>

        <!-- disabled because teamcity doesn't like it -->
          <!--get src="${include.module.expathrepo.url}"
                dest="${top.dir}/${lib.core}"/-->

    </target>

    <!-- 
        Special targets for xmlcalabash module 
    -->
    <target name="prepare-xmlcalabash" if="include.module.xmlcalabash.config">
        <echo message="------------------------------------------------------"/>
        <echo message="Downloading libraries required by the xmlcalabash module"/>
        <echo message="------------------------------------------------------"/>

        <fetch classpathref="classpath.core" dest="${top.dir}/${lib.user}" 
               url="${include.module.xmlcalabash.url}" classname="com.xmlcalabash.drivers.Main">
            <patternset>
              <include name="**/calabash.jar"/>
            </patternset>
        </fetch>

    </target>

    <!-- 
        Special targets for simpleql module 
    -->
    <uptodate property="parser.uptodate" srcfile="${src}/org/exist/xquery/modules/simpleql/SimpleQLParser.g"
        targetfile="${src}/org/exist/xquery/modules/simpleql/SimpleQLParser.java"/>

    <target name="prepare-simpleql" unless="parser.uptodate" if="include.module.simpleql.config">
        <echo message="Running ANTLR to generate XQuery parser"/>
        <antlr target="${src}/org/exist/xquery/modules/simpleql/SimpleQLParser.g"
            outputdirectory="${src}/org/exist/xquery/modules/simpleql" traceparser="${antlr.traceParser}"
            tracelexer="${antlr.traceLexer}">
            <classpath>
                <path refid="classpath.core"/>
            </classpath>
        </antlr>
    </target>

    <!-- 
        Special targets for jfreechart module unless="jfreechart-present"
    -->
    <target name="prepare-jfreechart" if="include.module.jfreechart.config">
        <echo message="-------------------------------------------------------"/>
        <echo message="Downloading libraries required by the jfreechart module"/>
        <echo message="-------------------------------------------------------"/>

        <fetch classpathref="classpath.core" dest="${top.dir}/${lib.user}" 
                             url="${include.module.jfreechart.url}" classname="org.jfree.chart.JFreeChart"
                             usecache="true">
            <patternset>
                <include name="**/lib/jfreechart-*.jar"/>
                <include name="**/lib/jcommon-*.jar"/>
                <exclude name="**/lib/jfreechart-*-*.jar"/>
            </patternset>
        </fetch>
    </target>

    <!-- 
        Special targets for memcached module
    -->
    <target name="prepare-memcached" if="include.module.memcached.config">
        <echo message="-------------------------------------------------------"/>
        <echo message="Downloading libraries required by the memcached module"/>
        <echo message="-------------------------------------------------------"/>
        
        <fetch classpathref="classpath.core" dest="${top.dir}/${lib.user}" 
            url="${include.module.memcached.url}" classname="net.spy.memcached.MemcachedClient"/>
    </target>

    <!-- 
        Special targets for xmpp module 
    -->
    <target name="prepare-xmpp" if="include.module.xmpp.config">
        <echo message="--------------------------------------------------"/>
        <echo message="Downloading libraries required by the XMPP module"/>
        <echo message="--------------------------------------------------"/>

        <fetch classpathref="classpath.core" dest="${top.dir}/${lib.user}" 
                             url="${include.module.xmpp.url}" classname="org.jivesoftware.smack.XMPPConnection">
            <patternset>
                <include name="**/smack.jar"/>
                <include name="**/smackx.jar"/>
            </patternset>
        </fetch>

    </target>

    <!-- 
        ========================================
        Below this line only generic build items
        ========================================
    -->
    <target name="prepare-ivy">
       <fetch classpathref="classpath.core" dest="${top.dir}/tools/ant/lib/" 
            url="http://repo1.maven.org/maven2/org/apache/ivy/ivy/2.2.0/ivy-2.2.0.jar" 
            classname="org.apache.ivy.Main"/>
        
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="classpath.core"/>
        
        <ivy:retrieve xmlns:ivy="antlib:org.apache.ivy.ant"/>
    </target>

    <target name="prepare" depends="prepare-ivy,prepare-xslfo,prepare-simpleql,prepare-jfreechart,prepare-memcached,prepare-xmpp,prepare-xmlcalabash,prepare-expathrepo">
        <mkdir dir="${classes}"/>
    </target>

    <target name="compile" depends="prepare" description="Compile extension modules">
        <echo message="---------------------------"/>
        <echo message="Compiling extension modules"/>
        <echo message="---------------------------"/>

        <echo
            message="Compiling with Java ${ant.java.version} from ${build.compiler.source} source to ${build.compiler.target} target, debug ${build.debug}, optimize ${build.optimize}, deprecation ${build.deprecation}"/>

        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}" destdir="${classes}" encoding="UTF-8"
            optimize="${build.optimize}" srcdir="${src}" source="${build.compiler.source}"
            target="${build.compiler.target}">
            <classpath>
                <path refid="classpath.core"/>
            </classpath>

        <exclude name="org/exist/xquery/modules/cache/**" unless="include.module.cache.config"/>
            <exclude name="org/exist/xquery/modules/compression/**" unless="include.module.compression.config"/>
            <exclude name="org/exist/xquery/modules/context/**" unless="include.module.context.config"/>
            <exclude name="org/exist/xquery/modules/counter/**" unless="include.module.counter.config"/>
            <exclude name="org/exist/xquery/modules/datetime/**" unless="include.module.datetime.config"/>
            <exclude name="org/exist/xquery/modules/example/**" unless="include.module.example.config"/>
            <exclude name="org/exist/xquery/modules/file/**" unless="include.module.file.config"/>
            <exclude name="org/exist/xquery/modules/httpclient/**" unless="include.module.httpclient.config"/>
            <exclude name="org/exist/xquery/modules/image/**" unless="include.module.image.config"/>
            <exclude name="org/exist/xquery/modules/jfreechart/**" unless="include.module.jfreechart.config"/>
            <exclude name="org/exist/xquery/modules/jfreechart/render/SVG**" unless="include.module.jfreechart_svg"/>
            <exclude name="org/exist/xquery/modules/jndi/**" unless="include.module.jndi.config"/>
            <exclude name="org/exist/xquery/modules/lib/**" unless="include.module.lib.config"/>
			<exclude name="org/exist/xquery/modules/mail/**" unless="include.module.mail.config"/>
            <exclude name="org/exist/xquery/modules/math/**" unless="include.module.math.config"/>
            <exclude name="org/exist/xquery/modules/memcached/**" unless="include.module.memcached.config"/>
            <exclude name="org/exist/xquery/modules/oracle/**" unless="include.module.oracle.config"/>
			<exclude name="org/exist/xquery/modules/scheduler/**" unless="include.module.scheduler.config"/>
            <exclude name="org/exist/xquery/modules/simpleql/**" unless="include.module.simpleql.config"/>
            <exclude name="org/exist/xquery/modules/sql/**" unless="include.module.sql.config"/>
            <exclude name="org/exist/xquery/modules/xmldiff/**" unless="include.module.xmldiff.config"/>
            <exclude name="org/exist/xquery/modules/xmpp/**" unless="include.module.xmpp.config"/>
            <exclude name="org/exist/xquery/modules/xslfo/**" unless="include.module.xslfo.config"/>
            <exclude name="org/exist/xquery/modules/xmlcalabash/**" unless="include.module.xmlcalabash.config"/>
            <exclude name="org/exist/xquery/modules/expathrepo/**" unless="include.module.expathrepo.config"/>
        </javac>
    </target>

    <target name="jar" depends="compile">
        <echo message="Creating exist-modules.jar ..."/>
        <jar basedir="${classes}" jarfile="${top.dir}/${lib.extensions}/exist-modules.jar">
            <manifest>
                <attribute name="Project-Name" value="${project.name}"/>
                <attribute name="Project-Version" value="${project.version}"/>
                <attribute name="Project-Build" value="${DSTAMP}"/>
                <attribute name="SVN-Revision" value="${svn.revision}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="clean">
        <delete dir="${classes}"/>
        <delete file="${top.dir}/${lib.extensions}/exist-modules.jar" failonerror="false"/>
    </target>

    <target name="clean-all">
        <delete file="${top.dir}/${lib.user}/calabash.jar" failonerror="false"/>
    </target>


</project>
