/*
 *  eXist Open Source Native XML Database
 *  Copyright (C) 2009 The eXist Project
 *  http://exist-db.org
 *  
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *  
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *  
 *  $Id:$
 */
package org.exist.debuggee.dgbp.packets;

import org.apache.mina.core.session.IoSession;
import org.exist.debuggee.DebuggeeJoint;
import org.exist.debuggee.dgbp.DGBPPacket;
import org.exist.security.xacml.XACMLSource;

/**
 * @author <a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>
 *
 */
public abstract class Command extends DGBPPacket {

	protected DebuggeeJoint joint;
	protected IoSession session;

	/**
	 * Unique numerical ID for each command generated by the IDE
	 */
	protected String transactionID; 
	
	public Command(IoSession session, String args) {
		this.session = session;
		this.joint = (DebuggeeJoint) session.getAttribute("joint");
		
		String[] splited = args.split("-");
		for (int i = 0; i < splited.length; i++) {
			if (splited[i].length() < 3)
				continue;
			
			String arg = splited[i].substring(0, 1);
			String val = splited[i].substring(2).trim();
			setArgument(arg, val);
		}
		System.out.println(new String(toBytes()));
	}


	protected void setArgument(String arg, String val) {
		if (arg.equals("i"))
			transactionID = val;
	}


	public int getLength() {
		return toBytes().length;
	}
	
	public byte[] toBytes() {
		String response = "<response " +
				"command=\"command_name\" " +
				"transaction_id=\""+transactionID+"\">" +
					"<error code=\"999\">"+
					"<message>Unknown error</message>"+
					"</error>"+
					"</response>";
		
		return response.getBytes();
	}

	public byte[] errorBytes(String commandName) {
		String response = "<response " +
				"command=\""+commandName+"\" " +
				"transaction_id=\""+transactionID+"\">" +
					"<error code=\"999\">"+
					"<message>Unknown error</message>"+
					"</error>"+
					"</response>";
		
		return response.getBytes();
	}

	public abstract void exec();

	public static Command parse(IoSession session, String message) throws ParsingCommandException {
		
		int pos = message.indexOf(" ");
		String command = message.substring(0, pos);
		String args = message.substring(command.length()+1);
		
		if (command.equals("feature_set")) {
			return new FeatureSet(session, args);
		
		} else if (command.equals("run")) {
			return new Run(session, args);
		
		} else if (command.equals("step_into")) {
			return new StepInto(session, args);
		
		} else if (command.equals("step_over")) {
			return new StepOver(session, args);
		
		} else if (command.equals("step_out")) {
			return new StepOut(session, args);
		
		} else if (command.equals("stack_get")) {
			return new StackGet(session, args);
		
		} else if (command.equals("property_get")) {
			return new PropertyGet(session, args);
		
		} else if (command.equals("context_get")) {
			return new ContextGet(session, args);
		
		} else if (command.equals("breakpoint_set")) {
			return new BreakpointSet(session, args);
		
		} else if (command.equals("breakpoint_get")) {
			return new BreakpointGet(session, args);
		
		}
		
		return new Error(command, session, args);
	}

	protected static String getFileuri(XACMLSource fileuri) {
		if (fileuri.getType().toLowerCase().equals("file"))
			return "file://"+fileuri.getKey();
		else
			return "dbgp:"+fileuri.getType()+"://"+fileuri.getKey();
	}
}
