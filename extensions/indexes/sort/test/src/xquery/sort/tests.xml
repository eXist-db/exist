<?xml version="1.0" encoding="UTF-8"?>
<TestSet>
    <testName>Sort module tests</testName>
    <description>
        <p>Test sort indexes</p>
        <author>Wolfgang Meier</author>
    </description>
    <setup>
        <create-collection parent="/db" name="test"/>
        <store collection="/db/test" name="sort1.xml">
			<test>
				<item>
                    <name>c</name>
				</item>
                <item>
                    <name>b</name>
                </item>
			    <item>
			        <name></name>
			    </item>
                <item>
                    <name>a</name>
				</item>
			</test>
		</store>
    </setup>
    <tearDown>
        <!--remove-collection collection="/db/test"/-->
    </tearDown>
	<imports>
        import module namespace sort="http://exist-db.org/xquery/sort";
	</imports>
	<functions><![CDATA[
        declare function local:cb($node) {
            $node/name/text()
		};

		declare function local:create-index($options as element()?) as empty() {
			let $fn := util:function(xs:QName("local:cb"), 1)
            return
                sort:create-index-callback("names", doc("/db/test/sort1.xml")//item, $fn, 
                    $options)
		};
	]]></functions>
    <test output="text">
        <task>Create index</task>
        <code><![CDATA[
			local:create-index(<options order="ascending" empty="greatest"/>)
		]]></code>
        <expected></expected>
    </test>
    <test output="xml">
        <task>Use index</task>
        <code>
            for $s in doc("/db/test/sort1.xml")//item
            order by sort:index("names", $s)
            return $s
		</code>
        <xpath>//name[1][. = "a"]</xpath>
    </test>
    <test output="text">
        <task>Create index without callback</task>
        <code><![CDATA[
            let $items := doc("/db/test/sort1.xml")//item
            let $values := for $item in $items return $item/name/string()
            return (
                sort:create-index("names", $items, $values, <options order="ascending" empty="least"/>),
                for $s in doc("/db/test/sort1.xml")//item
                order by sort:index("names", $s)
                return $s
            )
		]]></code>
        <xpath>//name[1][. = "a"]</xpath>
    </test>
    <test output="xml">
        <task>Remove index</task>
        <code>
            sort:remove-index("names"),
            for $s in doc("/db/test/sort1.xml")//item
            order by sort:index("names", $s)
            return $s
		</code>
        <!-- index has been removed. results won't be ordered. -->
        <xpath>//name[1][. = "c"]</xpath>
    </test>
    <test output="text">
        <task>Create and remove index for document</task>
        <code><![CDATA[
			local:create-index(<options order="ascending" empty="greatest"/>),
			sort:remove-index("names", doc("/db/test/sort1.xml")),
			for $s in doc("/db/test/sort1.xml")//item
			order by sort:index("names", $s)
			return $s
        ]]></code>
        <xpath>//name[1][. = "c"]</xpath>
    </test>
    <test output="text">
        <task>Descending</task>
        <code><![CDATA[
			local:create-index(<options order="ascending" empty="greatest"/>),
			for $s in doc("/db/test/sort1.xml")//item
			order by sort:index("names", $s)
			return $s
        ]]></code>
        <xpath>//name[1][. = "c"]</xpath>
    </test>
    <test output="text">
        <task>Ascending</task>
        <code><![CDATA[
			local:create-index(<options order="ascending" empty="greatest"/>),
			for $s in doc("/db/test/sort1.xml")//item
			order by sort:index("names", $s)
			return $s
        ]]></code>
        <xpath>//name[1][. = "a"]</xpath>
    </test>
    <test output="text">
        <task>Empty least</task>
        <code><![CDATA[
			local:create-index(<options order="ascending" empty="least"/>),
			for $s in doc("/db/test/sort1.xml")//item
			order by sort:index("names", $s)
			return $s
        ]]></code>
        <xpath>//name[1][. = ""]</xpath>
    </test>
    <test output="text">
        <task>Remove Document</task>
        <code>
            let $old := doc("/db/test/sort1.xml")//item[1]
            let $remove :=
                xdb:remove("/db/test", "sort1.xml")
            return
                sort:index("names", $old)
        </code>
        <expected></expected>
    </test>
</TestSet>
