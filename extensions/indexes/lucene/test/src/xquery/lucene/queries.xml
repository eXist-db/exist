<TestSet xmlns:stats="http://exist-db.org/xquery/profiling">
	<testName>Lucene indexing tests</testName>
	<description>
		<para>Tests for the Lucene extensions</para>
		<author>Wolfgang Meier</author>
		<author>Leif-Jöran Olsson</author>
	</description>
	<setup>
		<create-collection parent="/db/system" name="config"/>
		<create-collection parent="/db/system/config" name="db"/>
		<create-collection parent="/db/system/config/db" name="lucene"/>
		<store collection="/db/system/config/db/lucene" name="collection.xconf">
			<collection xmlns="http://exist-db.org/collection-config/1.0">
				<index>
					<!-- Lucene index is configured below -->
					<lucene>
						<analyzer class="org.apache.lucene.analysis.standard.StandardAnalyzer"/>
						<analyzer id="stop" class="org.apache.lucene.analysis.StopAnalyzer"/>
						<analyzer id="keyword" class="org.apache.lucene.analysis.KeywordAnalyzer"/>
						<text qname="p"/>
						<text qname="id" field="id" analyzer="keyword"/>
						<text qname="para" analyzer="stop"/>
						<text qname="b"/>
						<text xmlns:t="urn:test" qname="t:note"/>
						<text qname="z"/>
						<text field="lines" qname="LINE"/>
						<!-- Additional index on LINE -->
						<text qname="LINE"/>
					    <text qname="@type"/>
					</lucene>
				</index>
			</collection>
		</store>
		<create-collection parent="/db" name="lucene"/>
		<store-files collection="/db/lucene" dir="samples/shakespeare" pattern="*.xml" type="text/xml"/>
		<store collection="/db/lucene" name="text1.xml">
			<test xmlns:tt="urn:test">
				<p>Eins zwei drei vier zwei fünf sechs.</p>
				<p>Sieben acht <b>neun</b> zehn acht.</p>
				<para>The stopwords should not be indexed.</para>
				<p>Det är flera ord och fraser i det här stycket 
				som börjar med det är flera ord och fraser.
				Dessutom är stycket något krystat komponerat med
				ord och fraser i långa rader, men det är nu dags 
				att verkligen sluta upprepa ord och fraser.</p>
				<tt:note>Note using different namespace.</tt:note>
				<x>
					<y>Nested <z>nodes</z></y>
				</x>
				<id>A11</id>
			</test>
		</store>
		<store collection="/db/lucene" name="text2.xml">
			<test>
				<div type="chapter">
					<head>Div1</head>
					<p>First level</p>
					<div type="section">
						<head>Div2</head>
						<p>Second level</p>
						<div type="subsection">
							<head>Div3</head>
							<p>Third level</p>
						</div>
					</div>
				</div>
			</test>
		</store>
	</setup>
    <tearDown>
        <remove-collection collection="/db/lucene"/>
        <remove-document collection="/db/system/config/db/lucene" name="collection.xconf"/>
    </tearDown>
	<!-- Following axis tests -->
	<test output="xml">
		<task>Case sensitivity</task>
		<code> for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., 'Eins')] return $hit </code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 1: boolean with must, matches</task>
		<code><![CDATA[
			let $qu := <query><bool><term occur="must">eins</term><term occur="must">zwei</term></bool></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 2: boolean with must, no match</task>
		<code><![CDATA[
			let $qu := <query><bool><term occur="must">eins</term><term occur="must">sieben</term></bool></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected/>
	</test>
	<test output="xml">
		<task>XML query test 3: boolean with should</task>
		<code><![CDATA[
			let $qu := <query><bool><term occur="must">eins</term><term occur="should">sieben</term></bool></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 4: phrase</task>
		<code><![CDATA[
			let $qu := <query><phrase><term>eins</term><term>zwei</term></phrase></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 5: phrase, matches too distant</task>
		<code><![CDATA[
			let $qu := <query><phrase><term>eins</term><term>drei</term></phrase></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected/>
	</test>
	<test output="xml">
		<task>XML query test 6: phrase with slop 2</task>
		<code><![CDATA[
			let $qu := <query><phrase slop="2"><term>eins</term><term>drei</term></phrase></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 7: phrase, wrong order of terms</task>
		<code><![CDATA[
			let $qu := <query><phrase><term>zwei</term><term>eins</term></phrase></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected/>
	</test>
	<test output="xml">
		<task>XML query test 8: near</task>
		<code><![CDATA[
			let $qu := <query><near slop="4"><term>eins</term><term>vier</term></near></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 9: near, wrong slop</task>
		<code><![CDATA[
			let $qu := <query><near slop="1"><term>eins</term><term>vier</term></near></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected/>
	</test>
	<test output="xml">
		<task>XML query test 10: near, unordered</task>
		<code><![CDATA[
			let $qu := <query><near ordered="no"><term>zwei</term><term>eins</term></near></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 11: near, nested</task>
		<code><![CDATA[
			let $qu := 
				<query>
					<near slop="10">
						<near><term>eins</term><term>zwei</term></near>
						<near><term>zwei</term><term>fünf</term></near>
					</near>
				</query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 11: near, first</task>
		<code><![CDATA[
			let $qu := 
				<query>
					<near slop="10">
						<first end="3"><term>zwei</term><term>drei</term></first>
						<near><term>fünf</term><term>sechs</term></near>
					</near>
				</query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 12: wildcard</task>
		<code><![CDATA[
			let $qu := <query><term>eins</term><wildcard>sech*</wildcard></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 13: regex</task>
		<code><![CDATA[
			let $qu := <query><term>eins</term><regex>sech.*</regex></query>
			for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<p>Eins zwei drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 14: wildcard context</task>
		<code> doc("/db/lucene/text1.xml")/test[ft:query(*, "acht")] </code>
		<xpath>$output/p</xpath>
	</test>

	<test output="xml">
		<task>XML query test 15: wildcard context</task>
		<code> doc("/db/lucene/text1.xml")/test[ft:query(*, "should")] </code>
		<xpath>$output/p</xpath>
	</test>
	<test output="xml">
		<task>XML query test 16: wildcard context</task>
		<code> doc("/db/lucene/text1.xml")/test/p[ft:query(*, "neun")] </code>
		<expected>
			<p>Sieben acht <b>neun</b> zehn acht.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test 17: wildcard context, no match</task>
		<code> doc("/db/lucene/text1.xml")/test/p[ft:query(*, "acht")] </code>
		<expected/>
	</test>
	<test output="xml">
		<task>XML query test: wildcard context, no match in nested</task>
		<code> doc("/db/lucene/text1.xml")/test/x[ft:query(*, "nodes")] </code>
		<expected/>
	</test>
	<test output="xml">
		<task>Query test: wildcard context, match in nested</task>
		<code> doc("/db/lucene/text1.xml")/test//y[ft:query(*, "nodes")] </code>
		<expected>
			<y>Nested <z>nodes</z></y>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test: wildcard context, match on descendant</task>
		<code> doc("/db/lucene/text1.xml")/test[ft:query(.//*, "neun")] </code>
		<xpath>$output/p</xpath>
	</test>
	<test output="xml">
		<task>XML query test: wildcard context, match on self/child</task>
		<code> doc("/db/lucene/text1.xml")//p[ft:query(./*, "neun")] </code>
		<expected>
			<p>Sieben acht <b>neun</b> zehn acht.</p>
		</expected>
	</test>
	<test output="xml">
		<task>XML query test: wildcard context, match descendant</task>
		<code> doc("/db/lucene/text1.xml")/x[ft:query(.//*, "nodes")] </code>
		<expected/>
	</test>
	<test output="xml">
		<task>XML query test: wildcard context, long path</task>
		<code> doc("/db/lucene/text1.xml")/x[ft:query(./y/*, "nodes")] </code>
		<expected/>
	</test>
	<test output="xml">
		<task>XML query test: wildcard context, no match in child</task>
		<code> doc("/db/lucene/text1.xml")/x[ft:query(./*, "nodes")] </code>
		<expected/>
	</test>
	<test output="xml">
		<task>Query test: wildcard context with prefix wildcard</task>
		<code> doc("/db/lucene/text1.xml")/test[ft:query(*:p, "acht")] </code>
		<xpath>$output/p</xpath>
	</test>
	<test output="xml">
		<task>Query test: wildcard context with prefix wildcard 2</task>
		<code> doc("/db/lucene/text1.xml")/test[ft:query(*:note, "namespace")] </code>
		<xpath>$output/p</xpath>
	</test>
	<test output="xml">
		<task>Query test: wildcard context with namespace</task>
		<code> declare namespace tt="urn:test"; doc("/db/lucene/text1.xml")/test[ft:query(tt:*,
			"namespace")]/tt:note </code>
		<expected>
			<tt:note xmlns:tt="urn:test">Note using different namespace.</tt:note>
		</expected>
	</test>
	<test output="xml" trace="yes">
		<task>Query test: optimizer test, query on element</task>
		<code> doc("/db/lucene/text1.xml")//p[ft:query(b, "neun")] </code>
		<xpath>$output/stats:index[@type = 'lucene']/@optimization = 2</xpath>
	</test>
	<test output="xml" trace="yes">
		<task>Query test: optimizer test, query on self</task>
		<code> doc("/db/lucene/text1.xml")//p[ft:query(., "acht")] </code>
		<xpath>$output/stats:index[@type = 'lucene']/@optimization = 2</xpath>
	</test>
	<test output="xml" trace="yes">
		<task>Query test: optimizer test, query on wildcard</task>
		<code> doc("/db/lucene/text1.xml")/test[ft:query(*, "acht")] </code>
		<xpath>$output/stats:index[@type = 'lucene']/@optimization = 2</xpath>
	</test>
	<test output="xml" trace="yes">
		<task>Optimizer test: wildcard context, self/descendant</task>
		<code> doc("/db/lucene/text1.xml")//x[ft:query(.//*, "nodes")] </code>
		<xpath>$output/stats:index[@type = 'lucene']/@optimization = 2</xpath>
	</test>
	<test output="xml" trace="yes">
		<task>Optimizer test: wildcard context, long path</task>
		<code> doc("/db/lucene/text1.xml")//x[ft:query(./y/*, "nodes")] </code>
		<xpath>$output/stats:index[@type = 'lucene']/@optimization = 2</xpath>
	</test>
	<test output="xml">
		<task>Phrase highlighting 1</task>
		<code> for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., '"zwei drei"')] return
			util:expand($hit) </code>
		<expected>
			<p>Eins <exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">zwei drei</exist:match> vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>Phrase highlighting 2</task>
		<code> for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., '"eins zwei"')] return
			util:expand($hit) </code>
		<expected>
			<p><exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">Eins zwei</exist:match> drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml" ignore="true">
		<task>Phrase highlighting 3</task>
		<code> for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., '"zwei fünf"')] return
			util:expand($hit) </code>
		<expected>
			<p>Eins zwei drei vier <exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">zwei fünf</exist:match> sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>Phrase highlighting 4</task>
		<code> for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., '"eins zwei"')] return
			util:expand($hit) </code>
		<expected>
			<p><exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">Eins zwei</exist:match> drei vier zwei fünf sechs.</p>
		</expected>
	</test>
	<test output="xml">
		<task>Phrase highlighting 5</task>
		<code> for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., '"acht neun"')] return
			util:expand($hit/b) </code>
		<expected>
			<b>
				<exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">neun</exist:match>
			</b>
		</expected>
	</test>
	<test output="xml">
		<task>Phrase highlighting 6: multiple phrases match</task>
		<code>declare namespace exist="http://exist.sourceforge.net/NS/exist"; for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., '"ord och fraser"')] return util:expand($hit)//exist:match</code>
		<expected>
		  <exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">ord och fraser</exist:match>
		  <exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">ord och fraser</exist:match>
		  <exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">ord och fraser</exist:match>
		  <exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">ord och fraser</exist:match>
		</expected>
	</test>
	<test output="xml">
		<task>Phrase highlighting 7: phrase with same start token as previously occuring token.</task>
		<code>declare namespace exist="http://exist.sourceforge.net/NS/exist"; for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., '"stycket något krystat"')] return util:expand($hit)//exist:match</code>
		<expected>
		  <exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">stycket något krystat</exist:match>
		</expected>
	</test>
	<test output="xml">
		<task>Match highlighting: prefix query</task>
		<code> for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., 'neu*')] return
			util:expand($hit/b) </code>
		<expected>
			<b>
				<exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">neun</exist:match>
			</b>
		</expected>
	</test>
	<test output="xml">
		<task>Match highlighting: prefix query xml syntax</task>
		<code><![CDATA[
            for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., <query><prefix>neu</prefix></query>)]
            return
                util:expand($hit/b)
        ]]></code>
		<expected>
			<b>
				<exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">neun</exist:match>
			</b>
		</expected>
	</test>
	<test output="xml">
		<task>Match highlighting: wildcard query</task>
		<code><![CDATA[
            for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., <query><wildcard>*eu*</wildcard></query>)]
            return
                util:expand($hit/b)
        ]]></code>
		<expected>
			<b>
				<exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">neun</exist:match>
			</b>
		</expected>
	</test>
	<test output="xml">
		<task>Match highlighting: regex query</task>
		<code><![CDATA[
            for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., <query><regex>.?eu.*</regex></query>)]
            return
                util:expand($hit/b)
        ]]></code>
		<expected>
			<b>
				<exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">neun</exist:match>
			</b>
		</expected>
	</test>
	<test output="xml">
		<task>Match highlighting: fuzzy query</task>
		<code><![CDATA[
            for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., <query><fuzzy>neue</fuzzy></query>)]
            return
                util:expand($hit/b)
        ]]></code>
		<expected>
			<b>
				<exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">neun</exist:match>
			</b>
		</expected>
	</test>
	<test output="xml">
		<task>Match highlighting: near query</task>
		<code><![CDATA[
            for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., <query><near>acht neun</near></query>)]
            return
                util:expand($hit/b)
        ]]></code>
		<expected>
			<b>
				<exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">neun</exist:match>
			</b>
		</expected>
	</test>
	<test output="xml">
		<task>Match highlighting: near query</task>
		<code><![CDATA[
            for $hit in doc("/db/lucene/text1.xml")//p[ft:query(., <query><near><term>acht</term><near>neun</near></near></query>)]
            return
                util:expand($hit/b)
        ]]></code>
		<expected>
			<b>
				<exist:match xmlns:exist="http://exist.sourceforge.net/NS/exist">neun</exist:match>
			</b>
		</expected>
	</test>
	<test output="xml">
		<task>index-keys test 1</task>
		<code><![CDATA[
			declare function local:key($key, $options) {
				<t>{$key}</t>
			};
			
			<terms>
			{
			let $callback := util:function(xs:QName("local:key"), 2)
			return
				util:index-keys-by-qname(xs:QName("p"), (), $callback, 10000, "lucene-index")
			}
			</terms>]]></code>
		<expected>
		  <terms>
                    <t>acht</t>
                    <t>att</t>
                    <t>börjar</t>
                    <t>dags</t>
                    <t>dessutom</t>
                    <t>det</t>
                    <t>drei</t>
                    <t>eins</t>
                    <t>first</t>
                    <t>flera</t>
                    <t>fraser</t>
                    <t>fünf</t>
                    <t>här</t>
                    <t>i</t>
                    <t>komponerat</t>
                    <t>krystat</t>
                    <t>level</t>
                    <t>långa</t>
                    <t>med</t>
                    <t>men</t>
		    <t>neun</t>
                    <t>nu</t>
                    <t>något</t>
                    <t>och</t>
                    <t>ord</t>
                    <t>rader</t>
                    <t>sechs</t>
                    <t>second</t>
                    <t>sieben</t>
                    <t>sluta</t>
                    <t>som</t>
                    <t>stycket</t>
                    <t>third</t>
                    <t>upprepa</t>
                    <t>verkligen</t>
                    <t>vier</t>
                    <t>zehn</t>
                    <t>zwei</t>
                    <t>är</t>
		  </terms>
		</expected>
	</test>
	<test output="xml">
		<task>index-keys test 2</task>
		<code><![CDATA[
			declare function local:key($key, $options) {
				<t>{$key}</t>
			};
			
			<terms>
			{
			let $callback := util:function(xs:QName("local:key"), 2)
			return
				util:index-keys-by-qname(xs:QName("p"), "s", $callback, 10000, "lucene-index")
			}
			</terms>]]></code>
		<expected>
		  <terms>
                    <t>sechs</t>
                    <t>second</t>
                    <t>sieben</t>
                    <t>sluta</t>
                    <t>som</t>
                    <t>stycket</t>
		  </terms>
		</expected>
	</test>
	<test output="xml">
		<task>index-keys test 3</task>
		<code><![CDATA[
			declare function local:key($key, $options) {
				<t>{$key}</t>
			};
			
			<terms>
			{
			let $callback := util:function(xs:QName("local:key"), 2)
			return
				collection("/db/does/not/exist")/util:index-keys-by-qname(xs:QName("p"), "s", $callback, 10000, "lucene-index")
			}
			</terms>]]></code>
		<expected><terms/></expected>
	</test>
	<test output="xml">
		<task>index-keys test 4</task>
		<code><![CDATA[
			declare function local:key($key, $options) {
				<t>{$key}</t>
			};
			
			<terms>
			{
			let $callback := util:function(xs:QName("local:key"), 2)
			return
				util:index-keys(doc("/db/lucene/text1.xml")//p, "s", $callback, 10000, "lucene-index")
			}
			</terms>]]></code>
		<expected>
		  <terms>
		    <t>sechs</t>
                    <t>sieben</t>
                    <t>sluta</t>
                    <t>som</t>
                    <t>stycket</t>
		  </terms>
		</expected>
	</test>
	<test output="xml">
		<task>index-keys test 5</task>
		<code><![CDATA[
			declare function local:key($key, $options) {
				<t>{$key}</t>
			};
			
			<terms>
			{
			let $callback := util:function(xs:QName("local:key"), 2)
			return
				util:index-keys(doc("/db/lucene/text1.xml")//p[ft:query(., 'zehn')], "s", $callback, 10000, "lucene-index")
			}
			</terms>]]></code>
		<expected>
			<terms>
				<t>sieben</t>
			</terms>
		</expected>
	</test>
    <test output="xml">
        <task>index-keys test 6</task>
        <code><![CDATA[
            declare function local:key($key, $options) {
				<t>{$key}</t>
			};
            <terms>
			{
			let $callback := util:function(xs:QName("local:key"), 2)
			return
				util:index-keys(doc("/db/lucene/text2.xml")//@type, "", $callback, 10000, "lucene-index")
			}
			</terms>]]></code>
        <expected>
            <terms>
                <t>chapter</t>
                <t>section</t>
                <t>subsection</t>
            </terms>
        </expected>
    </test>
    <!--The following test is commented out because it fails-->
    <!--<test output="text">
        <task>index-keys test 7</task>
        <code><![CDATA[
            declare function local:key($key, $options) {
				<t>{$key}</t>
			};
            <terms>
			{
			let $callback := util:function(xs:QName("local:key"), 2)		
            return
                util:index-keys-by-qname(xs:QName("@type"), "", $callback, 10000, "lucene-index")
			}
			</terms>]]>
        </code>
        <expected>
            <terms>
                <t>chapter</t>
                <t>section</t>
                <t>subsection</t>
            </terms>
        </expected>
    </test>-->
    <test output="xml">
		<task>Analyzer test</task>
		<code> for $hit in doc("/db/lucene/text1.xml")//para[ft:query(., '"and indexed"')] return $hit </code>
		<expected>
			<para>The stopwords should not be indexed.</para>
		</expected>
	</test>
	<test output="xml">
		<task>Analyzer test 1: phrase using stopword</task>
		<code><![CDATA[
			let $qu := <query><phrase><term>and</term><term>indexed</term></phrase></query>
			for $hit in doc("/db/lucene/text1.xml")//para[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<para>The stopwords should not be indexed.</para>
		</expected>
	</test>
	<test output="xml">
		<task>Analyzer test 2: near using stopword</task>
		<code><![CDATA[
			let $qu := <query><near><term>and</term><term>indexed</term></near></query>
			for $hit in doc("/db/lucene/text1.xml")//para[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<para>The stopwords should not be indexed.</para>
		</expected>
	</test>
	<test output="xml">
		<task>Analyzer test 3: stopword only</task>
		<code><![CDATA[
			let $qu := <query><term>and</term></query>
			for $hit in doc("/db/lucene/text1.xml")//para[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected/>
	</test>
	<test output="xml">
		<task>Analyzer test 4: stopword only</task>
		<code><![CDATA[
			let $qu := <query><near><term>and</term></near></query>
			for $hit in doc("/db/lucene/text1.xml")//para[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected/>
	</test>
	<test output="xml">
		<task>Analyzer test 5: stopword only</task>
		<code><![CDATA[
			let $qu := <query><phrase><term>and</term></phrase></query>
			for $hit in doc("/db/lucene/text1.xml")//para[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected/>
	</test>
	<test output="xml">
		<task>Analyzer test 6: stopword only</task>
		<code><![CDATA[
			let $qu := <query><bool><term occur="must">and</term><term occur="must">the</term></bool></query>
			for $hit in doc("/db/lucene/text1.xml")//para[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected/>
	</test>
	<test output="xml">
		<task>Analyzer test 7: stopword in boolean</task>
		<code><![CDATA[
			let $qu := <query><bool><term occur="must">stopwords</term><term occur="must">and</term></bool></query>
			for $hit in doc("/db/lucene/text1.xml")//para[ft:query(., $qu)]
			return
			$hit
		]]></code>
		<expected>
			<para>The stopwords should not be indexed.</para>
		</expected>
	</test>
	<test output="xml">
		<task>Query test: nested elements 1</task>
		<code> doc("/db/lucene/text2.xml")//div[ft:query(div/p, "second")] </code>
		<expected>
			<div type="chapter">
				<head>Div1</head>
				<p>First level</p>
				<div type="section">
					<head>Div2</head>
					<p>Second level</p>
					<div type="subsection">
						<head>Div3</head>
						<p>Third level</p>
					</div>
				</div>
			</div>
		</expected>
	</test>
	<test output="xml">
		<task>Query test: nested elements 2</task>
		<code> doc("/db/lucene/text2.xml")/test/div[ft:query(div/div/p, "third")] </code>
		<expected>
			<div type="chapter">
				<head>Div1</head>
				<p>First level</p>
				<div type="section">
					<head>Div2</head>
					<p>Second level</p>
					<div type="subsection">
						<head>Div3</head>
						<p>Third level</p>
					</div>
				</div>
			</div>
		</expected>
	</test>
	<test output="xml">
		<task>Query test: nested elements 3</task>
		<code> doc("/db/lucene/text2.xml")/div[ft:query(div/div/p, "second")] </code>
		<expected/>
	</test>
	<test output="xml">
		<task>Query test: nested elements 4</task>
		<code> doc("/db/lucene/text2.xml")//div[ft:query(div/p, "third")] </code>
		<expected>
			<div type="section">
				<head>Div2</head>
				<p>Second level</p>
				<div type="subsection">
					<head>Div3</head>
					<p>Third level</p>
				</div>
			</div>
		</expected>
	</test>
	<test output="xml">
		<task>Query test: nested elements with wildcard 1</task>
		<code> doc("/db/lucene/text2.xml")//div[ft:query(div/*, "third")] </code>
		<expected>
			<div type="section">
				<head>Div2</head>
				<p>Second level</p>
				<div type="subsection">
					<head>Div3</head>
					<p>Third level</p>
				</div>
			</div>
		</expected>
	</test>
	<test output="xml">
		<task>Query test: nested elements with wildcard 2</task>
		<code> doc("/db/lucene/text2.xml")/test/div[ft:query(div/div/*, "third")] </code>
		<expected>
			<div type="chapter">
				<head>Div1</head>
				<p>First level</p>
				<div type="section">
					<head>Div2</head>
					<p>Second level</p>
					<div type="subsection">
						<head>Div3</head>
						<p>Third level</p>
					</div>
				</div>
			</div>
		</expected>
	</test>
	<test output="xml">
		<task>Query test: nested elements with wildcard 3</task>
		<code> doc("/db/lucene/text2.xml")/div[ft:query(div/div/*, "second")] </code>
		<expected/>
	</test>
	<test output="xml">
		<task>Query test: nested elements with wildcard 4</task>
		<code> doc("/db/lucene/text2.xml")//div[ft:query(div/*, "second")] </code>
		<expected>
			<div type="chapter">
				<head>Div1</head>
				<p>First level</p>
				<div type="section">
					<head>Div2</head>
					<p>Second level</p>
					<div type="subsection">
						<head>Div3</head>
						<p>Third level</p>
					</div>
				</div>
			</div>
		</expected>
	</test>
	<test output="xml">
		<task>Query test: nested elements with wildcard 5</task>
		<code> doc("/db/lucene/text2.xml")//div[ft:query(div/*, "third")] </code>
		<expected>
			<div type="section">
				<head>Div2</head>
				<p>Second level</p>
				<div type="subsection">
					<head>Div3</head>
					<p>Third level</p>
				</div>
			</div>
		</expected>
	</test>
	<test output="xml">
		<task>Query test: nested elements with wildcard 6</task>
		<code> doc("/db/lucene/text2.xml")//div[ft:query(./div/*, "third")] </code>
		<expected>
			<div type="section">
				<head>Div2</head>
				<p>Second level</p>
				<div type="subsection">
					<head>Div3</head>
					<p>Third level</p>
				</div>
			</div>
		</expected>
	</test>
	<test output="xml">
		<task>Fields: query duplicate index</task>
		<code>doc("/db/lucene/macbeth.xml")//SPEECH[ft:query(LINE, "king")]</code>
		<xpath>count($output) eq 29</xpath>
	</test>
	<test output="xml">
		<task>Query field test</task>
		<code>doc("/db/lucene/macbeth.xml")//SPEECH[ft:query-field("lines", "king")]</code>
		<xpath>count($output) eq 29</xpath>
	</test>
	<test output="text">
		<task>Fields: descendant</task>
		<code>count(doc("/db/lucene/macbeth.xml")//SCENE[ft:query-field("lines", "king")])</code>
		<expected>10</expected>
	</test>
	<test output="xml">
    	<task>Query field: wrong parent</task>
    	<code>doc("/db/lucene/macbeth.xml")//SPEAKER[ft:query-field("lines", "king")]</code>
    	<expected/>
	</test>
	<test output="xml">
		<task>Fields: keyword analyzer</task>
		<code>doc("/db/lucene/text1.xml")/test[ft:query-field("id", "A11")]/id</code>
		<expected><id>A11</id></expected>
	</test>
	<test output="xml">
    	<task>Fields: keyword analyzer, XML syntax</task>
    	<code><![CDATA[
    		let $query := <query><term>A11</term></query>
    		return
    			doc("/db/lucene/text1.xml")/test[ft:query-field("id", $query)]/id
    	]]></code>
		<expected><id>A11</id></expected>
	</test>
	<test output="xml">
		<task>Fields: keyword analyzer, no context</task>
		<code>ft:query-field("id", "A11")</code>
		<expected><id>A11</id></expected>
	</test>
	<!--test output="xml">
		<task>Fields: remove document</task>
		<code>
			let $removed := xmldb:remove("/db/lucene", "text1.xml")
			return
				ft:query-field("id", "a11.b22.c33.d44")
		</code>
		<expected/>
	</test-->
</TestSet>
