This is xprocxq release v0.8 BETA
------------------------------------
xprocxq is an experimental bootstrap implementation of W3C XProc 
Specification, written in xquery.

XProc is a general utility for working with XML technologies.

Using XProc's built in (or extension) steps you define XML pipelines 
which can model a wide range of processes. Steps accept input XML and 
produce output XML, its in this manner (somewhat analogous to unix pipes) 
that you can orchestrate and create sophisticated XML workflows.


eXist XMLDB Integration
-----------------------

xprocxq is a part of the eXist standard build and release and enabled
by default (as of v1.3/1.4).


Documentation
-------------

Documentation is online at http://exist.sourceforge.net/xproc

Examples are included in the /examples directory as well as in the documentation for xproc.


Prerequisites
-------------
This version of xprocxq requires the current trunk version of eXist XML Database 
(exist.sourceforge.net), xprocxq is built and enabled by default.

xprocxq uses the EXPath http-client module which is built in eXist


Install
-------

xprocxq is part of eXist own build process.

I) Download latest trunk version of eXist XML Database (via svn is best)

II) follow eXist build instructions

You should have xprocxq installed by default.

 
Manual Install
--------------

To manually install xprocxq within eXist XML Database follow these instructions.

I) Place xprocxq.jar into $EXIST_HOME/lib/user directory

insert these elements in eXist conf.xml, in <built-in-modules/> element (soon this will just be a single module import)

<!-- expath module imports (for p:http-request)//-->
<module class="org.exist.xquery.modules.httpclient.HTTPClientModule" uri="http://exist-db.org/xquery/httpclient" />
<module class="org.expath.exist.HttpClientModule" uri="http://expath.org/ns/http-client"/>
<!-- uncomment to use p:xsl-formatter step
<module class="org.exist.xquery.modules.xslfo.XSLFOModule" uri="http://exist-db.org/xquery/xslfo" />
//-->
<!-- uncomment to use p:directory-list step
<module class="org.exist.xquery.modules.file.FileModule" uri="http://exist-db.org/xquery/file" />
//-->
<!-- xprocxq module imports //-->
<module src="resource:net/xproc/xprocxq/src/xquery/const.xqm" uri="http://xproc.net/xproc/const"/>
<module src="resource:net/xproc/xprocxq/src/xquery/xproc.xqm" uri="http://xproc.net/xproc"/>
<module src="resource:net/xproc/xprocxq/src/xquery/util.xqm" uri="http://xproc.net/xproc/util"/>
<module src="resource:net/xproc/xprocxq/src/xquery/functions.xqm" uri="http://xproc.net/xproc/functions"/>                                                                     
<module src="resource:net/xproc/xprocxq/src/xquery/std.xqm" uri="http://xproc.net/xproc/std"/>                                                                           
<module src="resource:net/xproc/xprocxq/src/xquery/ext.xqm" uri="http://xproc.net/xproc/ext"/>                                                                           
<module src="resource:net/xproc/xprocxq/src/xquery/opt.xqm" uri="http://xproc.net/xproc/opt"/>                                                            
<module src="resource:net/xproc/xprocxq/src/xquery/naming.xqm" uri="http://xproc.net/xproc/naming"/>


II) Please follow these instructions to support the following steps.

  p:xinclude - you must enable-xincludes within eXist XML Database conf.xml

  p:xsl-formatter - you will need to build eXist with extension XSLFO enabled if you would
like to use the p:xsl-formatter step. To do this set include.module.xslfo = true in extensions/build.properties

  p:directory-list - you will need to build eXist with extension File enabled if you would like
to use the p:directory-list step. To do this set include.module.file = true in 
extensions/build.properties

III) Load doc/examples directory using the load examples area within eXist admin interface

IV) If you move or have manually uploaded examples then you will have to amend the path variable in the examples to reflect the collection path you have placed it in (most likely /db/examples) and test using the browser.

ex. http://127.0.0.1:8080/exist/rest/examples/helloworld.xq


Build from Source
-----------------
You may build xprocxq.jar from source distribution by running the jar Apache Ant target.


Limitations
-----------
xprocxq, being implemented in XQuery, currently has several
limitations and is no where compliant with the existing XProc 
draft specification.

As I originally developed using SAXON-SA, I have had to disable
 many of XProc steps as I port across but should have a good set 
of steps running somewhat soon.

Here is a list of the more severe limitations:

* due to my use of weak typing in XQuery there are several 
interrelated issues, but this will change as I sanitize the code

* currently there is little consistent support for sequences 
where you would expect them, once again I am addressing this as I 
work porting things across 

* defining reusable pipelines using p:library, p:import and p:declare-step 
is currently disabled 

* errors are thrown as XQuery errors, making it difficult to report
correct line numbers, not to mention that errors themselves look quite
ugly

* need to use ./ convention in p:when (in p:choose) test attributes 
due to limitation in eXist util:eval function

* some step sorting issues (intermixing of steps using p:inline), best
to use explicit port binding to avoid.

* p:xquery currently uses a c:result element to output, I also added a
xproc:escape attribute to c:query to avoid having to wrap XQuery using
CDATA (which is XProc spec requirement).

* declare base-uri affects module imports (need to investigate across 
all XQuery processors)

* cant pass required/add-attribute--002.xml test depends on namespace 
handling module to be finished

* errors and/or p:error does not write to error port (also discussing 
need for a generic 'implementator specific error code' with XProc WG)

* current preparsing routine is naive; I have a more rigorous solution 
in a source control branch to merge

Please review the examples included in the release version to get a
sense of what is possible with the current version.


Release Distro
--------------
The release distribution zip package contains the following:

README.eXist	This document
VERSION     	A summary of the distribution version
LICENSE			Included licenses notice
ChangeLog   	Generated svn changelog
xprocxq.jar 	xprocxq application
test/examples	XProc tests and test.xq for testing with eXist XML Database

All release files can be found here http://code.google.com/p/xprocxq/source/browse/#svn/releases


Source Distro
-------------
The source distribution consists of:
   
README      This document
VERSION     A summary of the distribution version
RELEASE     Current release version	
LICENSE		Included licenses notice
LOC			lines of code metric	
ChangeLog   Generated svn changelog
build.xml   Apache Ant build file For generating release dist
bin/    	Xproc run script
etc/    	Misc artifacts
lib/    	3rd party deps, this directory is empty for the time being
test/   	XProc Unit Tests
src/    	XQuery source files

Source distro is available by svn checkout http://xprocxq.googlecode.com/svn/trunk/ xprocxq-read-only


Contact
-------
eXist-dev mailing list is good for specific questions about Xproc.

A general XProc mailing list is maintained by W3C for xproc developers
xproc-dev@w3.org where questions can be asked about xprocxq and 
other XProc processors.

You can always contact me direct at jim.fuller@webcomposite.com


Changes
-------
Review the ChangeLog file which is generated from svn 
history. 


Todo/Issues/Bugs
----------------
Known issues are tracked using eXist project issue tracker



Why XProc in XQuery ?
---------------------
XQuery's somewhat functional approach appealed to me and having been
a long time XSLT user I wanted to gain some understanding of the nuances
between XSLT and XQuery.

In building xqueryxq, my primary goals were;

    * Exercise fundamental FP principles building a non trivial XQuery
application. I think I have achieved this goal, as xprocxq 'main engine'
 is the util:step-fold() function which operates on simple pipelines.

    * To understand variability between XQuery processors. I think there
is a surprising amount of differences between XQuery processors, but
thankfully mostly in the form of extension functions, implicit type casting
and in smaller part some interpretations of the spec (where the spec allowed
for impl to do things as they see fit). The real impact though is that we
need things like expath and exquery to allow for even a remote chance at
compatibility between processors.

	* that this approach may prove highly performant within the context of XML
database


More Info
---------
W3C XML Working Group lastest XProc draft
http://www.w3.org/XML/XProc/docs/langspec.html

tests.xproc.org
http://tests.xproc.org

www.exproc.org
http://exproc.org

eXist XML Database
http://exist.sourceforge.net


Notices
-------
xprocxq is released under MPL v1.1, where the file LICENSE contains 
a copy of this license as well as links to any embedded software
licenses.

xprocxq uses Florent Georges excellent EXPath http-client module which 
is also released under MPL v1.1. More information about EXPath can be
found at http://expath.org/.


Copyright
---------
xprocxq, xproc.xq and related material is the Copyright (C) 2009
of James Fuller (jim.fuller@webcomposite.com), All rights reserved.


Disclaimer
----------
xprocxq is BETA software and is not currently intended for production usage. Use this
software at your own risk.
