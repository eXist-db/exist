----------------------------------------
priority
----------------------------------------

test runner
* testing errors
* testing documents that refer to file items

    viewport and all path iterators (p:viewport,p:for-each)
    implement p:outputs
    implement variables & params & options
    implement xproc xpath functions
    serialization
    error assertions


util:eval('request:get-parameter-names()')
vs
util:eval-inline('request:get-parameter-names()',$xml)


----------------------------------------
current issues
----------------------------------------

* declare-step/pipeline need require name attribute
* sequence issue with input to choose
* dont forget I changed p namespace and p1 namespace in util.xqm
* pipelines need name attribute, should default to xproc:defaultname
* add primary input to evaluation in u:xquery, instead of passing
to each function
* fix p:choose deal with xpath-context, each subpipeline must have the same output signature (static check)
* need to check eq and = throughout the codebase to ensure we are testing equality properly
* migrate errors from string to QName
* make error reporting look nicer and try to get some kind of line number reporting
* inputs in nested p:declare-steps need fixing due to $allcomp in xproc:explicitnames
* create namespace module to manage namespace fixups
* target main eXist scenarios
	- form handler
	- the same applies to all apps where a user needs to log in first
	- how about a simple wizard-style example, e.g. along the lines of the "number guessing" example in eXist. I think the page flow logic could all be done in xproc.
* in p:escape-markup / p:unescape-markup lose top level text() ... amend so it doesn't get stripped

------------------------------
complex/container steps
------------------------------
	p:viewport - treewalker and then apply ext:eval-step to node

------------------------------
standard steps
------------------------------
	p:add-xml-base
	p:make-absolute-uris
	p:namespace-rename
	p:parameters

------------------------------
optional steps
------------------------------
	p:exec - anywhere in eXist a util:exec function ?
	p:hash - easy
	p:www-form-urldecode - easy
	p:www-form-urlencode - easy

------------------------------
extension functions
------------------------------
    string/boolean p:system-property(string property)
    boolean p:step-available(string step-type)
    integer p:iteration-position()
    integer p:iteration-size()
    string p:base-uri()
    string p:base-uri(Node node)
    string p:resolve-uri(String relative)
    string p:resolve-uri(String relative, String base)

------------------------------
components
------------------------------
	p:serialisation
	p:log
	p:pipeinfo

------------------------------
other
------------------------------
    provide validation switch to xproc:run func signature and use annotated relaxNG schema
to validate against

----------------------------------------
spec reminders
----------------------------------------

parameters are like options, names until runtime (good to use with p:xslt).
Variables are created in compound steps and are immutable
Options can be declared on atomic or compound steps.
Parameters, unlike options and variables, have names that can be computed at runtime.




add- 50%
choose - 4/7
compare - 4/5
count - 2/3
data - 0
declare-step - 6/11
delete - 2/4
directory - 0
evaluation order - 2/3
exclude-inline - 0
filter - only 1
for - only 1
group - 0
http-request - ok (blocks)
identity - most
import - 1 
input - blocks
insert - 2
iteration - 0 
labelelements - 0
load - 0
log - 1
make-absolute-uri -
multipart -
namespace-rename -
option -
rename - 
set-attributes - 0 (prob needs more tests)
sink - 
split-sequence - 50%
unescape-markup - 1 
unwrap - 1
wrap - some
variable
value-available-
versioning - passed most of them, surprisingly! tests are probably invalid
viewport - 1
wrap-sequence - 1
xinclude - 
xmlid - 
xslt - a few
 

How to make development faster ?

* build 'in database' e.g. avoid build/compile cycle
* run error tests

