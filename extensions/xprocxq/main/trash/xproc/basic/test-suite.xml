<t:test-suite xmlns:t='http://xproc.org/ns/testsuite'
xmlns:p="http://www.w3.org/ns/xproc"
        xmlns:c="http://www.w3.org/ns/xproc-step"
        xmlns:err="http://www.w3.org/ns/xproc-error"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xproc = "http://xproc.net/xproc">

<t:title>All Basic tests</t:title>

<!-- #################################################################### p:identity  //-->

<t:test xml:id="identity1">
<t:title>p:identity1</t:title>
<t:description>Simple identity test within p:pipeline</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="identity/identity1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/identity1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="identity1_1">
<t:title>p:identity1_1</t:title>
<t:description>Simple identity test within p:declare-step</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="identity/identity1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/identity1_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="identity1_2">
<t:title>p:identity1_2</t:title>
<t:description>2 identity steps within p:pipeline</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="identity/identity1_2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/identity1_2.xml"/>
    </t:output>
</t:test>

<t:test xml:id="identity1_3">
<t:title>p:identity1_3</t:title>
<t:description>single identity step using a p:input with select attribute within p:declare-step</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="identity/identity1_3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/identity1_3.xml"/>
    </t:output>
</t:test>

<t:test xml:id="identity2">
<t:title>p:identity2</t:title>
<t:description>single identity step defining source p:input inline and with external documents within p:declare-step</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="identity/identity2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/identity2.xml"/>
    </t:output>
</t:test>

<!-- #################################################################### p:count  //-->

<t:test xml:id="count1">
<t:title>p:count1</t:title>
<t:description>simple count, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="count1_1">
<t:title>p:count1_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple declare-step with use of p:inline document, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count1_1.xml"/>
    </t:output>
</t:test>


<t:test xml:id="count1_2">
<t:title>p:count1_2</t:title>
<xproc:status xprocxq="no" calabash="no" comments="this is an incorrectly defined xproc, needs input binding definition"/>
<t:description>simple declare-step using limit attribute, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count1_2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count1_2.xml"/>
    </t:output>
</t:test>


<t:test xml:id="count1_3">
<t:title>p:count1_3</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple declare-step using limit attribute, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count1_3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count1_3.xml"/>
    </t:output>
</t:test>


<t:test xml:id="count1_3_1">
<t:title>p:count1_3_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple declare-step using limit attribute, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count1_3_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count1_3_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="count1_4">
<t:title>p:count1_4</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple declare-step using limit attribute, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count1_4.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count1_4.xml"/>
    </t:output>
</t:test>


<t:test xml:id="count2">
<t:title>p:count2</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple declare-step using limit attribute, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count2.xml"/>
    </t:output>
</t:test>


<t:test xml:id="count3">
<t:title>p:count3</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple declare-step using limit attribute, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count3.xml"/>
    </t:output>
</t:test>


<t:test xml:id="count3_1">
<t:title>p:count3_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple declare-step using limit attribute, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="count/count3_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/count3_1.xml"/>
    </t:output>
</t:test>


<!-- #################################################################### p:compare  //-->

<t:test xml:id="compare1">
<t:title>p:compare1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison using primary input, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="compare1_1">
<t:title>p:compare1_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison using primary input, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare1_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="compare1_2">
<t:title>p:compare1_2</t:title>
<xproc:status xprocxq="no" calabash="no" comments="wondering if calabash supports file: prefix"/>
<t:description>simple comparison using primary input, should fail</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare1_2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare1_2.xml"/>
    </t:output>
</t:test>

<t:test xml:id="compare2">
<t:title>p:compare2</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison defining attribute on step element, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare2.xml"/>
    </t:output>
</t:test>

<t:test xml:id="compare2_1">
<t:title>p:compare2_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison defining attribute on step element, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare2_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare2_1.xml"/>
    </t:output>
</t:test>


<t:test xml:id="compare3">
<t:title>p:compare3</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison defining attribute on step element, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare3.xml"/>
    </t:output>
</t:test>

<t:test xml:id="compare3_1">
<t:title>p:compare3_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison defining attribute on step element, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare3_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare3_1.xml"/>
    </t:output>
</t:test>


<t:test xml:id="compare3_1_1">
<t:title>p:compare3_1_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison defining attribute on step element, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare3_1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare3_1_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="compare4">
<t:title>p:compare4</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison defining attribute on step element, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare4.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare4.xml"/>
    </t:output>
</t:test>

<t:test xml:id="compare4_1">
<t:title>p:compare4_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison defining attribute on step element, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare4_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare4_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="compare4_1_1">
<t:title>p:compare4_1_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple comparison defining attribute on step element, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="compare/compare4_1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/compare4_1_1.xml"/>
    </t:output>
</t:test>
<!-- #################################################################### p:declare-step  //-->

<t:test xml:id="declare-step1">
<t:title>p:declare-step1</t:title>
<t:description>defines a new step, mine:identity1, and invokes it</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="declare-step1_1">
<t:title>p:declare-step1_1</t:title>
<t:description>declares a new step with no type or name and does not invoke it</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="declare-step1_2">
<t:title>p:declare-step1_2</t:title>
<t:description>tries to redeclare p:identity, should throw a static error XS0036</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1_2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1_2.xml"/>
    </t:output>
</t:test>

<t:test xml:id="declare-step1_3">
<t:title>p:declare-step1_3</t:title>
<t:description>declares a mine:count step, invokation overrides input port with 2 inline elements</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1_3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1_3.xml"/>
    </t:output>
</t:test>

<t:test xml:id="declare-step1_4">
<t:title>p:declare-step1_4</t:title>
<t:description>declares a mine:identity step, invokation binds input with pipeline source input</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1_4.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1_4.xml"/>
    </t:output>
</t:test>

<t:test xml:id="declare-step1_6">
<t:title>p:declaret-step1</t:title>
<t:description>simple usage of p:declare-step as pipeline</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1_6.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1.xml"/>
    </t:output>
</t:test>


<t:test xml:id="declare-step1_7">
<t:title>p:declaret-step1_7</t:title>
<t:description>declaration of p:declare-step as pipeline, should have empty output</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1_7.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1_7.xml"/>
    </t:output>
</t:test>


<t:test xml:id="declare-step1_8">
<t:title>p:declaret-step1_8</t:title>
<t:description>declaration of p:declare-step with an option,as pipeline</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1_8.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1_8.xml"/>
    </t:output>
</t:test>

<t:test xml:id="declare-step3">
<t:title>p:declaret-step3</t:title>
<t:description>import a pipeline declaration and invoke</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step3.xml"/>
    </t:output>
</t:test>


<!-- #################################################################### p:documentation  //-->

<t:test xml:id="documentation1">
<t:title>p:documentation1</t:title>
<t:description>simple usage of p:documentation, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="documentation/documentation1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/documentation1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="documentation1_1">
<t:title>p:documentation1_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>embeding xhtml namespaced elements inside of p:documentation, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="documentation/documentation1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/documentation1_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="documentation1_2">
<t:title>p:documentation1_2</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>simple usage of p:documentation, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="documentation/documentation1_2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/documentation1_2.xml"/>
    </t:output>
</t:test>

<!-- #################################################################### p:filter  //-->

<t:test xml:id="filter1">
<t:title>p:filter1</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>simple usage of p:filter, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="filter/filter1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/filter1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="filter1_1">
<t:title>p:filter1_1</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>simple usage of p:filter, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="filter/filter1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/filter1_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="filter2">
<t:title>p:filter2</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>simple usage of p:filter with dynamic xpath as step attribute, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="filter/filter2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/filter2.xml"/>
    </t:output>
</t:test>

<t:test xml:id="filter3">
<t:title>p:filter3</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>simple usage of p:filter with dynamic xpath as p:with-option, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="filter/filter3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/filter3.xml"/>
    </t:output>
</t:test>

<!-- #################################################################### p:xquery  //-->

<t:test xml:id="xquery1">
<t:title>p:xquery1</t:title>
<xproc:status xprocxq="yes" calabash="no" comments="p:document in file: prefix"/>
<t:description>simple usage of p:xquery, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="xquery/xquery1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xquery1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="xquery2">
<t:title>p:xquery2</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>simple usage of p:xquery and p:inline, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="xquery/xquery2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xquery2.xml"/>
    </t:output>
</t:test>

<t:test xml:id="xquery3">
<t:title>p:xquery3</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:xquery and p:declare-step, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="xquery/xquery3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xquery3.xml"/>
    </t:output>
</t:test>

<!-- #################################################################### p:xslt  //-->

<t:test xml:id="xslt1">
<t:title>p:xslt1</t:title>
<xproc:status xprocxq="yes" calabash="no" comments="p:document uses file: prefix"/>
<t:description>simple usage of p:xslt, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="xslt/xslt1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xslt1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="xslt1_1">
<t:title>p:xslt1_1</t:title>
<xproc:status xprocxq="yes" calabash="no" comments="p:document uses file: prefix"/>
<t:description>simple usage of p:xslt, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="xslt/xslt1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xslt1_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="xslt2">
<t:title>p:xslt2</t:title>
<xproc:status xprocxq="yes" calabash="no" comments="p:inline with declare-step"/>
<t:description>simple usage of p:xslt, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="xslt/xslt2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xslt2.xml"/>
    </t:output>
</t:test>

<!-- #################################################################### p:wrap  //-->

<t:test xml:id="wrap1">
<t:title>p:wrap1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="wrap1_1">
<t:title>p:wrap1_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap1_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="wrap1_2">
<t:title>p:wrap1_@</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap1_2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap1_2.xml"/>
    </t:output>
</t:test>

<t:test xml:id="wrap1_3">
<t:title>p:wrap1_3</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap1_3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap1_3.xml"/>
    </t:output>
</t:test>

<t:test xml:id="wrap1_4">
<t:title>p:wrap1_$</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap1_4.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap1_4.xml"/>
    </t:output>
</t:test>

<t:test xml:id="wrap2">
<t:title>p:wrap2</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap2.xml"/>
    </t:output>
</t:test>

<t:test xml:id="wrap2_1">
<t:title>p:wrap2_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap2_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap2_1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="wrap3">
<t:title>p:wrap3</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap3.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap3.xml"/>
    </t:output>
</t:test>

<t:test xml:id="wrap3_1">
<t:title>p:wrap3_1</t:title>
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>simple usage of p:wrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="wrap/wrap3_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/wrap3_1.xml"/>
    </t:output>
</t:test>

<!-- #################################################################### p:unwrap  //-->

<t:test xml:id="unwrap1">
<t:title>p:unwrap1</t:title>
<xproc:status xprocxq="yes" calabash="no" comments="xprocxq needs better error handling"/>
<t:description>simple usage of p:unwrap, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="unwrap/unwrap1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/unwrap1.xml"/>
    </t:output>
</t:test>

<t:test xml:id="unwrap1_1">
<t:title>p:unwrap1_1</t:title>
<xproc:status xprocxq="yes" calabash="no" comments="xprocxq needs better error handling"/>
<t:description>simple usage of p:unwrap, slight variation on xpath, should succeed</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="unwrap/unwrap1_1.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/unwrap1_1.xml"/>
    </t:output>
</t:test>

<!-- #################################################################### p:escape-markup  //-->


<!-- #################################################################### p:unescape-markup  //-->


<!-- #################################################################### step error-codes  //-->

<t:test xml:id="xs0010a">
<t:title>xs0010a</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>throw err:xs0010a</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="error-codes/xs0010a.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xs0010a.xml"/>
    </t:output>
</t:test>

<t:test xml:id="xs0010b">
<t:title>xs0010b</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>throw err:xs0010b</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="error-codes/xs0010b.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xs0010b.xml"/>
    </t:output>
</t:test>

<t:test xml:id="xs0018">
<t:title>xs0018</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>throw err:xs0018</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="error-codes/xs0018.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xs0018.xml"/>
    </t:output>
</t:test>


<t:test xml:id="xs0027">
<t:title>xs0027</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>throw err:xs0027</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="error-codes/xs0027.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xs0027.xml"/>
    </t:output>
</t:test>


<t:test xml:id="xs0044">
<t:title>xs0044</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>throw err:xs0044</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="error-codes/xs0044.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xs0044.xml"/>
    </t:output>
</t:test>


<t:test xml:id="xs0036">
<t:title>XS0036</t:title>
<!-- will define a new error for this //-->
<xproc:status xprocxq="no" calabash="no" comments=""/>
<t:description>throw err:xs0036</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="declare-step/declare-step1_2.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/declare-step1_2.xml"/>
    </t:output>
</t:test>

<!-- #################################################################### dynamic error-codes  //-->

<t:test xml:id="xd0002a">
<t:title>xd0002a</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>throw err:xd0002a</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="error-codes/xd0002a.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xd0002a.xml"/>
    </t:output>
</t:test>


<t:test xml:id="xd0002b">
<t:title>xd0002b</t:title>
<xproc:status xprocxq="yes" calabash="no" comments=""/>
<t:description>throw err:xd0002b</t:description>
    <t:input port="source">
        <xi:include href="data/test.xml"/>
    </t:input>
    <t:pipeline >
          <xi:include href="error-codes/xd0002b.xml"/>
    </t:pipeline>
    <t:output port='result'>
         <xi:include href="result/xd0002b.xml"/>
    </t:output>
</t:test>


</t:test-suite>
