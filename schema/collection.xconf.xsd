<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dcterms="http://purl.org/dc/terms/"
    xmlns="http://exist-db.org/collection-config/1.0"
    targetNamespace="http://exist-db.org/collection-config/1.0" elementFormDefault="qualified">

    <xs:annotation>
        <xs:documentation>Schema for eXist-db Collection Configuration files /db/system/config/db/**/collection.xconf</xs:documentation>
        <xs:appinfo>
            <dcterms:title>Schema for eXist-db Collection Configuration Files</dcterms:title>
            <dcterms:created xsi:type="dcterms:W3CDTF">2011-10-09T18:47:21.319+01:00</dcterms:created>
            <dcterms:creator>Adam Retter</dcterms:creator>
        </xs:appinfo>
    </xs:annotation>

    <xs:element name="collection" type="collectionType"/>

    <xs:complexType name="collectionType">
        <xs:choice>
            <xs:annotation>
                <xs:documentation>Following structure ensures that at least one of index, triggers or validation is present and that each may only appear once</xs:documentation>
            </xs:annotation>
            <xs:sequence>
                <xs:element ref="index"/>
                <xs:element ref="triggers" minOccurs="0"/>
                <xs:element ref="validation" minOccurs="0"/>
            </xs:sequence>
            <xs:sequence>
                <xs:element ref="triggers"/>
                <xs:element ref="validation" minOccurs="0"/>
            </xs:sequence>
            <xs:sequence>
                <xs:element ref="validation"/>
            </xs:sequence>
        </xs:choice>
    </xs:complexType>
    <xs:element name="index" type="indexType"/>
    <xs:complexType name="rangeType">
        <xs:sequence>
            <xs:element name="range"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="indexType">
        <xs:annotation>
            <xs:documentation>Index Configuration</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:sequence>
                <xs:element ref="fulltext"/>
                <xs:element ref="lucene" minOccurs="0"/>
                <xs:element ref="range" minOccurs="0"/>
                <xs:element name="create" type="rangeIndexType" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="ngram" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="gml" minOccurs="0"/>
            </xs:sequence>
            <xs:sequence>
                <xs:element ref="lucene"/>
                <xs:element ref="range" minOccurs="0"/>
                <xs:element name="create" type="rangeIndexType" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="ngram" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="gml" minOccurs="0"/>
            </xs:sequence>
            <xs:sequence>
                <xs:element ref="range"/>
                <xs:element name="create" type="rangeIndexType" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="ngram" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="gml" minOccurs="0"/>
            </xs:sequence>
            <xs:sequence>
                <xs:element name="create" type="rangeIndexType" maxOccurs="unbounded"/>
                <xs:element ref="ngram" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="gml" minOccurs="0"/>
            </xs:sequence>
            <xs:sequence>
                <xs:element ref="ngram" maxOccurs="unbounded"/>
                <xs:element ref="gml" minOccurs="0"/>
            </xs:sequence>
            <xs:sequence>
                <xs:element ref="gml"/>
            </xs:sequence>
        </xs:choice>

    </xs:complexType>

    <xs:element name="fulltext" type="fulltextType"/>

    <xs:complexType name="fulltextType">
        <xs:annotation>
            <xs:documentation>Full Text Indexes</xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0">
            <xs:group ref="fulltextDirectives"/>
        </xs:sequence>
        <xs:attribute name="default" default="all">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="all"/>
                    <xs:enumeration value="none"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="attributes" type="xs:boolean" default="true"/>
        <xs:attribute name="alphanum" type="xs:boolean" default="true"/>
    </xs:complexType>

    <xs:group name="fulltextDirectives">
        <xs:sequence>
            <xs:element name="create" minOccurs="0" maxOccurs="unbounded" type="fulltextCreateType"/>
            <xs:element name="include" minOccurs="0" maxOccurs="unbounded" type="pathType"/>
            <xs:element name="exclude" minOccurs="0" maxOccurs="unbounded" type="pathType"/>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="pathType">
        <xs:attributeGroup ref="pathReq"/>
    </xs:complexType>

    <xs:complexType name="fulltextCreateType">
        <xs:attributeGroup ref="qnameReq"/>
        <xs:attribute name="content" use="optional" type="xs:string" fixed="mixed"/>
    </xs:complexType>

    <xs:complexType name="rangeIndexType">
        <xs:annotation>
            <xs:documentation>Either @qname or @path must be specified. Not both!</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="pathOpt"/>
        <xs:attributeGroup ref="qnameOpt"/>
        <xs:attribute name="type" use="required" type="xs:QName"/>
    </xs:complexType>

    <xs:element name="range" type="newRangeIndexType"/>
    
    <xs:complexType name="newRangeIndexType">
        <xs:sequence>
            <xs:element ref="create" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:element name="create" type="rangeIndexCreateType"/>
    
    <xs:complexType name="rangeIndexCreateType">
        <xs:sequence>
            <xs:group ref="fieldDefinitions" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attributeGroup ref="qnameOpt"/>
        <xs:attributeGroup ref="nestedOpt"/>
        <xs:attributeGroup ref="whitespaceOpt"/>
        <xs:attribute name="collation" use="optional" type="xs:string"/>
    </xs:complexType>
    
    <xs:group name="fieldDefinitions">
        <xs:sequence>
            <xs:element name="field" type="newRangeIndexFieldType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:group>
    
    <xs:complexType name="newRangeIndexFieldType">
        <xs:attribute name="name" type="xs:NCName" use="required"/>
        <xs:attributeGroup ref="qnameOpt"/>
        <xs:attributeGroup ref="matchOpt"/>
        <xs:attribute name="case" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="yes">
                        <xs:annotation>
                            <xs:documentation>Case sensitive</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="no">
                        <xs:annotation>
                            <xs:documentation>Case insensitive</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="nestedOpt"/>
        <xs:attributeGroup ref="whitespaceOpt"/>
        <xs:attribute name="type" type="xs:QName" use="required"/>
    </xs:complexType>
    
    <xs:element name="lucene" type="luceneType"/>

    <xs:complexType name="luceneType">
        <xs:sequence>
            <xs:element ref="analyzer" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="text" maxOccurs="unbounded"/>
            <xs:group ref="textInstruction" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="diacritics" use="optional" default="yes">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="yes">
                        <xs:annotation>
                            <xs:documentation>Preserve diacritics</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="no">
                        <xs:annotation>
                            <xs:documentation>Strip diacritics</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:element name="analyzer" type="analyzerType"/>

    <xs:complexType name="analyzerType">
        <xs:sequence minOccurs="0">
            <xs:element ref="param" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" use="optional" type="xs:ID"/>
        <xs:attributeGroup ref="class"/>
    </xs:complexType>

    <xs:element name="param" type="paramType"/>

    <xs:complexType name="paramType">
        <xs:sequence minOccurs="0">
            <xs:element name="value" minOccurs="1" maxOccurs="unbounded" type="xs:string"/>
        </xs:sequence>
        <xs:attributeGroup ref="name"/>
        <xs:attribute name="type" type="xs:string" use="optional" default="java.lang.String"/>
        <xs:attributeGroup ref="valueOpt"/>
    </xs:complexType>

    <xs:element name="inline" type="singleQnameAttrType"/>
    <xs:element name="ignore" type="singleQnameAttrType"/>

    <xs:group name="textInstruction">
        <xs:sequence>
            <xs:element ref="inline" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="ignore" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:group>

    <xs:element name="text" type="textType"/>

    <xs:complexType name="textType">
        <xs:annotation>
            <xs:documentation>Either @qname or @match must be specified. Not both!</xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0">
            <xs:group ref="textInstruction"/>
        </xs:sequence>
        <xs:attributeGroup ref="qnameOpt"/>
        <xs:attribute name="match" use="optional" type="xs:string"/>
        <xs:attribute name="analyzer" use="optional" type="xs:IDREF"/>
        <xs:attribute name="boost" use="optional" type="xs:double"/>
        <xs:attribute name="field" use="optional" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="singleQnameAttrType">
        <xs:attributeGroup ref="qnameReq"/>
    </xs:complexType>

    <xs:element name="ngram" type="singleQnameAttrType"/>

    <xs:element name="gml" type="gmlIndexType"/>

    <xs:complexType name="gmlIndexType">
        <xs:attribute name="flushAfter" use="required" type="xs:positiveInteger"/>
    </xs:complexType>

    <xs:element name="triggers" type="triggersType"/>

    <xs:complexType name="triggersType">
        <xs:annotation>
            <xs:documentation>Trigger Configuration</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="trigger" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:element name="trigger" type="triggerType"/>

    <xs:complexType name="triggerType">
        <xs:sequence minOccurs="0">
            <xs:element ref="parameter" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="event" use="optional" type="eventType">
            <xs:annotation>
                <xs:documentation>This is deprecated, triggers should now code functions for each event</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="class"/>
    </xs:complexType>

    <xs:simpleType name="eventType">
        <xs:restriction base="xs:NCName">
            <xs:enumeration value="create"/>
            <xs:enumeration value="update"/>
            <xs:enumeration value="copy"/>
            <xs:enumeration value="move"/>
            <xs:enumeration value="delete"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:element name="parameter" type="parameterType"/>

    <xs:complexType name="parameterType">
        <xs:attributeGroup ref="name"/>
        <xs:attributeGroup ref="valueReq"/>
    </xs:complexType>

    <xs:element name="validation" type="validationType"/>

    <xs:complexType name="validationType">
        <xs:annotation>
            <xs:documentation>Per collection validation-switch configuration</xs:documentation>
        </xs:annotation>
        <xs:attribute name="mode" use="required" type="modeType"/>
    </xs:complexType>

    <xs:simpleType name="modeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="auto"/>
            <xs:enumeration value="no"/>
            <xs:enumeration value="yes"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="yesNoType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="yes"/>
            <xs:enumeration value="no"/>
            <xs:enumeration value="true"/>
            <xs:enumeration value="false"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- we are hiding attributes in attributeGroup to manage their
        namespaces as described here: http://docstore.mik.ua/orelly/xml/schema/ch10_04.htm -->
    <xs:attributeGroup name="class">
        <xs:attribute name="class" type="xs:string" use="required" form="unqualified"/>
    </xs:attributeGroup>

    <!-- ideally we would have just one of each attribute - but due do the form restrictions in XML Schema
    we need both -->
    <xs:attributeGroup name="name">
        <xs:attribute name="name" type="xs:NCName" use="required" form="unqualified"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="valueReq">
        <xs:attribute name="value" type="xs:string" use="required" form="unqualified"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="valueOpt">
        <xs:attribute name="value" type="xs:string" use="optional" form="unqualified"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="qnameReq">
        <xs:attribute name="qname" type="xs:string" use="required" form="unqualified"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="qnameOpt">
        <xs:attribute name="qname" type="xs:string" use="optional" form="unqualified"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="matchOpt">
        <xs:attribute name="match" type="xs:string" use="optional" form="unqualified"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="pathReq">
        <xs:attribute name="path" type="xs:string" use="required" form="unqualified"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="pathOpt">
        <xs:attribute name="path" type="xs:string" use="optional" form="unqualified"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="nestedOpt">
        <xs:attribute name="nested" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="yes">
                        <xs:annotation>
                            <xs:documentation>Include descendant elements in index</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="no">
                        <xs:annotation>
                            <xs:documentation>Do not include descendant elements in index</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="whitespaceOpt">
        <xs:attribute name="whitespace" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="trim">
                        <xs:annotation>
                            <xs:documentation>Removing leading and trailing whitespace</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="normalize">
                        <xs:annotation>
                            <xs:documentation>Normalize whitespace</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
</xs:schema>
